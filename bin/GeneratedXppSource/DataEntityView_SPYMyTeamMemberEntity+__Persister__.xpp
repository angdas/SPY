Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYMyTeamMember_ID(1)
    #define.HcmWorker_ID(2)
    #define.DirPerson_FK_ID(3)
    #define.CompanyInfo_ID(4)
    
    // Data source buffers
    SPYMyTeamMember m_SPYMyTeamMember;
    HcmWorker m_HcmWorker;
    DirPerson m_DirPerson_FK;
    CompanyInfo m_CompanyInfo;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYMyTeamMember'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorker'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('DirPerson_FK'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS3(DirPerson _dirPerson_FK, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_dirPerson_FK.isFieldSet(fieldnum(DirPerson,PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _dirPerson_FK) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS2(DataEntityRuntimeContext _entityCtx, HcmWorker _hcmWorker)
    {
        DirPerson dirPerson_FK_ = _entityCtx.getRuntimeContextByName('DirPerson_FK').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmWorker.Person != dirPerson_FK_.RecId)
        {
            _hcmWorker.Person = dirPerson_FK_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmWorker').getDatabaseOperation();
        SPYMyTeamMemberEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYMyTeamMemberEntity, HcmWorker_Person)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmWorker'), _entityCtx.getRuntimeContextByName('DirPerson_FK'), dataSourceDBOperation, 'HcmWorker.Person', _hcmWorker, fieldnum(HcmWorker, Person), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(HcmWorker _hcmWorker, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,Person)))
        {
            return true;
        }
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorker) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(CompanyInfo _companyInfo, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,PartyNumber)))
        {
            return true;
        }
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYMyTeamMember _sPYMyTeamMember)
    {
        HcmWorker hcmWorker_ = _entityCtx.getRuntimeContextByName('HcmWorker').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmWorker').conflictDetectionInvoked() || hcmWorker_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYMyTeamMember.TeamMember != hcmWorker_.RecId)
            {
                _sPYMyTeamMember.TeamMember = hcmWorker_.RecId;
            }
        }
        
        CompanyInfo companyInfo_ = _entityCtx.getRuntimeContextByName('CompanyInfo').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo').conflictDetectionInvoked() || companyInfo_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYMyTeamMember.LegalEntity != companyInfo_.RecId)
            {
                _sPYMyTeamMember.LegalEntity = companyInfo_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYMyTeamMember').getDatabaseOperation();
        SPYMyTeamMemberEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYMyTeamMemberEntity, TeamMember)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYMyTeamMember'), _entityCtx.getRuntimeContextByName('HcmWorker'), dataSourceDBOperation, 'SPYMyTeamMember.TeamMember', _sPYMyTeamMember, fieldnum(SPYMyTeamMember, TeamMember), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYMyTeamMemberEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYMyTeamMember'), _entityCtx.getRuntimeContextByName('CompanyInfo'), dataSourceDBOperation, 'SPYMyTeamMember.LegalEntity', _sPYMyTeamMember, fieldnum(SPYMyTeamMember, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYMyTeamMember].
            {
                // save/update data sources referenced by [HcmWorker].
                {
                    // handle datasources which are part of extensions and need to be saved before [DirPerson_FK]
                    if(!this.preSaveDataSource(_entityCtx, 'DirPerson_FK'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson_FK');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            DirPerson dirPerson_FK_ = _dataSourceCtx.getBuffer();
                            if((dirPerson_FK_.PartyNumber))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [DirPerson_FK].
                    if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                    {
                        // returns from here if an inner joined data source fails to be saved.
                        return false;
                    }
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS2(_entityCtx, _dataSourceCtx.getBuffer());
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmWorker hcmWorker_ = _dataSourceCtx.getBuffer();
                        if((hcmWorker_.Person) || (hcmWorker_.PersonnelNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmWorker].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        CompanyInfo companyInfo_ = _dataSourceCtx.getBuffer();
                        if((companyInfo_.DataArea) || (companyInfo_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYMyTeamMember]
            if(!this.preSaveDataSource(_entityCtx, 'SPYMyTeamMember'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYMyTeamMember');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYMyTeamMember].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYMyTeamMember]
            if(!this.preSaveDataSource(_entityCtx, 'SPYMyTeamMember'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYMyTeamMember');
            // deletes data source [SPYMyTeamMember].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYMyTeamMember].
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmWorker].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmWorker].
                {
                    // handle datasources which are part of extensions and need to be saved before [DirPerson_FK]
                    if(!this.preSaveDataSource(_entityCtx, 'DirPerson_FK'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson_FK');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [DirPerson_FK].
                    if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                    {
                        // returns from here if an inner joined data source fails to be saved.
                        return false;
                    }
                    this.postSaveDataSource();
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYMyTeamMember _sPYMyTeamMember, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, TeamMember), _sPYMyTeamMember, fieldnum(SPYMyTeamMember, TeamMember), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, LegalEntity), _sPYMyTeamMember, fieldnum(SPYMyTeamMember, LegalEntity), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYMyTeamMember, _sPYMyTeamMemberEntity);
        _sPYMyTeamMember.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, HcmWorker_Person), _hcmWorker, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, HcmWorker_PersonnelNumber), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYMyTeamMemberEntity);
        _hcmWorker.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, DirPerson_FK_PartyNumber), _dirPerson_FK, fieldnum(DirPerson, PartyNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _dirPerson_FK, _sPYMyTeamMemberEntity);
        _dirPerson_FK.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, CompanyInfo_PartyNumber), _companyInfo, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, CompanyInfo_DataArea), _companyInfo, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYMyTeamMemberEntity);
        _companyInfo.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYMyTeamMember _sPYMyTeamMember, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYMyTeamMember, fieldnum(SPYMyTeamMember, TeamMember), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, TeamMember), false);
        this.mapDataSourceFieldToEntityField(_sPYMyTeamMember, fieldnum(SPYMyTeamMember, LegalEntity), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, LegalEntity), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYMyTeamMember, _sPYMyTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYMyTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYMyTeamMember);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, Person), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, HcmWorker_Person), false);
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, HcmWorker_PersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYMyTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYMyTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorker);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_dirPerson_FK, fieldnum(DirPerson, PartyNumber), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, DirPerson_FK_PartyNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _dirPerson_FK, _sPYMyTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYMyTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _dirPerson_FK);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, PartyNumber), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, CompanyInfo_PartyNumber), false);
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, DataArea), _sPYMyTeamMemberEntity, fieldnum(SPYMyTeamMemberEntity, CompanyInfo_DataArea), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYMyTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYMyTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #DirPerson_FK_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, TeamMember)))
        {
            return true;
        }
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, LegalEntity)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYMyTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, HcmWorker_Person)))
        {
            return true;
        }
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, HcmWorker_PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYMyTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, DirPerson_FK_PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYMyTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, CompanyInfo_PartyNumber)))
        {
            return true;
        }
        if(_sPYMyTeamMemberEntity.isFieldSet(fieldnum(SPYMyTeamMemberEntity, CompanyInfo_DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYMyTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYMyTeamMember _sPYMyTeamMember)
    {
        boolean rtrn = true;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYMyTeamMemberEntity, _dataSourceCtx, _sPYMyTeamMember) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYMyTeamMember _sPYMyTeamMember, SPYMyTeamMember _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMember, fieldnum(SPYMyTeamMember, TeamMember), _matchingRecord, fieldnum(SPYMyTeamMember, TeamMember), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYMyTeamMember, fieldnum(SPYMyTeamMember, LegalEntity), _matchingRecord, fieldnum(SPYMyTeamMember, LegalEntity), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYMyTeamMemberEntity), _sPYMyTeamMember, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, Person), _matchingRecord, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYMyTeamMemberEntity), _hcmWorker, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, DirPerson _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _dirPerson_FK, fieldnum(DirPerson, PartyNumber), _matchingRecord, fieldnum(DirPerson, PartyNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYMyTeamMemberEntity), _dirPerson_FK, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, PartyNumber), _matchingRecord, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYMyTeamMemberEntity), _companyInfo, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYMyTeamMember_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorker_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #DirPerson_FK_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #HcmWorker_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #DirPerson_FK_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
            case #CompanyInfo_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYMyTeamMember', m_SPYMyTeamMember, this.getDataSourceId('SPYMyTeamMember'), this.getDataSourceId('SPYMyTeamMember'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorker', m_HcmWorker, this.getDataSourceId('HcmWorker'), this.getDataSourceId('HcmWorker'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'DirPerson_FK', m_DirPerson_FK, this.getDataSourceId('DirPerson_FK'), this.getDataSourceId('DirPerson_FK'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo', m_CompanyInfo, this.getDataSourceId('CompanyInfo'), this.getDataSourceId('CompanyInfo'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.Person != _updatedRecord.Person)
        {
            return true;
        }
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(DirPerson _originalRecord, DirPerson _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private SPYMyTeamMember LookForUniqueKeyMatch_DS1(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, SPYMyTeamMember _sPYMyTeamMember)
    {
        SPYMyTeamMember sPYMyTeamMember_ = null;
        
        select
            forUpdate
            firstOnly
                sPYMyTeamMember_
        where
            sPYMyTeamMember_.TeamMember == _sPYMyTeamMember.TeamMember && sPYMyTeamMember_.LegalEntity == _sPYMyTeamMember.LegalEntity
        ;
        
        if (sPYMyTeamMember_)
        {
            return sPYMyTeamMember_;
        }
        
        return sPYMyTeamMember_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS2(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, HcmWorker _hcmWorker)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.Person == _hcmWorker.Person
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _hcmWorker.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private DirPerson LookForUniqueKeyMatch_DS3(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, DirPerson _dirPerson_FK)
    {
        DirPerson dirPerson_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        dirPerson_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, RecId
            from
                dirPerson_
        where
            dirPerson_.PartyNumber == _dirPerson_FK.PartyNumber
        ;
        
        if (dirPerson_)
        {
            return dirPerson_;
        }
        
        return dirPerson_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS4(SPYMyTeamMemberEntity _sPYMyTeamMemberEntity, CompanyInfo _companyInfo)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.PartyNumber == _companyInfo.PartyNumber
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }

}

