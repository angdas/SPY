Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYAbsenceConfigLine_ID(1)
    #define.SPYAbsenceConfigTable_ID(2)
    #define.SPYPayrollPeriod_ID(3)
    
    // Data source buffers
    SPYAbsenceConfigLine m_SPYAbsenceConfigLine;
    SPYAbsenceConfigTable m_SPYAbsenceConfigTable;
    SPYPayrollPeriod m_SPYPayrollPeriod;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAbsenceConfigLine'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollPeriod'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SPYAbsenceConfigTable _sPYAbsenceConfigTable, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYAbsenceConfigTable.isFieldSet(fieldnum(SPYAbsenceConfigTable,AbsenceConfigCode)))
        {
            return true;
        }
        if(_sPYAbsenceConfigTable.isFieldSet(fieldnum(SPYAbsenceConfigTable,Description)))
        {
            return true;
        }
        if(_sPYAbsenceConfigTable.isFieldSet(fieldnum(SPYAbsenceConfigTable,DataAreaId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYAbsenceConfigTable) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS3(SPYPayrollPeriod _sPYPayrollPeriod, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayrollPeriod.isFieldSet(fieldnum(SPYPayrollPeriod,PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayrollPeriod) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYAbsenceConfigLine _sPYAbsenceConfigLine)
    {
        SPYAbsenceConfigTable sPYAbsenceConfigTable_ = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYAbsenceConfigLine.AbsenceConfig != sPYAbsenceConfigTable_.RecId)
        {
            _sPYAbsenceConfigLine.AbsenceConfig = sPYAbsenceConfigTable_.RecId;
        }
        
        SPYPayrollPeriod sPYPayrollPeriod_ = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYPayrollPeriod').conflictDetectionInvoked() || sPYPayrollPeriod_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYAbsenceConfigLine.EntitlementPayrollPeriod != sPYPayrollPeriod_.RecId)
            {
                _sPYAbsenceConfigLine.EntitlementPayrollPeriod = sPYPayrollPeriod_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigLine').getDatabaseOperation();
        SPYAbsenceConfigEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAbsenceConfigEntity, AbsenceConfig)))
        {
            if(!this.validateDataSourceField(dataSourceDBOperation, 'SPYAbsenceConfigLine.AbsenceConfig', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceConfig), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAbsenceConfigEntity, EntitlementPayrollPeriod)))
        {
            if(!this.validateDataSourceField(dataSourceDBOperation, 'SPYAbsenceConfigLine.EntitlementPayrollPeriod', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, EntitlementPayrollPeriod), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYAbsenceConfigLine].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // invoke conflict detection for data source that's on the 1 side of 1:N or N:1 relationship.
                this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [SPYAbsenceConfigTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYPayrollPeriod sPYPayrollPeriod_ = _dataSourceCtx.getBuffer();
                        if((sPYPayrollPeriod_.PayrollPeriodCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYPayrollPeriod].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigLine]
            if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigLine'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigLine');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYAbsenceConfigLine].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigLine]
            if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigLine'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigLine');
            // deletes data source [SPYAbsenceConfigLine].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYAbsenceConfigLine].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable');
                // skips delete operation against data source that's on the 1 side of 1:N or N:1 relationship.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYAbsenceConfigTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYPayrollPeriod].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigLine _sPYAbsenceConfigLine, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceConfig), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceConfig), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceCycle), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceCycle), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedDate), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedQty), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryBackward), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryBackward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryForward), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryForward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, EntitlementPayrollPeriod), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, EntitlementPayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, FetchBenefitQty), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, FetchBenefitQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, HRMAbsenceCodeId), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, HRMAbsenceCodeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Qty), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, Qty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInNotice), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInNotice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInProbation), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInProbation), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigLine, _sPYAbsenceConfigEntity);
        _sPYAbsenceConfigLine.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceConfigCode), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Description), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, Description), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigTable, _sPYAbsenceConfigEntity);
        _sPYAbsenceConfigTable.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, PayrollPeriodCode), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYAbsenceConfigEntity);
            _sPYPayrollPeriod.trackFieldExternallySet(false);
        }
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigLine _sPYAbsenceConfigLine, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceConfig), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceConfig), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceCycle), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceCycle), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedDate), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedDate), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedQty), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedQty), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryBackward), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryBackward), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryForward), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryForward), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, EntitlementPayrollPeriod), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, EntitlementPayrollPeriod), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, FetchBenefitQty), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, FetchBenefitQty), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, HRMAbsenceCodeId), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, HRMAbsenceCodeId), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, Qty), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Qty), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInNotice), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInNotice), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInProbation), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInProbation), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigLine, _sPYAbsenceConfigEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAbsenceConfigEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAbsenceConfigLine);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceConfigCode), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, Description), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, DataAreaId), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Company), true);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigTable, _sPYAbsenceConfigEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAbsenceConfigEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAbsenceConfigTable);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, PayrollPeriodCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYAbsenceConfigEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAbsenceConfigEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollPeriod);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYAbsenceConfigTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, AbsenceConfig)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, AbsenceCycle)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, AccruedDate)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, AccruedQty)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, CarryBackward)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, CarryForward)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, EntitlementPayrollPeriod)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, FetchBenefitQty)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, HRMAbsenceCodeId)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, Qty)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, RestrictInNotice)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, RestrictInProbation)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAbsenceConfigEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, AbsenceConfigCode)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, Description)))
        {
            return true;
        }
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, Company)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAbsenceConfigEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAbsenceConfigEntity.isFieldSet(fieldnum(SPYAbsenceConfigEntity, PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAbsenceConfigEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigLine _sPYAbsenceConfigLine)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceCycle), 'SPYAbsenceConfigEntity.AbsenceCycle', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceCycle), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedDate), 'SPYAbsenceConfigEntity.AccruedDate', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AccruedQty), 'SPYAbsenceConfigEntity.AccruedQty', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedQty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryBackward), 'SPYAbsenceConfigEntity.CarryBackward', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryBackward), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, CarryForward), 'SPYAbsenceConfigEntity.CarryForward', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryForward), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, FetchBenefitQty), 'SPYAbsenceConfigEntity.FetchBenefitQty', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, FetchBenefitQty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, HRMAbsenceCodeId), 'SPYAbsenceConfigEntity.HRMAbsenceCodeId', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, HRMAbsenceCodeId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Qty), 'SPYAbsenceConfigEntity.Qty', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, Qty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInNotice), 'SPYAbsenceConfigEntity.RestrictInNotice', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInNotice), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, RestrictInProbation), 'SPYAbsenceConfigEntity.RestrictInProbation', _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInProbation), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYAbsenceConfigEntity, _dataSourceCtx, _sPYAbsenceConfigLine) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS2(DataEntityRuntimeContext _entityCtx, SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, AbsenceConfigCode), 'SPYAbsenceConfigEntity.AbsenceConfigCode', _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYAbsenceConfigEntity, fieldnum(SPYAbsenceConfigEntity, Description), 'SPYAbsenceConfigEntity.Description', _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYAbsenceConfigEntity, _dataSourceCtx, _sPYAbsenceConfigTable) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #SPYAbsenceConfigTable_ID:
                rtrn = this.validateDataSource_DS2(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigLine _sPYAbsenceConfigLine, SPYAbsenceConfigLine _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceConfig), _matchingRecord, fieldnum(SPYAbsenceConfigLine, AbsenceConfig), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AbsenceCycle), _matchingRecord, fieldnum(SPYAbsenceConfigLine, AbsenceCycle), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedDate), _matchingRecord, fieldnum(SPYAbsenceConfigLine, AccruedDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, AccruedQty), _matchingRecord, fieldnum(SPYAbsenceConfigLine, AccruedQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryBackward), _matchingRecord, fieldnum(SPYAbsenceConfigLine, CarryBackward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, CarryForward), _matchingRecord, fieldnum(SPYAbsenceConfigLine, CarryForward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, EntitlementPayrollPeriod), _matchingRecord, fieldnum(SPYAbsenceConfigLine, EntitlementPayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, FetchBenefitQty), _matchingRecord, fieldnum(SPYAbsenceConfigLine, FetchBenefitQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, HRMAbsenceCodeId), _matchingRecord, fieldnum(SPYAbsenceConfigLine, HRMAbsenceCodeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, Qty), _matchingRecord, fieldnum(SPYAbsenceConfigLine, Qty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInNotice), _matchingRecord, fieldnum(SPYAbsenceConfigLine, RestrictInNotice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigLine, fieldnum(SPYAbsenceConfigLine, RestrictInProbation), _matchingRecord, fieldnum(SPYAbsenceConfigLine, RestrictInProbation), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAbsenceConfigEntity), _sPYAbsenceConfigLine, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYAbsenceConfigTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), _matchingRecord, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, Description), _matchingRecord, fieldnum(SPYAbsenceConfigTable, Description), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAbsenceConfigEntity), _sPYAbsenceConfigTable, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYPayrollPeriod _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _matchingRecord, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAbsenceConfigEntity), _sPYPayrollPeriod, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAbsenceConfigLine_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord(), 'SPYExpression'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'SPYPayrollPeriod','SPYExpression'));
            }
        }
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #SPYAbsenceConfigTable_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #SPYPayrollPeriod_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYAbsenceConfigLine', m_SPYAbsenceConfigLine, this.getDataSourceId('SPYAbsenceConfigLine'), this.getDataSourceId('SPYAbsenceConfigLine'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYAbsenceConfigTable', m_SPYAbsenceConfigTable, this.getDataSourceId('SPYAbsenceConfigTable'), this.getDataSourceId('SPYAbsenceConfigTable'), true/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYPayrollPeriod', m_SPYPayrollPeriod, this.getDataSourceId('SPYPayrollPeriod'), this.getDataSourceId('SPYPayrollPeriod'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(SPYAbsenceConfigTable _originalRecord, SPYAbsenceConfigTable _updatedRecord)
    {
        if (_originalRecord.AbsenceConfigCode != _updatedRecord.AbsenceConfigCode)
        {
            return true;
        }
        if (_originalRecord.Description != _updatedRecord.Description)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(SPYPayrollPeriod _originalRecord, SPYPayrollPeriod _updatedRecord)
    {
        if (_originalRecord.PayrollPeriodCode != _updatedRecord.PayrollPeriodCode)
        {
            return true;
        }
        return false;
    }
    private SPYAbsenceConfigLine LookForUniqueKeyMatch_DS1(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, SPYAbsenceConfigLine _sPYAbsenceConfigLine)
    {
        SPYAbsenceConfigLine sPYAbsenceConfigLine_ = null;
        
        select
            forUpdate
            firstOnly
                sPYAbsenceConfigLine_
        where
            sPYAbsenceConfigLine_.AbsenceConfig == _sPYAbsenceConfigLine.AbsenceConfig && sPYAbsenceConfigLine_.HRMAbsenceCodeId == _sPYAbsenceConfigLine.HRMAbsenceCodeId && sPYAbsenceConfigLine_.Sequence == _sPYAbsenceConfigLine.Sequence && sPYAbsenceConfigLine_.EffectiveDate == _sPYAbsenceConfigLine.EffectiveDate
        ;
        
        if (sPYAbsenceConfigLine_)
        {
            return sPYAbsenceConfigLine_;
        }
        
        return sPYAbsenceConfigLine_;
    }
    private SPYAbsenceConfigTable LookForUniqueKeyMatch_DS2(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, SPYAbsenceConfigTable _sPYAbsenceConfigTable)
    {
        SPYAbsenceConfigTable sPYAbsenceConfigTable_ = null;
        
        select
            forUpdate
            firstOnly
                sPYAbsenceConfigTable_
        where
            sPYAbsenceConfigTable_.AbsenceConfigCode == _sPYAbsenceConfigTable.AbsenceConfigCode
        ;
        
        if (sPYAbsenceConfigTable_)
        {
            return sPYAbsenceConfigTable_;
        }
        
        return sPYAbsenceConfigTable_;
    }
    private SPYPayrollPeriod LookForUniqueKeyMatch_DS3(SPYAbsenceConfigEntity _sPYAbsenceConfigEntity, SPYPayrollPeriod _sPYPayrollPeriod)
    {
        SPYPayrollPeriod sPYPayrollPeriod_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayrollPeriod_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PayrollPeriodCode, RecId
            from
                sPYPayrollPeriod_
        where
            sPYPayrollPeriod_.PayrollPeriodCode == _sPYPayrollPeriod.PayrollPeriodCode
        ;
        
        if (sPYPayrollPeriod_)
        {
            return sPYPayrollPeriod_;
        }
        
        return sPYPayrollPeriod_;
    }

}

