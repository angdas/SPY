Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYPayElementGroupTable_ID(1)
    
    // Data source buffers
    SPYPayElementGroupTable m_SPYPayElementGroupTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayElementGroupTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementGroupTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementGroupTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementGroupTable');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [SPYPayElementGroupTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementGroupTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementGroupTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementGroupTable');
            // deletes data source [SPYPayElementGroupTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementGroupTable _sPYPayElementGroupTable, SPYPayelementGroupEntity _sPYPayelementGroupEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, Description), _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, PayElementGroupCode), _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, PayElementGroupCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayElementGroupTable, _sPYPayelementGroupEntity);
        _sPYPayElementGroupTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementGroupTable _sPYPayElementGroupTable, SPYPayelementGroupEntity _sPYPayelementGroupEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, Description), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, PayElementGroupCode), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, PayElementGroupCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayElementGroupTable, _sPYPayelementGroupEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYPayelementGroupEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayElementGroupTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYPayelementGroupEntity _sPYPayelementGroupEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYPayelementGroupEntity.isFieldSet(fieldnum(SPYPayelementGroupEntity, Description)))
        {
            return true;
        }
        if(_sPYPayelementGroupEntity.isFieldSet(fieldnum(SPYPayelementGroupEntity, PayElementGroupCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYPayelementGroupEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYPayelementGroupEntity _sPYPayelementGroupEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementGroupTable _sPYPayElementGroupTable)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, Description), 'SPYPayelementGroupEntity.Description', _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayelementGroupEntity, fieldnum(SPYPayelementGroupEntity, PayElementGroupCode), 'SPYPayelementGroupEntity.PayElementGroupCode', _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, PayElementGroupCode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYPayelementGroupEntity, _dataSourceCtx, _sPYPayElementGroupTable) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementGroupTable _sPYPayElementGroupTable, SPYPayElementGroupTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, Description), _matchingRecord, fieldnum(SPYPayElementGroupTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementGroupTable, fieldnum(SPYPayElementGroupTable, PayElementGroupCode), _matchingRecord, fieldnum(SPYPayElementGroupTable, PayElementGroupCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYPayelementGroupEntity), _sPYPayElementGroupTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementGroupTable_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYPayElementGroupTable', m_SPYPayElementGroupTable, this.getDataSourceId('SPYPayElementGroupTable'), this.getDataSourceId('SPYPayElementGroupTable'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYPayElementGroupTable LookForUniqueKeyMatch_DS1(SPYPayelementGroupEntity _sPYPayelementGroupEntity, SPYPayElementGroupTable _sPYPayElementGroupTable)
    {
        SPYPayElementGroupTable sPYPayElementGroupTable_ = null;
        
        select
            forUpdate
            firstOnly
                sPYPayElementGroupTable_
        where
            sPYPayElementGroupTable_.PayElementGroupCode == _sPYPayElementGroupTable.PayElementGroupCode
        ;
        
        if (sPYPayElementGroupTable_)
        {
            return sPYPayElementGroupTable_;
        }
        
        return sPYPayElementGroupTable_;
    }

}

