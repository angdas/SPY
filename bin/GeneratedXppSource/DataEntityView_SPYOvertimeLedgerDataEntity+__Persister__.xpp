Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYOvertimeLedger_ID(1)
    
    // Data source buffers
    SPYOvertimeLedger m_SPYOvertimeLedger;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYOvertimeLedger'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYOvertimeLedger]
            if(!this.preSaveDataSource(_entityCtx, 'SPYOvertimeLedger'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYOvertimeLedger');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [SPYOvertimeLedger].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYOvertimeLedger]
            if(!this.preSaveDataSource(_entityCtx, 'SPYOvertimeLedger'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYOvertimeLedger');
            // deletes data source [SPYOvertimeLedger].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeLedger _sPYOvertimeLedger, SPYOvertimeLedgerDataEntity _sPYOvertimeLedgerDataEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDate), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDays), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDays), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeHours), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeHours), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeJournalTrans), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeJournalTrans), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeType), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Worker), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, TransDate), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, TransDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Txt), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Txt), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYOvertimeLedger, _sPYOvertimeLedgerDataEntity);
        _sPYOvertimeLedger.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeLedger _sPYOvertimeLedger, SPYOvertimeLedgerDataEntity _sPYOvertimeLedgerDataEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDate), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDate), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDays), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDays), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeHours), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeHours), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeJournalTrans), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeJournalTrans), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeType), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeType), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Worker), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Worker), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, TransDate), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, TransDate), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Txt), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Txt), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYOvertimeLedger, _sPYOvertimeLedgerDataEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYOvertimeLedgerDataEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYOvertimeLedger);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYOvertimeLedgerDataEntity _sPYOvertimeLedgerDataEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDate)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDays)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, OvertimeHours)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, OvertimeJournalTrans)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, OvertimeType)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, Worker)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, TransDate)))
        {
            return true;
        }
        if(_sPYOvertimeLedgerDataEntity.isFieldSet(fieldnum(SPYOvertimeLedgerDataEntity, Txt)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYOvertimeLedgerDataEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYOvertimeLedgerDataEntity _sPYOvertimeLedgerDataEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeLedger _sPYOvertimeLedger)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDate), 'SPYOvertimeLedgerDataEntity.OvertimeDate', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeDays), 'SPYOvertimeLedgerDataEntity.OvertimeDays', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDays), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeHours), 'SPYOvertimeLedgerDataEntity.OvertimeHours', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeHours), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeJournalTrans), 'SPYOvertimeLedgerDataEntity.OvertimeJournalTrans', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeJournalTrans), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, OvertimeType), 'SPYOvertimeLedgerDataEntity.OvertimeType', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Worker), 'SPYOvertimeLedgerDataEntity.Worker', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, TransDate), 'SPYOvertimeLedgerDataEntity.TransDate', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, TransDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYOvertimeLedgerDataEntity, fieldnum(SPYOvertimeLedgerDataEntity, Txt), 'SPYOvertimeLedgerDataEntity.Txt', _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Txt), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYOvertimeLedgerDataEntity, _dataSourceCtx, _sPYOvertimeLedger) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeLedger _sPYOvertimeLedger, SPYOvertimeLedger _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDate), _matchingRecord, fieldnum(SPYOvertimeLedger, OvertimeDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeDays), _matchingRecord, fieldnum(SPYOvertimeLedger, OvertimeDays), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeHours), _matchingRecord, fieldnum(SPYOvertimeLedger, OvertimeHours), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeJournalTrans), _matchingRecord, fieldnum(SPYOvertimeLedger, OvertimeJournalTrans), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, OvertimeType), _matchingRecord, fieldnum(SPYOvertimeLedger, OvertimeType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Worker), _matchingRecord, fieldnum(SPYOvertimeLedger, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, TransDate), _matchingRecord, fieldnum(SPYOvertimeLedger, TransDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeLedger, fieldnum(SPYOvertimeLedger, Txt), _matchingRecord, fieldnum(SPYOvertimeLedger, Txt), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYOvertimeLedgerDataEntity), _sPYOvertimeLedger, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeLedger_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYOvertimeLedger', m_SPYOvertimeLedger, this.getDataSourceId('SPYOvertimeLedger'), this.getDataSourceId('SPYOvertimeLedger'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYOvertimeLedger LookForUniqueKeyMatch_DS1(SPYOvertimeLedgerDataEntity _sPYOvertimeLedgerDataEntity, SPYOvertimeLedger _sPYOvertimeLedger)
    {
        SPYOvertimeLedger sPYOvertimeLedger_ = null;
        
        select
            forUpdate
            firstOnly
                sPYOvertimeLedger_
        where
            sPYOvertimeLedger_.RecId == _sPYOvertimeLedger.RecId
        ;
        
        if (sPYOvertimeLedger_)
        {
            return sPYOvertimeLedger_;
        }
        
        return sPYOvertimeLedger_;
    }

}

