Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYPayElementPayrollView_ID(1)
    
    // Data source buffers
    SPYPayElementPayrollView m_SPYPayElementPayrollView;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayElementPayrollView'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS1(SPYPayElementPayrollView _sPYPayElementPayrollView, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,ApplicableForAll)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,CalculationOrder)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,Description)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,DisplayOrder)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,DistributeCost)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,EOSPayElement)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,Expression)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,InstanceRelationType)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,LegalEntity)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,ParentPayElement)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayElement)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayElementCode)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayElementGroup)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayElementType)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,Payroll)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayrollDetailsValidFrom)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayrollDetailsValidTo)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,PayrollType)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,ReferencePayElement)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,ValidFrom)))
        {
            return true;
        }
        if(_sPYPayElementPayrollView.isFieldSet(fieldnum(SPYPayElementPayrollView,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayElementPayrollView) ? true : false;
        return rtrn;
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementPayrollView]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementPayrollView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementPayrollView');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            if(this.isAnyFieldSet_DS1(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
            {
                // invoke conflict detection for read-only data source.
                Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                if(!resolvedRecord)
                {
                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                    throw Exception::ViewDataSourceValidation;
                }
                // marks the read-only data source as 'saved' and skips actual insert/update operation.
                _dataSourceCtx.setDataSaved(true);
            }
            // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
            else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                _dataSourceCtx.setDataSaved(true);
            }
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // inserts/updates data source [SPYPayElementPayrollView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementPayrollView]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementPayrollView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementPayrollView');
            // skips delete operation against read-only data source.
            // marks the read-only data source as 'saved' and skips actual delete operation.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // deletes data source [SPYPayElementPayrollView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementPayrollView _sPYPayElementPayrollView, SPYPayrollDetailsEntity _sPYPayrollDetailsEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ApplicableForAll), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ApplicableForAll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, CalculationOrder), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, CalculationOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Description), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, DisplayOrder), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DisplayOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, DistributeCost), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, EOSPayElement), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, EOSPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Expression), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Expression), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, InstanceRelationType), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, InstanceRelationType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, LegalEntity), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ParentPayElement), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ParentPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElement), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementCode), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementGroup), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementType), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Payroll), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Payroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidFrom), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidTo), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollType), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ReferencePayElement), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ReferencePayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ValidFrom), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ValidTo), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayElementPayrollView, _sPYPayrollDetailsEntity);
        _sPYPayElementPayrollView.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementPayrollView_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementPayrollView _sPYPayElementPayrollView, SPYPayrollDetailsEntity _sPYPayrollDetailsEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ApplicableForAll), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ApplicableForAll), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, CalculationOrder), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, CalculationOrder), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Description), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DisplayOrder), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, DisplayOrder), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DistributeCost), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, DistributeCost), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, EOSPayElement), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, EOSPayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Expression), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Expression), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, InstanceRelationType), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, InstanceRelationType), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, LegalEntity), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ParentPayElement), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ParentPayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElement), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementCode), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementCode), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementGroup), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementGroup), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementType), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayElementType), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Payroll), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, Payroll), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidFrom), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidTo), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidTo), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollType), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, PayrollType), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ReferencePayElement), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ReferencePayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidFrom), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidTo), _sPYPayrollDetailsEntity, fieldnum(SPYPayrollDetailsEntity, ValidTo), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayElementPayrollView, _sPYPayrollDetailsEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYPayrollDetailsEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayElementPayrollView);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementPayrollView_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementPayrollView_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYPayrollDetailsEntity _sPYPayrollDetailsEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, ApplicableForAll)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, CalculationOrder)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, Description)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, DisplayOrder)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, DistributeCost)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, EOSPayElement)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, Expression)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, InstanceRelationType)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, LegalEntity)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, ParentPayElement)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayElement)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayElementCode)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayElementGroup)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayElementType)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, Payroll)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidFrom)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayrollDetailsValidTo)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, PayrollType)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, ReferencePayElement)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYPayrollDetailsEntity.isFieldSet(fieldnum(SPYPayrollDetailsEntity, ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYPayrollDetailsEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementPayrollView_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementPayrollView _sPYPayElementPayrollView, SPYPayElementPayrollView _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ApplicableForAll), _matchingRecord, fieldnum(SPYPayElementPayrollView, ApplicableForAll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, CalculationOrder), _matchingRecord, fieldnum(SPYPayElementPayrollView, CalculationOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Description), _matchingRecord, fieldnum(SPYPayElementPayrollView, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DisplayOrder), _matchingRecord, fieldnum(SPYPayElementPayrollView, DisplayOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, DistributeCost), _matchingRecord, fieldnum(SPYPayElementPayrollView, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, EOSPayElement), _matchingRecord, fieldnum(SPYPayElementPayrollView, EOSPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Expression), _matchingRecord, fieldnum(SPYPayElementPayrollView, Expression), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, InstanceRelationType), _matchingRecord, fieldnum(SPYPayElementPayrollView, InstanceRelationType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, LegalEntity), _matchingRecord, fieldnum(SPYPayElementPayrollView, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ParentPayElement), _matchingRecord, fieldnum(SPYPayElementPayrollView, ParentPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElement), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementCode), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayElementCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementGroup), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayElementType), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayElementType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, Payroll), _matchingRecord, fieldnum(SPYPayElementPayrollView, Payroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidFrom), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidTo), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayrollDetailsValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, PayrollType), _matchingRecord, fieldnum(SPYPayElementPayrollView, PayrollType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ReferencePayElement), _matchingRecord, fieldnum(SPYPayElementPayrollView, ReferencePayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidFrom), _matchingRecord, fieldnum(SPYPayElementPayrollView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementPayrollView, fieldnum(SPYPayElementPayrollView, ValidTo), _matchingRecord, fieldnum(SPYPayElementPayrollView, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYPayrollDetailsEntity), _sPYPayElementPayrollView, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementPayrollView_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYPayElementPayrollView', m_SPYPayElementPayrollView, this.getDataSourceId('SPYPayElementPayrollView'), this.getDataSourceId('SPYPayElementPayrollView'), false/* optional */, true/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYPayElementPayrollView LookForUniqueKeyMatch_DS1(SPYPayrollDetailsEntity _sPYPayrollDetailsEntity, SPYPayElementPayrollView _sPYPayElementPayrollView)
    {
        SPYPayElementPayrollView sPYPayElementPayrollView_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayElementPayrollView_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                ApplicableForAll, CalculationOrder, Description, DisplayOrder, DistributeCost, EOSPayElement, Expression, InstanceRelationType, LegalEntity, ParentPayElement, PayElement, PayElementCode, PayElementGroup, PayElementType, Payroll, PayrollDetailsValidFrom, PayrollDetailsValidTo, PayrollType, ReferencePayElement, ValidFrom, ValidTo
            from
                sPYPayElementPayrollView_
        where
            sPYPayElementPayrollView_.RecId == _sPYPayElementPayrollView.RecId
        ;
        
        if (sPYPayElementPayrollView_)
        {
            return sPYPayElementPayrollView_;
        }
        
        return sPYPayElementPayrollView_;
    }

}

