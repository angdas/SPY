Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.DimensionAttributeValueCombination_ID(1)
    #define.AccountStructure_ID(2)
    
    // Data source buffers
    DimensionAttributeValueCombination m_DimensionAttributeValueCombination;
    DimensionHierarchy m_AccountStructure;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('DimensionAttributeValueCombination'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('AccountStructure'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        throw error("@ApplicationFoundation:DataEntitiesReadOnlyError");
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        throw error("@ApplicationFoundation:DataEntitiesReadOnlyError");
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionAttributeValueCombination _dimensionAttributeValueCombination, DimensionCombinationEntity _dimensionCombinationEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _dimensionAttributeValueCombination, _dimensionCombinationEntity);
            _dimensionAttributeValueCombination.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionHierarchy _accountStructure, DimensionCombinationEntity _dimensionCombinationEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _dimensionCombinationEntity, fieldnum(DimensionCombinationEntity, AccountStructure), _accountStructure, fieldnum(DimensionHierarchy, Name), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _accountStructure, _dimensionCombinationEntity);
            _accountStructure.trackFieldExternallySet(false);
        }
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #AccountStructure_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionAttributeValueCombination _dimensionAttributeValueCombination, DimensionCombinationEntity _dimensionCombinationEntity)
    {
        this.mapDataSourceFieldToEntityField(_dimensionAttributeValueCombination, fieldnum(DimensionAttributeValueCombination, RecId), _dimensionCombinationEntity, fieldnum(DimensionCombinationEntity, RecordId), true);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _dimensionAttributeValueCombination, _dimensionCombinationEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _dimensionCombinationEntity.fromViewDataSource(_dataSourceCtx.id(), _dimensionAttributeValueCombination);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionHierarchy _accountStructure, DimensionCombinationEntity _dimensionCombinationEntity)
    {
        this.mapDataSourceFieldToEntityField(_accountStructure, fieldnum(DimensionHierarchy, Name), _dimensionCombinationEntity, fieldnum(DimensionCombinationEntity, AccountStructure), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _accountStructure, _dimensionCombinationEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _dimensionCombinationEntity.fromViewDataSource(_dataSourceCtx.id(), _accountStructure);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #AccountStructure_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #AccountStructure_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(DimensionCombinationEntity _dimensionCombinationEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_dimensionCombinationEntity.isFieldSet(fieldnum(DimensionCombinationEntity, RecordId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_dimensionCombinationEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(DimensionCombinationEntity _dimensionCombinationEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_dimensionCombinationEntity.isFieldSet(fieldnum(DimensionCombinationEntity, AccountStructure)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_dimensionCombinationEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #AccountStructure_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, DimensionCombinationEntity _dimensionCombinationEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionAttributeValueCombination _dimensionAttributeValueCombination)
    {
        boolean rtrn = true;
        if(isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            rtrn = this.validateDataSourceExtensions(_entityCtx, _dimensionCombinationEntity, _dataSourceCtx, _dimensionAttributeValueCombination) ? rtrn : false;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS2(DataEntityRuntimeContext _entityCtx, DimensionCombinationEntity _dimensionCombinationEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionHierarchy _accountStructure)
    {
        boolean rtrn = true;
        if(isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _dimensionCombinationEntity, fieldnum(DimensionCombinationEntity, AccountStructure), 'DimensionCombinationEntity.AccountStructure', _accountStructure, fieldnum(DimensionHierarchy, Name), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateDataSourceExtensions(_entityCtx, _dimensionCombinationEntity, _dataSourceCtx, _accountStructure) ? rtrn : false;
        }
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #AccountStructure_ID:
                rtrn = this.validateDataSource_DS2(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionAttributeValueCombination _dimensionAttributeValueCombination, DimensionAttributeValueCombination _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(DimensionCombinationEntity), _dimensionAttributeValueCombination, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _dimensionAttributeValueCombination, fieldnum(DimensionAttributeValueCombination, AccountStructure), _matchingRecord, fieldnum(DimensionAttributeValueCombination, AccountStructure), 1);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, DimensionHierarchy _accountStructure, DimensionHierarchy _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _accountStructure, fieldnum(DimensionHierarchy, Name), _matchingRecord, fieldnum(DimensionHierarchy, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(DimensionCombinationEntity), _accountStructure, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #DimensionAttributeValueCombination_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #AccountStructure_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            // Root data source configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'DimensionAttributeValueCombination','LedgerBasic'));
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord(), 'LedgerBasic'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'AccountStructure','LedgerBasic'));
            }
        }
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #AccountStructure_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'DimensionAttributeValueCombination', m_DimensionAttributeValueCombination, this.getDataSourceId('DimensionAttributeValueCombination'), this.getDataSourceId('DimensionAttributeValueCombination'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'AccountStructure', m_AccountStructure, this.getDataSourceId('AccountStructure'), this.getDataSourceId('AccountStructure'), true/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(DimensionHierarchy _originalRecord, DimensionHierarchy _updatedRecord)
    {
        if (_originalRecord.Name != _updatedRecord.Name)
        {
            return true;
        }
        return false;
    }
    private DimensionAttributeValueCombination LookForUniqueKeyMatch_DS1(DimensionCombinationEntity _dimensionCombinationEntity, DimensionAttributeValueCombination _dimensionAttributeValueCombination)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination_ = null;
        
        select
            forUpdate
            firstOnly
                dimensionAttributeValueCombination_
        where
            dimensionAttributeValueCombination_.Hash == _dimensionAttributeValueCombination.Hash
        ;
        
        if (dimensionAttributeValueCombination_)
        {
            return dimensionAttributeValueCombination_;
        }
        
        return dimensionAttributeValueCombination_;
    }
    private DimensionHierarchy LookForUniqueKeyMatch_DS2(DimensionCombinationEntity _dimensionCombinationEntity, DimensionHierarchy _accountStructure)
    {
        DimensionHierarchy dimensionHierarchy_ = null;
        
        select
            forUpdate
            firstOnly
                dimensionHierarchy_
        where
            dimensionHierarchy_.StructureType == _accountStructure.StructureType && dimensionHierarchy_.Name == _accountStructure.Name && dimensionHierarchy_.IsSystemGenerated == _accountStructure.IsSystemGenerated && dimensionHierarchy_.IsDraft == _accountStructure.IsDraft && dimensionHierarchy_.DeletedVersion == _accountStructure.DeletedVersion
        ;
        
        if (dimensionHierarchy_)
        {
            return dimensionHierarchy_;
        }
        
        select
            forUpdate
            firstOnly
                dimensionHierarchy_
        where
            dimensionHierarchy_.HashKey == _accountStructure.HashKey
        ;
        
        if (dimensionHierarchy_)
        {
            return dimensionHierarchy_;
        }
        
        return dimensionHierarchy_;
    }

}

