Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYWorkerPositionAbsenceConfigLine_ID(1)
    #define.SPYAbsenceConfigTable_ID(2)
    #define.SPYPayrollPeriod_ID(3)
    #define.HcmPosition_ID(4)
    #define.HcmWorker_ID(5)
    #define.DirPerson_FK_ID(6)
    #define.CompanyInfo_ID(7)
    
    // Data source buffers
    SPYWorkerPositionAbsenceConfigLine m_SPYWorkerPositionAbsenceConfigLine;
    SPYAbsenceConfigTable m_SPYAbsenceConfigTable;
    SPYPayrollPeriod m_SPYPayrollPeriod;
    HcmPosition m_HcmPosition;
    HcmWorker m_HcmWorker;
    DirPerson m_DirPerson_FK;
    CompanyInfo m_CompanyInfo;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollPeriod'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPosition'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorker'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('DirPerson_FK'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SPYAbsenceConfigTable _sPYAbsenceConfigTable, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYAbsenceConfigTable.isFieldSet(fieldnum(SPYAbsenceConfigTable,AbsenceConfigCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYAbsenceConfigTable) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS3(SPYPayrollPeriod _sPYPayrollPeriod, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayrollPeriod.isFieldSet(fieldnum(SPYPayrollPeriod,PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayrollPeriod) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(HcmPosition _hcmPosition, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPosition.isFieldSet(fieldnum(HcmPosition,PositionId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPosition) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS6(DirPerson _dirPerson_FK, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_dirPerson_FK.isFieldSet(fieldnum(DirPerson,PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _dirPerson_FK) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS5(DataEntityRuntimeContext _entityCtx, HcmWorker _hcmWorker)
    {
        DirPerson dirPerson_FK_ = _entityCtx.getRuntimeContextByName('DirPerson_FK').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmWorker.Person != dirPerson_FK_.RecId)
        {
            _hcmWorker.Person = dirPerson_FK_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmWorker').getDatabaseOperation();
        SPYWorkerPositionAbsenceConfigLineEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_Person)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmWorker'), _entityCtx.getRuntimeContextByName('DirPerson_FK'), dataSourceDBOperation, 'HcmWorker.Person', _hcmWorker, fieldnum(HcmWorker, Person), false/*disallowEditOnCreate*/, true/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS5(HcmWorker _hcmWorker, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,Person)))
        {
            return true;
        }
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorker) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS7(CompanyInfo _companyInfo, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,PartyNumber)))
        {
            return true;
        }
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine)
    {
        SPYAbsenceConfigTable sPYAbsenceConfigTable_ = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable').conflictDetectionInvoked() || sPYAbsenceConfigTable_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionAbsenceConfigLine.AbsenceConfig != sPYAbsenceConfigTable_.RecId)
            {
                _sPYWorkerPositionAbsenceConfigLine.AbsenceConfig = sPYAbsenceConfigTable_.RecId;
            }
        }
        
        SPYPayrollPeriod sPYPayrollPeriod_ = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYPayrollPeriod').conflictDetectionInvoked() || sPYPayrollPeriod_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionAbsenceConfigLine.EntitlementPayrollPeriod != sPYPayrollPeriod_.RecId)
            {
                _sPYWorkerPositionAbsenceConfigLine.EntitlementPayrollPeriod = sPYPayrollPeriod_.RecId;
            }
        }
        
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmPosition').conflictDetectionInvoked() || hcmPosition_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionAbsenceConfigLine.Position != hcmPosition_.RecId)
            {
                _sPYWorkerPositionAbsenceConfigLine.Position = hcmPosition_.RecId;
            }
        }
        
        HcmWorker hcmWorker_ = _entityCtx.getRuntimeContextByName('HcmWorker').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerPositionAbsenceConfigLine.Worker != hcmWorker_.RecId)
        {
            _sPYWorkerPositionAbsenceConfigLine.Worker = hcmWorker_.RecId;
        }
        
        CompanyInfo companyInfo_ = _entityCtx.getRuntimeContextByName('CompanyInfo').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo').conflictDetectionInvoked() || companyInfo_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionAbsenceConfigLine.LegalEntity != companyInfo_.RecId)
            {
                _sPYWorkerPositionAbsenceConfigLine.LegalEntity = companyInfo_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine').getDatabaseOperation();
        SPYWorkerPositionAbsenceConfigLineEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceConfig)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'), _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable'), dataSourceDBOperation, 'SPYWorkerPositionAbsenceConfigLine.AbsenceConfig', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceConfig), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, EntitlementPayrollPeriod)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'), _entityCtx.getRuntimeContextByName('SPYPayrollPeriod'), dataSourceDBOperation, 'SPYWorkerPositionAbsenceConfigLine.EntitlementPayrollPeriod', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, EntitlementPayrollPeriod), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Position)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'SPYWorkerPositionAbsenceConfigLine.Position', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Worker)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'), _entityCtx.getRuntimeContextByName('HcmWorker'), dataSourceDBOperation, 'SPYWorkerPositionAbsenceConfigLine.Worker', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine'), _entityCtx.getRuntimeContextByName('CompanyInfo'), dataSourceDBOperation, 'SPYWorkerPositionAbsenceConfigLine.LegalEntity', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYWorkerPositionAbsenceConfigLine].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYAbsenceConfigTable sPYAbsenceConfigTable_ = _dataSourceCtx.getBuffer();
                        if((sPYAbsenceConfigTable_.AbsenceConfigCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYAbsenceConfigTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYPayrollPeriod sPYPayrollPeriod_ = _dataSourceCtx.getBuffer();
                        if((sPYPayrollPeriod_.PayrollPeriodCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYPayrollPeriod].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPosition]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmPosition hcmPosition_ = _dataSourceCtx.getBuffer();
                        if((hcmPosition_.PositionId))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmPosition].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // save/update data sources referenced by [HcmWorker].
                {
                    // handle datasources which are part of extensions and need to be saved before [DirPerson_FK]
                    if(!this.preSaveDataSource(_entityCtx, 'DirPerson_FK'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson_FK');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS6(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            DirPerson dirPerson_FK_ = _dataSourceCtx.getBuffer();
                            if((dirPerson_FK_.PartyNumber))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [DirPerson_FK].
                    if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                    {
                        // returns from here if an inner joined data source fails to be saved.
                        return false;
                    }
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS5(_entityCtx, _dataSourceCtx.getBuffer());
                if(this.isAnyFieldSet_DS5(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmWorker hcmWorker_ = _dataSourceCtx.getBuffer();
                        if((hcmWorker_.Person) || (hcmWorker_.PersonnelNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS7(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        CompanyInfo companyInfo_ = _dataSourceCtx.getBuffer();
                        if((companyInfo_.DataArea) || (companyInfo_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerPositionAbsenceConfigLine]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerPositionAbsenceConfigLine'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYWorkerPositionAbsenceConfigLine].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerPositionAbsenceConfigLine]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerPositionAbsenceConfigLine'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerPositionAbsenceConfigLine');
            // deletes data source [SPYWorkerPositionAbsenceConfigLine].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYWorkerPositionAbsenceConfigLine].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAbsenceConfigTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAbsenceConfigTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAbsenceConfigTable');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYAbsenceConfigTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYPayrollPeriod].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPosition]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmPosition].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmWorker].
                {
                    // handle datasources which are part of extensions and need to be saved before [DirPerson_FK]
                    if(!this.preSaveDataSource(_entityCtx, 'DirPerson_FK'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson_FK');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [DirPerson_FK].
                    if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                    {
                        // returns from here if an inner joined data source fails to be saved.
                        return false;
                    }
                    this.postSaveDataSource();
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceConfig), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceConfig), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Worker), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Position), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Position), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceCycle), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceCycle), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedDate), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedQty), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryBackward), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryBackward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryForward), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryForward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, EntitlementPayrollPeriod), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, EntitlementPayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, FetchBenefitQty), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, FetchBenefitQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HRMAbsenceCodeId), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, HRMAbsenceCodeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Qty), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Qty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInNotice), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInNotice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInProbation), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInProbation), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowNegativeInCarryFwd), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowNegativeInCarryFwd), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, PeriodCloseNotApplicable), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, PeriodCloseNotApplicable), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowFullBalanceCarryFwdInFirstYr), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowFullBalanceCarryFwdInFirstYr), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromLeave), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromLeave), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidTo), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidFrom), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LegalEntity), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromPeriodClose), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromPeriodClose), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYWorkerPositionAbsenceConfigLine, _sPYWorkerPositionAbsenceConfigLineEntity);
        _sPYWorkerPositionAbsenceConfigLine.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYAbsenceConfigTable_AbsenceConfigCode), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigTable, _sPYWorkerPositionAbsenceConfigLineEntity);
        _sPYAbsenceConfigTable.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYPayrollPeriod_PayrollPeriodCode), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYWorkerPositionAbsenceConfigLineEntity);
            _sPYPayrollPeriod.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmPosition_PositionId), _hcmPosition, fieldnum(HcmPosition, PositionId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPosition, _sPYWorkerPositionAbsenceConfigLineEntity);
        _hcmPosition.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS5(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_Person), _hcmWorker, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_PersonnelNumber), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerPositionAbsenceConfigLineEntity);
        _hcmWorker.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS6(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, DirPerson_FK_PartyNumber), _dirPerson_FK, fieldnum(DirPerson, PartyNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _dirPerson_FK, _sPYWorkerPositionAbsenceConfigLineEntity);
        _dirPerson_FK.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS7(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_PartyNumber), _companyInfo, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_DataArea), _companyInfo, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYWorkerPositionAbsenceConfigLineEntity);
        _companyInfo.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapToDataSource_DS5(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                this.mapToDataSource_DS6(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapToDataSource_DS7(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceConfig), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceConfig), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Worker), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Worker), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Position), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Position), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceCycle), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceCycle), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedDate), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedDate), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedQty), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedQty), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryBackward), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryBackward), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryForward), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryForward), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, EntitlementPayrollPeriod), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, EntitlementPayrollPeriod), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, FetchBenefitQty), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, FetchBenefitQty), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, HRMAbsenceCodeId), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HRMAbsenceCodeId), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Qty), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Qty), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInNotice), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInNotice), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInProbation), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInProbation), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowNegativeInCarryFwd), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowNegativeInCarryFwd), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, PeriodCloseNotApplicable), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, PeriodCloseNotApplicable), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowFullBalanceCarryFwdInFirstYr), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowFullBalanceCarryFwdInFirstYr), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromLeave), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromLeave), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidTo), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidTo), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidFrom), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LegalEntity), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromPeriodClose), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromPeriodClose), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYWorkerPositionAbsenceConfigLine, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYWorkerPositionAbsenceConfigLine);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYAbsenceConfigTable_AbsenceConfigCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAbsenceConfigTable, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAbsenceConfigTable);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYPayrollPeriod_PayrollPeriodCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollPeriod);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPosition, fieldnum(HcmPosition, PositionId), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmPosition_PositionId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPosition, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPosition);
    }
    private void mapFromDataSource_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, Person), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_Person), false);
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_PersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorker);
    }
    private void mapFromDataSource_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_dirPerson_FK, fieldnum(DirPerson, PartyNumber), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, DirPerson_FK_PartyNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _dirPerson_FK, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _dirPerson_FK);
    }
    private void mapFromDataSource_DS7(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, PartyNumber), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_PartyNumber), false);
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, DataArea), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_DataArea), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYWorkerPositionAbsenceConfigLineEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionAbsenceConfigLineEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapFromDataSource_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                this.mapFromDataSource_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapFromDataSource_DS7(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYAbsenceConfigTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPosition_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS5(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #DirPerson_FK_ID:
                rtrn = this.LookForUniqueKeyMatch_DS6(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo_ID:
                rtrn = this.LookForUniqueKeyMatch_DS7(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceConfig)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Worker)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Position)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceCycle)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedDate)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedQty)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryBackward)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryForward)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, EntitlementPayrollPeriod)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, FetchBenefitQty)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HRMAbsenceCodeId)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Qty)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInNotice)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInProbation)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowNegativeInCarryFwd)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, PeriodCloseNotApplicable)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowFullBalanceCarryFwdInFirstYr)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromLeave)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidTo)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LegalEntity)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromPeriodClose)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYAbsenceConfigTable_AbsenceConfigCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, SPYPayrollPeriod_PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmPosition_PositionId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS5(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_Person)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HcmWorker_PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS6(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, DirPerson_FK_PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS7(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_PartyNumber)))
        {
            return true;
        }
        if(_sPYWorkerPositionAbsenceConfigLineEntity.isFieldSet(fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo_DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionAbsenceConfigLineEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SPYAbsenceConfigTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS5(_entityCtx.getEntityRecord());
                break;
            case #DirPerson_FK_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS6(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS7(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AbsenceCycle), 'SPYWorkerPositionAbsenceConfigLineEntity.AbsenceCycle', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceCycle), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedDate), 'SPYWorkerPositionAbsenceConfigLineEntity.AccruedDate', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AccruedQty), 'SPYWorkerPositionAbsenceConfigLineEntity.AccruedQty', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedQty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryBackward), 'SPYWorkerPositionAbsenceConfigLineEntity.CarryBackward', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryBackward), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, CarryForward), 'SPYWorkerPositionAbsenceConfigLineEntity.CarryForward', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryForward), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, FetchBenefitQty), 'SPYWorkerPositionAbsenceConfigLineEntity.FetchBenefitQty', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, FetchBenefitQty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, HRMAbsenceCodeId), 'SPYWorkerPositionAbsenceConfigLineEntity.HRMAbsenceCodeId', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, HRMAbsenceCodeId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, Qty), 'SPYWorkerPositionAbsenceConfigLineEntity.Qty', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Qty), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInNotice), 'SPYWorkerPositionAbsenceConfigLineEntity.RestrictInNotice', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInNotice), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, RestrictInProbation), 'SPYWorkerPositionAbsenceConfigLineEntity.RestrictInProbation', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInProbation), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowNegativeInCarryFwd), 'SPYWorkerPositionAbsenceConfigLineEntity.AllowNegativeInCarryFwd', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowNegativeInCarryFwd), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, PeriodCloseNotApplicable), 'SPYWorkerPositionAbsenceConfigLineEntity.PeriodCloseNotApplicable', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, PeriodCloseNotApplicable), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, AllowFullBalanceCarryFwdInFirstYr), 'SPYWorkerPositionAbsenceConfigLineEntity.AllowFullBalanceCarryFwdInFirstYr', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowFullBalanceCarryFwdInFirstYr), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromLeave), 'SPYWorkerPositionAbsenceConfigLineEntity.LedgerTransDateCalcFromLeave', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromLeave), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidTo), 'SPYWorkerPositionAbsenceConfigLineEntity.ValidTo', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, ValidFrom), 'SPYWorkerPositionAbsenceConfigLineEntity.ValidFrom', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionAbsenceConfigLineEntity, fieldnum(SPYWorkerPositionAbsenceConfigLineEntity, LedgerTransDateCalcFromPeriodClose), 'SPYWorkerPositionAbsenceConfigLineEntity.LedgerTransDateCalcFromPeriodClose', _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromPeriodClose), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYWorkerPositionAbsenceConfigLineEntity, _dataSourceCtx, _sPYWorkerPositionAbsenceConfigLine) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine, SPYWorkerPositionAbsenceConfigLine _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceConfig), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceConfig), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Worker), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Position), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, Position), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceCycle), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AbsenceCycle), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedDate), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedQty), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AccruedQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryBackward), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryBackward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryForward), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, CarryForward), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, EntitlementPayrollPeriod), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, EntitlementPayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, FetchBenefitQty), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, FetchBenefitQty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, HRMAbsenceCodeId), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, HRMAbsenceCodeId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, Qty), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, Qty), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInNotice), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInNotice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInProbation), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, RestrictInProbation), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowNegativeInCarryFwd), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowNegativeInCarryFwd), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, PeriodCloseNotApplicable), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, PeriodCloseNotApplicable), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowFullBalanceCarryFwdInFirstYr), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, AllowFullBalanceCarryFwdInFirstYr), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromLeave), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromLeave), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidTo), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidFrom), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LegalEntity), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionAbsenceConfigLine, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromPeriodClose), _matchingRecord, fieldnum(SPYWorkerPositionAbsenceConfigLine, LedgerTransDateCalcFromPeriodClose), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _sPYWorkerPositionAbsenceConfigLine, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAbsenceConfigTable _sPYAbsenceConfigTable, SPYAbsenceConfigTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAbsenceConfigTable, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), _matchingRecord, fieldnum(SPYAbsenceConfigTable, AbsenceConfigCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _sPYAbsenceConfigTable, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYPayrollPeriod _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _matchingRecord, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _sPYPayrollPeriod, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, HcmPosition _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPosition, fieldnum(HcmPosition, PositionId), _matchingRecord, fieldnum(HcmPosition, PositionId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _hcmPosition, _matchingRecord);
    }
    private void mapToMatchingRecord_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, Person), _matchingRecord, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _hcmWorker, _matchingRecord);
    }
    private void mapToMatchingRecord_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson_FK, DirPerson _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _dirPerson_FK, fieldnum(DirPerson, PartyNumber), _matchingRecord, fieldnum(DirPerson, PartyNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _dirPerson_FK, _matchingRecord);
    }
    private void mapToMatchingRecord_DS7(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, PartyNumber), _matchingRecord, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionAbsenceConfigLineEntity), _companyInfo, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYAbsenceConfigTable_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPosition_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorker_ID:
                this.mapToMatchingRecord_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #DirPerson_FK_ID:
                this.mapToMatchingRecord_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo_ID:
                this.mapToMatchingRecord_DS7(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord(), 'SPYExpression'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'SPYPayrollPeriod','SPYExpression'));
            }
        }
    }
    protected int getValidTimeStateUpdateModeForDataSource(DataEntityRuntimeContext _entityCtx, int _dataSourceId, str _dataSourceName)
    {
        int validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
        
        // returns ValidTimeStateUpdate value for date effective data sources.
        
        switch (_dataSourceId)
        {
            case #SPYWorkerPositionAbsenceConfigLine_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            default : validTimeStateUpdate_ = super(_entityCtx,_dataSourceId,_dataSourceName);
        }
        return validTimeStateUpdate_;
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #SPYAbsenceConfigTable_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #SPYPayrollPeriod_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
            case #HcmPosition_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
            case #HcmWorker_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS5(_originalRecord, _updatedRecord);
                break;
            case #DirPerson_FK_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS6(_originalRecord, _updatedRecord);
                break;
            case #CompanyInfo_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS7(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYWorkerPositionAbsenceConfigLine', m_SPYWorkerPositionAbsenceConfigLine, this.getDataSourceId('SPYWorkerPositionAbsenceConfigLine'), this.getDataSourceId('SPYWorkerPositionAbsenceConfigLine'), false/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYAbsenceConfigTable', m_SPYAbsenceConfigTable, this.getDataSourceId('SPYAbsenceConfigTable'), this.getDataSourceId('SPYAbsenceConfigTable'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYPayrollPeriod', m_SPYPayrollPeriod, this.getDataSourceId('SPYPayrollPeriod'), this.getDataSourceId('SPYPayrollPeriod'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPosition', m_HcmPosition, this.getDataSourceId('HcmPosition'), this.getDataSourceId('HcmPosition'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorker', m_HcmWorker, this.getDataSourceId('HcmWorker'), this.getDataSourceId('HcmWorker'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'DirPerson_FK', m_DirPerson_FK, this.getDataSourceId('DirPerson_FK'), this.getDataSourceId('DirPerson_FK'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo', m_CompanyInfo, this.getDataSourceId('CompanyInfo'), this.getDataSourceId('CompanyInfo'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(SPYAbsenceConfigTable _originalRecord, SPYAbsenceConfigTable _updatedRecord)
    {
        if (_originalRecord.AbsenceConfigCode != _updatedRecord.AbsenceConfigCode)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(SPYPayrollPeriod _originalRecord, SPYPayrollPeriod _updatedRecord)
    {
        if (_originalRecord.PayrollPeriodCode != _updatedRecord.PayrollPeriodCode)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(HcmPosition _originalRecord, HcmPosition _updatedRecord)
    {
        if (_originalRecord.PositionId != _updatedRecord.PositionId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS5(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.Person != _updatedRecord.Person)
        {
            return true;
        }
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS6(DirPerson _originalRecord, DirPerson _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS7(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private SPYWorkerPositionAbsenceConfigLine LookForUniqueKeyMatch_DS1(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, SPYWorkerPositionAbsenceConfigLine _sPYWorkerPositionAbsenceConfigLine)
    {
        SPYWorkerPositionAbsenceConfigLine sPYWorkerPositionAbsenceConfigLine_ = null;
        
        select
            forUpdate
            firstOnly
            // Applying min/max date range since ApplyDateFilter is No for date effective data source.
            validTimeState(minimumDateTime, maximumDateTime)
                sPYWorkerPositionAbsenceConfigLine_
        where
            sPYWorkerPositionAbsenceConfigLine_.Worker == _sPYWorkerPositionAbsenceConfigLine.Worker && sPYWorkerPositionAbsenceConfigLine_.Position == _sPYWorkerPositionAbsenceConfigLine.Position && sPYWorkerPositionAbsenceConfigLine_.LegalEntity == _sPYWorkerPositionAbsenceConfigLine.LegalEntity && sPYWorkerPositionAbsenceConfigLine_.HRMAbsenceCodeId == _sPYWorkerPositionAbsenceConfigLine.HRMAbsenceCodeId && sPYWorkerPositionAbsenceConfigLine_.ValidTo == _sPYWorkerPositionAbsenceConfigLine.ValidTo && sPYWorkerPositionAbsenceConfigLine_.ValidFrom == _sPYWorkerPositionAbsenceConfigLine.ValidFrom
        ;
        
        if (sPYWorkerPositionAbsenceConfigLine_)
        {
            return sPYWorkerPositionAbsenceConfigLine_;
        }
        
        return sPYWorkerPositionAbsenceConfigLine_;
    }
    private SPYAbsenceConfigTable LookForUniqueKeyMatch_DS2(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, SPYAbsenceConfigTable _sPYAbsenceConfigTable)
    {
        SPYAbsenceConfigTable sPYAbsenceConfigTable_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYAbsenceConfigTable_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                AbsenceConfigCode, RecId
            from
                sPYAbsenceConfigTable_
        where
            sPYAbsenceConfigTable_.AbsenceConfigCode == _sPYAbsenceConfigTable.AbsenceConfigCode
        ;
        
        if (sPYAbsenceConfigTable_)
        {
            return sPYAbsenceConfigTable_;
        }
        
        return sPYAbsenceConfigTable_;
    }
    private SPYPayrollPeriod LookForUniqueKeyMatch_DS3(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, SPYPayrollPeriod _sPYPayrollPeriod)
    {
        SPYPayrollPeriod sPYPayrollPeriod_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayrollPeriod_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PayrollPeriodCode, RecId
            from
                sPYPayrollPeriod_
        where
            sPYPayrollPeriod_.PayrollPeriodCode == _sPYPayrollPeriod.PayrollPeriodCode
        ;
        
        if (sPYPayrollPeriod_)
        {
            return sPYPayrollPeriod_;
        }
        
        return sPYPayrollPeriod_;
    }
    private HcmPosition LookForUniqueKeyMatch_DS4(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, HcmPosition _hcmPosition)
    {
        HcmPosition hcmPosition_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmPosition_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PositionId, RecId
            from
                hcmPosition_
        where
            hcmPosition_.PositionId == _hcmPosition.PositionId
        ;
        
        if (hcmPosition_)
        {
            return hcmPosition_;
        }
        
        return hcmPosition_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS5(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, HcmWorker _hcmWorker)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.Person == _hcmWorker.Person
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _hcmWorker.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private DirPerson LookForUniqueKeyMatch_DS6(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, DirPerson _dirPerson_FK)
    {
        DirPerson dirPerson_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        dirPerson_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, RecId
            from
                dirPerson_
        where
            dirPerson_.PartyNumber == _dirPerson_FK.PartyNumber
        ;
        
        if (dirPerson_)
        {
            return dirPerson_;
        }
        
        return dirPerson_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS7(SPYWorkerPositionAbsenceConfigLineEntity _sPYWorkerPositionAbsenceConfigLineEntity, CompanyInfo _companyInfo)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.PartyNumber == _companyInfo.PartyNumber
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }

}

