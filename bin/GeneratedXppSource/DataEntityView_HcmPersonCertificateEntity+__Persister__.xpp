Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.HcmPersonCertificate_ID(1)
    #define.CertificateType_FK_ID(2)
    #define.Person_FK_ID(3)
    
    // Data source buffers
    HcmPersonCertificate m_HcmPersonCertificate;
    HcmCertificateType m_CertificateType_FK;
    DirPerson m_Person_FK;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPersonCertificate'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CertificateType_FK'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('Person_FK'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(HcmCertificateType _certificateType_FK, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_certificateType_FK.isFieldSet(fieldnum(HcmCertificateType,CertificateTypeId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _certificateType_FK) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS3(DirPerson _person_FK, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_person_FK.isFieldSet(fieldnum(DirPerson,PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _person_FK) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, HcmPersonCertificate _hcmPersonCertificate)
    {
        HcmCertificateType certificateType_FK_ = _entityCtx.getRuntimeContextByName('CertificateType_FK').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPersonCertificate.CertificateType != certificateType_FK_.RecId)
        {
            _hcmPersonCertificate.CertificateType = certificateType_FK_.RecId;
        }
        
        DirPerson person_FK_ = _entityCtx.getRuntimeContextByName('Person_FK').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPersonCertificate.Person != person_FK_.RecId)
        {
            _hcmPersonCertificate.Person = person_FK_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPersonCertificate').getDatabaseOperation();
        HcmPersonCertificateEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPersonCertificateEntity, CertificateType)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPersonCertificate'), _entityCtx.getRuntimeContextByName('CertificateType_FK'), dataSourceDBOperation, 'HcmPersonCertificate.CertificateType', _hcmPersonCertificate, fieldnum(HcmPersonCertificate, CertificateType), false/*disallowEditOnCreate*/, true/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPersonCertificateEntity, Person)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPersonCertificate'), _entityCtx.getRuntimeContextByName('Person_FK'), dataSourceDBOperation, 'HcmPersonCertificate.Person', _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Person), false/*disallowEditOnCreate*/, true/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [HcmPersonCertificate].
            {
                // handle datasources which are part of extensions and need to be saved before [CertificateType_FK]
                if(!this.preSaveDataSource(_entityCtx, 'CertificateType_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CertificateType_FK');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmCertificateType certificateType_FK_ = _dataSourceCtx.getBuffer();
                        if((certificateType_FK_.CertificateTypeId))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CertificateType_FK].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [Person_FK]
                if(!this.preSaveDataSource(_entityCtx, 'Person_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('Person_FK');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        DirPerson person_FK_ = _dataSourceCtx.getBuffer();
                        if((person_FK_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [Person_FK].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [HcmPersonCertificate]
            if(!this.preSaveDataSource(_entityCtx, 'HcmPersonCertificate'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPersonCertificate');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [HcmPersonCertificate].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [HcmPersonCertificate]
            if(!this.preSaveDataSource(_entityCtx, 'HcmPersonCertificate'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPersonCertificate');
            // deletes data source [HcmPersonCertificate].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [HcmPersonCertificate].
            {
                // handle datasources which are part of extensions and need to be saved before [CertificateType_FK]
                if(!this.preSaveDataSource(_entityCtx, 'CertificateType_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CertificateType_FK');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CertificateType_FK].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [Person_FK]
                if(!this.preSaveDataSource(_entityCtx, 'Person_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('Person_FK');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [Person_FK].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPersonCertificate _hcmPersonCertificate, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, CertificateType), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, CertificateType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, StartDate), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, IssueDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, EndDate), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, ExpirationDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, Notes), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Note), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, Person), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Person), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPersonCertificate, _hcmPersonCertificateEntity);
        _hcmPersonCertificate.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCertificateType _certificateType_FK, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, CertificateTypeId), _certificateType_FK, fieldnum(HcmCertificateType, CertificateTypeId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _certificateType_FK, _hcmPersonCertificateEntity);
        _certificateType_FK.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _person_FK, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, PartyNumber), _person_FK, fieldnum(DirPerson, PartyNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _person_FK, _hcmPersonCertificateEntity);
        _person_FK.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CertificateType_FK_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #Person_FK_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPersonCertificate _hcmPersonCertificate, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPersonCertificate, fieldnum(HcmPersonCertificate, CertificateType), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, CertificateType), false);
        this.mapDataSourceFieldToEntityField(_hcmPersonCertificate, fieldnum(HcmPersonCertificate, IssueDate), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, StartDate), false);
        this.mapDataSourceFieldToEntityField(_hcmPersonCertificate, fieldnum(HcmPersonCertificate, ExpirationDate), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, EndDate), false);
        this.mapDataSourceFieldToEntityField(_hcmPersonCertificate, fieldnum(HcmPersonCertificate, Note), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, Notes), false);
        this.mapDataSourceFieldToEntityField(_hcmPersonCertificate, fieldnum(HcmPersonCertificate, Person), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, Person), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPersonCertificate, _hcmPersonCertificateEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPersonCertificateEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPersonCertificate);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCertificateType _certificateType_FK, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapDataSourceFieldToEntityField(_certificateType_FK, fieldnum(HcmCertificateType, CertificateTypeId), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, CertificateTypeId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _certificateType_FK, _hcmPersonCertificateEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPersonCertificateEntity.fromViewDataSource(_dataSourceCtx.id(), _certificateType_FK);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _person_FK, HcmPersonCertificateEntity _hcmPersonCertificateEntity)
    {
        this.mapDataSourceFieldToEntityField(_person_FK, fieldnum(DirPerson, PartyNumber), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, PartyNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _person_FK, _hcmPersonCertificateEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPersonCertificateEntity.fromViewDataSource(_dataSourceCtx.id(), _person_FK);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CertificateType_FK_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #Person_FK_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CertificateType_FK_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #Person_FK_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(HcmPersonCertificateEntity _hcmPersonCertificateEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, CertificateType)))
        {
            return true;
        }
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, StartDate)))
        {
            return true;
        }
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, EndDate)))
        {
            return true;
        }
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, Notes)))
        {
            return true;
        }
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, Person)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPersonCertificateEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(HcmPersonCertificateEntity _hcmPersonCertificateEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, CertificateTypeId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPersonCertificateEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(HcmPersonCertificateEntity _hcmPersonCertificateEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPersonCertificateEntity.isFieldSet(fieldnum(HcmPersonCertificateEntity, PartyNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPersonCertificateEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #CertificateType_FK_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #Person_FK_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, HcmPersonCertificateEntity _hcmPersonCertificateEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPersonCertificate _hcmPersonCertificate)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, StartDate), 'HcmPersonCertificateEntity.StartDate', _hcmPersonCertificate, fieldnum(HcmPersonCertificate, IssueDate), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, EndDate), 'HcmPersonCertificateEntity.EndDate', _hcmPersonCertificate, fieldnum(HcmPersonCertificate, ExpirationDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPersonCertificateEntity, fieldnum(HcmPersonCertificateEntity, Notes), 'HcmPersonCertificateEntity.Notes', _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Note), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPersonCertificateEntity, _dataSourceCtx, _hcmPersonCertificate) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPersonCertificate _hcmPersonCertificate, HcmPersonCertificate _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, CertificateType), _matchingRecord, fieldnum(HcmPersonCertificate, CertificateType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, IssueDate), _matchingRecord, fieldnum(HcmPersonCertificate, IssueDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, ExpirationDate), _matchingRecord, fieldnum(HcmPersonCertificate, ExpirationDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Note), _matchingRecord, fieldnum(HcmPersonCertificate, Note), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPersonCertificate, fieldnum(HcmPersonCertificate, Person), _matchingRecord, fieldnum(HcmPersonCertificate, Person), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPersonCertificateEntity), _hcmPersonCertificate, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCertificateType _certificateType_FK, HcmCertificateType _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _certificateType_FK, fieldnum(HcmCertificateType, CertificateTypeId), _matchingRecord, fieldnum(HcmCertificateType, CertificateTypeId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPersonCertificateEntity), _certificateType_FK, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _person_FK, DirPerson _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _person_FK, fieldnum(DirPerson, PartyNumber), _matchingRecord, fieldnum(DirPerson, PartyNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPersonCertificateEntity), _person_FK, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPersonCertificate_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CertificateType_FK_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #Person_FK_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'HRMAdministration'));
        }
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #CertificateType_FK_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #Person_FK_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'HcmPersonCertificate', m_HcmPersonCertificate, this.getDataSourceId('HcmPersonCertificate'), this.getDataSourceId('HcmPersonCertificate'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CertificateType_FK', m_CertificateType_FK, this.getDataSourceId('CertificateType_FK'), this.getDataSourceId('CertificateType_FK'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'Person_FK', m_Person_FK, this.getDataSourceId('Person_FK'), this.getDataSourceId('Person_FK'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(HcmCertificateType _originalRecord, HcmCertificateType _updatedRecord)
    {
        if (_originalRecord.CertificateTypeId != _updatedRecord.CertificateTypeId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(DirPerson _originalRecord, DirPerson _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        return false;
    }
    private HcmPersonCertificate LookForUniqueKeyMatch_DS1(HcmPersonCertificateEntity _hcmPersonCertificateEntity, HcmPersonCertificate _hcmPersonCertificate)
    {
        HcmPersonCertificate hcmPersonCertificate_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPersonCertificate_
        where
            hcmPersonCertificate_.Person == _hcmPersonCertificate.Person && hcmPersonCertificate_.CertificateType == _hcmPersonCertificate.CertificateType && hcmPersonCertificate_.IssueDate == _hcmPersonCertificate.IssueDate
        ;
        
        if (hcmPersonCertificate_)
        {
            return hcmPersonCertificate_;
        }
        
        return hcmPersonCertificate_;
    }
    private HcmCertificateType LookForUniqueKeyMatch_DS2(HcmPersonCertificateEntity _hcmPersonCertificateEntity, HcmCertificateType _certificateType_FK)
    {
        HcmCertificateType hcmCertificateType_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmCertificateType_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                CertificateTypeId, RecId
            from
                hcmCertificateType_
        where
            hcmCertificateType_.CertificateTypeId == _certificateType_FK.CertificateTypeId
        ;
        
        if (hcmCertificateType_)
        {
            return hcmCertificateType_;
        }
        
        return hcmCertificateType_;
    }
    private DirPerson LookForUniqueKeyMatch_DS3(HcmPersonCertificateEntity _hcmPersonCertificateEntity, DirPerson _person_FK)
    {
        DirPerson dirPerson_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        dirPerson_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, RecId
            from
                dirPerson_
        where
            dirPerson_.PartyNumber == _person_FK.PartyNumber
        ;
        
        if (dirPerson_)
        {
            return dirPerson_;
        }
        
        return dirPerson_;
    }

}

