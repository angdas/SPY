Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYBenefitLedger_ID(1)
    #define.SPYBenefitTable_ID(2)
    
    // Data source buffers
    SPYBenefitLedger m_SPYBenefitLedger;
    SPYBenefitTable m_SPYBenefitTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYBenefitLedger'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYBenefitTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SPYBenefitTable _sPYBenefitTable, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYBenefitTable) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYBenefitLedger _sPYBenefitLedger)
    {
        SPYBenefitTable sPYBenefitTable_ = _entityCtx.getRuntimeContextByName('SPYBenefitTable').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYBenefitTable').conflictDetectionInvoked() || sPYBenefitTable_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYBenefitLedger.Benefit != sPYBenefitTable_.RecId)
            {
                _sPYBenefitLedger.Benefit = sPYBenefitTable_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYBenefitLedger').getDatabaseOperation();
        SPYBenefitLedgerDataEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYBenefitLedgerDataEntity, Benefit)))
        {
            if(!this.validateDataSourceField(dataSourceDBOperation, 'SPYBenefitLedger.Benefit', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Benefit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYBenefitLedger].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYBenefitTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitTable');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYBenefitTable sPYBenefitTable_ = _dataSourceCtx.getBuffer();
                        if((sPYBenefitTable_.PayElementCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYBenefitTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitLedger]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitLedger'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitLedger');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYBenefitLedger].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitLedger]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitLedger'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitLedger');
            // deletes data source [SPYBenefitLedger].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYBenefitLedger].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYBenefitTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitTable');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYBenefitTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitLedger _sPYBenefitLedger, SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurPnLAmount), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurPnLAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurrencyAmount), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurrencyAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingDistributionTemplate), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingDistributionTemplate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ArrearPeriodLine), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ArrearPeriodLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Benefit), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Benefit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, BenefitJournalTrans), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, BenefitJournalTrans), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcEndDate), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcEndDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcStartDate), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcStartDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Currency), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Currency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DefaultDimension), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DefaultDimension), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DistributeCost), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, EncashmentPayout), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, EncashmentPayout), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExchRate), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExchRate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExpressionTrace), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExpressionTrace), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ImmediateDisbursement), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, IsFinalised), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, IsFinalised), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, JournalType), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, JournalType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LeaveApplication), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LeaveApplication), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionCredit), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionDebit), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionPnL), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionPnL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayLedgerSource), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayLedgerSource), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollJournalLine), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollJournalLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollPeriodLine), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollPeriodLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PnLPayrollJournalLine), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PnLPayrollJournalLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Quantity), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Quantity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, SourceDocument), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, SourceDocument), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurPnLAmount), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurPnLAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurrencyAmount), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurrencyAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransDate), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Txt), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Txt), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Worker), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Worker), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYBenefitLedger, _sPYBenefitLedgerDataEntity);
        _sPYBenefitLedger.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitTable _sPYBenefitTable, SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity)
    {
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYBenefitTable, _sPYBenefitLedgerDataEntity);
        _sPYBenefitTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYBenefitTable_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitLedger _sPYBenefitLedger, SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurPnLAmount), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurPnLAmount), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurrencyAmount), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurrencyAmount), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingDistributionTemplate), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingDistributionTemplate), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, ArrearPeriodLine), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ArrearPeriodLine), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, Benefit), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Benefit), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, BenefitJournalTrans), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, BenefitJournalTrans), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcEndDate), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcEndDate), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcStartDate), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcStartDate), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, Currency), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Currency), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, DefaultDimension), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DefaultDimension), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, DistributeCost), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DistributeCost), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, EncashmentPayout), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, EncashmentPayout), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExchRate), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExchRate), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExpressionTrace), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExpressionTrace), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, ImmediateDisbursement), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ImmediateDisbursement), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, IsFinalised), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, IsFinalised), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, JournalType), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, JournalType), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, LeaveApplication), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LeaveApplication), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionCredit), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionCredit), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionDebit), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionDebit), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionPnL), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionPnL), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayLedgerSource), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayLedgerSource), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollJournalLine), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollJournalLine), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollPeriodLine), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollPeriodLine), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, PnLPayrollJournalLine), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PnLPayrollJournalLine), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, Quantity), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Quantity), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, SourceDocument), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, SourceDocument), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurPnLAmount), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurPnLAmount), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurrencyAmount), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurrencyAmount), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransDate), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransDate), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, Txt), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Txt), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitLedger, fieldnum(SPYBenefitLedger, Worker), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Worker), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYBenefitLedger, _sPYBenefitLedgerDataEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYBenefitLedgerDataEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYBenefitLedger);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitTable _sPYBenefitTable, SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity)
    {
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYBenefitTable, _sPYBenefitLedgerDataEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYBenefitLedgerDataEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYBenefitTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYBenefitTable_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYBenefitTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, AccountingCurPnLAmount)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, AccountingCurrencyAmount)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, AccountingDistributionTemplate)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, ArrearPeriodLine)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, Benefit)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, BenefitJournalTrans)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, CalcEndDate)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, CalcStartDate)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, Currency)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, DefaultDimension)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, DistributeCost)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, EncashmentPayout)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, ExchRate)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, ExpressionTrace)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, ImmediateDisbursement)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, IsFinalised)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, JournalType)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, LeaveApplication)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionCredit)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionDebit)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionPnL)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, PayLedgerSource)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, PayrollJournalLine)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, PayrollPeriodLine)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, PnLPayrollJournalLine)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, Quantity)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, SourceDocument)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, TransactionCurPnLAmount)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, TransactionCurrencyAmount)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, TransDate)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, Txt)))
        {
            return true;
        }
        if(_sPYBenefitLedgerDataEntity.isFieldSet(fieldnum(SPYBenefitLedgerDataEntity, Worker)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYBenefitLedgerDataEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYBenefitLedgerDataEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SPYBenefitTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitLedger _sPYBenefitLedger)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurPnLAmount), 'SPYBenefitLedgerDataEntity.AccountingCurPnLAmount', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurPnLAmount), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingCurrencyAmount), 'SPYBenefitLedgerDataEntity.AccountingCurrencyAmount', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurrencyAmount), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, AccountingDistributionTemplate), 'SPYBenefitLedgerDataEntity.AccountingDistributionTemplate', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingDistributionTemplate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ArrearPeriodLine), 'SPYBenefitLedgerDataEntity.ArrearPeriodLine', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ArrearPeriodLine), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, BenefitJournalTrans), 'SPYBenefitLedgerDataEntity.BenefitJournalTrans', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, BenefitJournalTrans), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcEndDate), 'SPYBenefitLedgerDataEntity.CalcEndDate', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcEndDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, CalcStartDate), 'SPYBenefitLedgerDataEntity.CalcStartDate', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcStartDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Currency), 'SPYBenefitLedgerDataEntity.Currency', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Currency), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DefaultDimension), 'SPYBenefitLedgerDataEntity.DefaultDimension', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DefaultDimension), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, DistributeCost), 'SPYBenefitLedgerDataEntity.DistributeCost', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DistributeCost), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, EncashmentPayout), 'SPYBenefitLedgerDataEntity.EncashmentPayout', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, EncashmentPayout), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExchRate), 'SPYBenefitLedgerDataEntity.ExchRate', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExchRate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ExpressionTrace), 'SPYBenefitLedgerDataEntity.ExpressionTrace', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExpressionTrace), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, ImmediateDisbursement), 'SPYBenefitLedgerDataEntity.ImmediateDisbursement', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ImmediateDisbursement), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, IsFinalised), 'SPYBenefitLedgerDataEntity.IsFinalised', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, IsFinalised), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, JournalType), 'SPYBenefitLedgerDataEntity.JournalType', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, JournalType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LeaveApplication), 'SPYBenefitLedgerDataEntity.LeaveApplication', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LeaveApplication), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionCredit), 'SPYBenefitLedgerDataEntity.LedgerDimensionCredit', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionCredit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionDebit), 'SPYBenefitLedgerDataEntity.LedgerDimensionDebit', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionDebit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, LedgerDimensionPnL), 'SPYBenefitLedgerDataEntity.LedgerDimensionPnL', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionPnL), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayLedgerSource), 'SPYBenefitLedgerDataEntity.PayLedgerSource', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayLedgerSource), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollJournalLine), 'SPYBenefitLedgerDataEntity.PayrollJournalLine', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollJournalLine), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PayrollPeriodLine), 'SPYBenefitLedgerDataEntity.PayrollPeriodLine', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollPeriodLine), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, PnLPayrollJournalLine), 'SPYBenefitLedgerDataEntity.PnLPayrollJournalLine', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PnLPayrollJournalLine), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Quantity), 'SPYBenefitLedgerDataEntity.Quantity', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Quantity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, SourceDocument), 'SPYBenefitLedgerDataEntity.SourceDocument', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, SourceDocument), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurPnLAmount), 'SPYBenefitLedgerDataEntity.TransactionCurPnLAmount', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurPnLAmount), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransactionCurrencyAmount), 'SPYBenefitLedgerDataEntity.TransactionCurrencyAmount', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurrencyAmount), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, TransDate), 'SPYBenefitLedgerDataEntity.TransDate', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransDate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Txt), 'SPYBenefitLedgerDataEntity.Txt', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Txt), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitLedgerDataEntity, fieldnum(SPYBenefitLedgerDataEntity, Worker), 'SPYBenefitLedgerDataEntity.Worker', _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYBenefitLedgerDataEntity, _dataSourceCtx, _sPYBenefitLedger) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitLedger _sPYBenefitLedger, SPYBenefitLedger _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurPnLAmount), _matchingRecord, fieldnum(SPYBenefitLedger, AccountingCurPnLAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingCurrencyAmount), _matchingRecord, fieldnum(SPYBenefitLedger, AccountingCurrencyAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, AccountingDistributionTemplate), _matchingRecord, fieldnum(SPYBenefitLedger, AccountingDistributionTemplate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ArrearPeriodLine), _matchingRecord, fieldnum(SPYBenefitLedger, ArrearPeriodLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Benefit), _matchingRecord, fieldnum(SPYBenefitLedger, Benefit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, BenefitJournalTrans), _matchingRecord, fieldnum(SPYBenefitLedger, BenefitJournalTrans), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcEndDate), _matchingRecord, fieldnum(SPYBenefitLedger, CalcEndDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, CalcStartDate), _matchingRecord, fieldnum(SPYBenefitLedger, CalcStartDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Currency), _matchingRecord, fieldnum(SPYBenefitLedger, Currency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DefaultDimension), _matchingRecord, fieldnum(SPYBenefitLedger, DefaultDimension), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, DistributeCost), _matchingRecord, fieldnum(SPYBenefitLedger, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, EncashmentPayout), _matchingRecord, fieldnum(SPYBenefitLedger, EncashmentPayout), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExchRate), _matchingRecord, fieldnum(SPYBenefitLedger, ExchRate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ExpressionTrace), _matchingRecord, fieldnum(SPYBenefitLedger, ExpressionTrace), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, ImmediateDisbursement), _matchingRecord, fieldnum(SPYBenefitLedger, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, IsFinalised), _matchingRecord, fieldnum(SPYBenefitLedger, IsFinalised), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, JournalType), _matchingRecord, fieldnum(SPYBenefitLedger, JournalType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LeaveApplication), _matchingRecord, fieldnum(SPYBenefitLedger, LeaveApplication), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionCredit), _matchingRecord, fieldnum(SPYBenefitLedger, LedgerDimensionCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionDebit), _matchingRecord, fieldnum(SPYBenefitLedger, LedgerDimensionDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, LedgerDimensionPnL), _matchingRecord, fieldnum(SPYBenefitLedger, LedgerDimensionPnL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayLedgerSource), _matchingRecord, fieldnum(SPYBenefitLedger, PayLedgerSource), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollJournalLine), _matchingRecord, fieldnum(SPYBenefitLedger, PayrollJournalLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PayrollPeriodLine), _matchingRecord, fieldnum(SPYBenefitLedger, PayrollPeriodLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, PnLPayrollJournalLine), _matchingRecord, fieldnum(SPYBenefitLedger, PnLPayrollJournalLine), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Quantity), _matchingRecord, fieldnum(SPYBenefitLedger, Quantity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, SourceDocument), _matchingRecord, fieldnum(SPYBenefitLedger, SourceDocument), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurPnLAmount), _matchingRecord, fieldnum(SPYBenefitLedger, TransactionCurPnLAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransactionCurrencyAmount), _matchingRecord, fieldnum(SPYBenefitLedger, TransactionCurrencyAmount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, TransDate), _matchingRecord, fieldnum(SPYBenefitLedger, TransDate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Txt), _matchingRecord, fieldnum(SPYBenefitLedger, Txt), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitLedger, fieldnum(SPYBenefitLedger, Worker), _matchingRecord, fieldnum(SPYBenefitLedger, Worker), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYBenefitLedgerDataEntity), _sPYBenefitLedger, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitTable _sPYBenefitTable, SPYBenefitTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYBenefitLedgerDataEntity), _sPYBenefitTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitLedger_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYBenefitTable_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYBenefitLedger', m_SPYBenefitLedger, this.getDataSourceId('SPYBenefitLedger'), this.getDataSourceId('SPYBenefitLedger'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYBenefitTable', m_SPYBenefitTable, this.getDataSourceId('SPYBenefitTable'), this.getDataSourceId('SPYBenefitTable'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYBenefitLedger LookForUniqueKeyMatch_DS1(SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity, SPYBenefitLedger _sPYBenefitLedger)
    {
        SPYBenefitLedger sPYBenefitLedger_ = null;
        
        select
            forUpdate
            firstOnly
                sPYBenefitLedger_
        where
            sPYBenefitLedger_.RecId == _sPYBenefitLedger.RecId && sPYBenefitLedger_.Worker == _sPYBenefitLedger.Worker && sPYBenefitLedger_.Benefit == _sPYBenefitLedger.Benefit && sPYBenefitLedger_.PayrollPeriodLine == _sPYBenefitLedger.PayrollPeriodLine
        ;
        
        if (sPYBenefitLedger_)
        {
            return sPYBenefitLedger_;
        }
        
        return sPYBenefitLedger_;
    }
    private SPYBenefitTable LookForUniqueKeyMatch_DS2(SPYBenefitLedgerDataEntity _sPYBenefitLedgerDataEntity, SPYBenefitTable _sPYBenefitTable)
    {
        SPYBenefitTable sPYBenefitTable_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYBenefitTable_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                RecId, PayElementCode
            from
                sPYBenefitTable_
        where
            sPYBenefitTable_.PayElementCode == _sPYBenefitTable.PayElementCode
        ;
        
        if (sPYBenefitTable_)
        {
            return sPYBenefitTable_;
        }
        
        return sPYBenefitTable_;
    }

}

