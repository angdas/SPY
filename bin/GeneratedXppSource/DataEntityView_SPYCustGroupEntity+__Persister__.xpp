Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.CustGroup_ID(1)
    
    // Data source buffers
    CustGroup m_CustGroup;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CustGroup'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [CustGroup]
            if(!this.preSaveDataSource(_entityCtx, 'CustGroup'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('CustGroup');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [CustGroup].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [CustGroup]
            if(!this.preSaveDataSource(_entityCtx, 'CustGroup'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('CustGroup');
            // deletes data source [CustGroup].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CustGroup _custGroup, SPYCustGroupEntity _sPYCustGroupEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, CustGroup), _custGroup, fieldnum(CustGroup, CustGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, Name), _custGroup, fieldnum(CustGroup, Name), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _custGroup, _sPYCustGroupEntity);
        _custGroup.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, CustGroup _custGroup, SPYCustGroupEntity _sPYCustGroupEntity)
    {
        this.mapDataSourceFieldToEntityField(_custGroup, fieldnum(CustGroup, CustGroup), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, CustGroup), false);
        this.mapDataSourceFieldToEntityField(_custGroup, fieldnum(CustGroup, Name), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, Name), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _custGroup, _sPYCustGroupEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYCustGroupEntity.fromViewDataSource(_dataSourceCtx.id(), _custGroup);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYCustGroupEntity _sPYCustGroupEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYCustGroupEntity.isFieldSet(fieldnum(SPYCustGroupEntity, CustGroup)))
        {
            return true;
        }
        if(_sPYCustGroupEntity.isFieldSet(fieldnum(SPYCustGroupEntity, Name)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYCustGroupEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYCustGroupEntity _sPYCustGroupEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, CustGroup _custGroup)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, CustGroup), 'SPYCustGroupEntity.CustGroup', _custGroup, fieldnum(CustGroup, CustGroup), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYCustGroupEntity, fieldnum(SPYCustGroupEntity, Name), 'SPYCustGroupEntity.Name', _custGroup, fieldnum(CustGroup, Name), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYCustGroupEntity, _dataSourceCtx, _custGroup) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, CustGroup _custGroup, CustGroup _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _custGroup, fieldnum(CustGroup, CustGroup), _matchingRecord, fieldnum(CustGroup, CustGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _custGroup, fieldnum(CustGroup, Name), _matchingRecord, fieldnum(CustGroup, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYCustGroupEntity), _custGroup, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #CustGroup_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('LedgerBasic')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'LedgerBasic'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'CustGroup', m_CustGroup, this.getDataSourceId('CustGroup'), this.getDataSourceId('CustGroup'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private CustGroup LookForUniqueKeyMatch_DS1(SPYCustGroupEntity _sPYCustGroupEntity, CustGroup _custGroup)
    {
        CustGroup custGroup_ = null;
        
        select
            forUpdate
            firstOnly
                custGroup_
        where
            custGroup_.CustGroup == _custGroup.CustGroup
        ;
        
        if (custGroup_)
        {
            return custGroup_;
        }
        
        return custGroup_;
    }

}

