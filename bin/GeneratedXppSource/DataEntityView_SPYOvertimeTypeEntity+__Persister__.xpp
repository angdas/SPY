Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYOvertimeTypeTable_ID(1)
    #define.SPYPayrollTable_ID(2)
    
    // Data source buffers
    SPYOvertimeTypeTable m_SPYOvertimeTypeTable;
    SPYPayrollTable m_SPYPayrollTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYOvertimeTypeTable'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SPYPayrollTable _sPYPayrollTable, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayrollTable.isFieldSet(fieldnum(SPYPayrollTable,PayElementCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayrollTable) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYOvertimeTypeTable _sPYOvertimeTypeTable)
    {
        SPYPayrollTable sPYPayrollTable_ = _entityCtx.getRuntimeContextByName('SPYPayrollTable').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYPayrollTable').conflictDetectionInvoked() || sPYPayrollTable_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYOvertimeTypeTable.OvertimePayroll != sPYPayrollTable_.RecId)
            {
                _sPYOvertimeTypeTable.OvertimePayroll = sPYPayrollTable_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYOvertimeTypeTable').getDatabaseOperation();
        SPYOvertimeTypeEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYOvertimeTypeEntity, OvertimePayroll)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYOvertimeTypeTable'), _entityCtx.getRuntimeContextByName('SPYPayrollTable'), dataSourceDBOperation, 'SPYOvertimeTypeTable.OvertimePayroll', _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimePayroll), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYOvertimeTypeTable].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollTable');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYPayrollTable sPYPayrollTable_ = _dataSourceCtx.getBuffer();
                        if((sPYPayrollTable_.PayElementCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYPayrollTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYOvertimeTypeTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYOvertimeTypeTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYOvertimeTypeTable');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYOvertimeTypeTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYOvertimeTypeTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYOvertimeTypeTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYOvertimeTypeTable');
            // deletes data source [SPYOvertimeTypeTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYOvertimeTypeTable].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollTable');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYPayrollTable].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeTypeTable _sPYOvertimeTypeTable, SPYOvertimeTypeEntity _sPYOvertimeTypeEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, Description), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, OvertimePayroll), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimePayroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, OvertimeTypeCode), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimeTypeCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYOvertimeTypeTable, _sPYOvertimeTypeEntity);
        _sPYOvertimeTypeTable.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYOvertimeTypeEntity _sPYOvertimeTypeEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, SPYPayrollTable_PayElementCode), _sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollTable, _sPYOvertimeTypeEntity);
        _sPYPayrollTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeTypeTable _sPYOvertimeTypeTable, SPYOvertimeTypeEntity _sPYOvertimeTypeEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, Description), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimePayroll), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, OvertimePayroll), false);
        this.mapDataSourceFieldToEntityField(_sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimeTypeCode), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, OvertimeTypeCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYOvertimeTypeTable, _sPYOvertimeTypeEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYOvertimeTypeEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYOvertimeTypeTable);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYOvertimeTypeEntity _sPYOvertimeTypeEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, SPYPayrollTable_PayElementCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollTable, _sPYOvertimeTypeEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYOvertimeTypeEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYPayrollTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYOvertimeTypeEntity _sPYOvertimeTypeEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYOvertimeTypeEntity.isFieldSet(fieldnum(SPYOvertimeTypeEntity, Description)))
        {
            return true;
        }
        if(_sPYOvertimeTypeEntity.isFieldSet(fieldnum(SPYOvertimeTypeEntity, OvertimePayroll)))
        {
            return true;
        }
        if(_sPYOvertimeTypeEntity.isFieldSet(fieldnum(SPYOvertimeTypeEntity, OvertimeTypeCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYOvertimeTypeEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYOvertimeTypeEntity _sPYOvertimeTypeEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYOvertimeTypeEntity.isFieldSet(fieldnum(SPYOvertimeTypeEntity, SPYPayrollTable_PayElementCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYOvertimeTypeEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYOvertimeTypeEntity _sPYOvertimeTypeEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeTypeTable _sPYOvertimeTypeTable)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, Description), 'SPYOvertimeTypeEntity.Description', _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYOvertimeTypeEntity, fieldnum(SPYOvertimeTypeEntity, OvertimeTypeCode), 'SPYOvertimeTypeEntity.OvertimeTypeCode', _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimeTypeCode), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYOvertimeTypeEntity, _dataSourceCtx, _sPYOvertimeTypeTable) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYOvertimeTypeTable _sPYOvertimeTypeTable, SPYOvertimeTypeTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, Description), _matchingRecord, fieldnum(SPYOvertimeTypeTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimePayroll), _matchingRecord, fieldnum(SPYOvertimeTypeTable, OvertimePayroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYOvertimeTypeTable, fieldnum(SPYOvertimeTypeTable, OvertimeTypeCode), _matchingRecord, fieldnum(SPYOvertimeTypeTable, OvertimeTypeCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYOvertimeTypeEntity), _sPYOvertimeTypeTable, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYPayrollTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), _matchingRecord, fieldnum(SPYPayrollTable, PayElementCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYOvertimeTypeEntity), _sPYPayrollTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYOvertimeTypeTable_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYPayrollTable_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYOvertimeTypeTable', m_SPYOvertimeTypeTable, this.getDataSourceId('SPYOvertimeTypeTable'), this.getDataSourceId('SPYOvertimeTypeTable'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYPayrollTable', m_SPYPayrollTable, this.getDataSourceId('SPYPayrollTable'), this.getDataSourceId('SPYPayrollTable'), true/* optional */, true/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYOvertimeTypeTable LookForUniqueKeyMatch_DS1(SPYOvertimeTypeEntity _sPYOvertimeTypeEntity, SPYOvertimeTypeTable _sPYOvertimeTypeTable)
    {
        SPYOvertimeTypeTable sPYOvertimeTypeTable_ = null;
        
        select
            forUpdate
            firstOnly
                sPYOvertimeTypeTable_
        where
            sPYOvertimeTypeTable_.OvertimeTypeCode == _sPYOvertimeTypeTable.OvertimeTypeCode
        ;
        
        if (sPYOvertimeTypeTable_)
        {
            return sPYOvertimeTypeTable_;
        }
        
        return sPYOvertimeTypeTable_;
    }
    private SPYPayrollTable LookForUniqueKeyMatch_DS2(SPYOvertimeTypeEntity _sPYOvertimeTypeEntity, SPYPayrollTable _sPYPayrollTable)
    {
        SPYPayrollTable sPYPayrollTable_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayrollTable_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PayElementCode, RecId
            from
                sPYPayrollTable_
        where
            sPYPayrollTable_.PayElementCode == _sPYPayrollTable.PayElementCode
        ;
        
        if (sPYPayrollTable_)
        {
            return sPYPayrollTable_;
        }
        
        return sPYPayrollTable_;
    }

}

