Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYPayrollEarningsJournalTable_ID(1)
    
    // Data source buffers
    SPYPayrollEarningsJournalTable m_SPYPayrollEarningsJournalTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollEarningsJournalTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayrollEarningsJournalTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollEarningsJournalTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollEarningsJournalTable');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [SPYPayrollEarningsJournalTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayrollEarningsJournalTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollEarningsJournalTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollEarningsJournalTable');
            // deletes data source [SPYPayrollEarningsJournalTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollEarningsJournalTable _sPYPayrollEarningsJournalTable, SPYPayrollEarningsJournalTableEntity _sPYPayrollEarningsJournalTableEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, Description), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, ImmediateDisbursement), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, JournalCode), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, JournalCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollEarningsJournalTable, _sPYPayrollEarningsJournalTableEntity);
        _sPYPayrollEarningsJournalTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollEarningsJournalTable _sPYPayrollEarningsJournalTable, SPYPayrollEarningsJournalTableEntity _sPYPayrollEarningsJournalTableEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, Description), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, ImmediateDisbursement), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, ImmediateDisbursement), false);
        this.mapDataSourceFieldToEntityField(_sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, JournalCode), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, JournalCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollEarningsJournalTable, _sPYPayrollEarningsJournalTableEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYPayrollEarningsJournalTableEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollEarningsJournalTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYPayrollEarningsJournalTableEntity _sPYPayrollEarningsJournalTableEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYPayrollEarningsJournalTableEntity.isFieldSet(fieldnum(SPYPayrollEarningsJournalTableEntity, Description)))
        {
            return true;
        }
        if(_sPYPayrollEarningsJournalTableEntity.isFieldSet(fieldnum(SPYPayrollEarningsJournalTableEntity, ImmediateDisbursement)))
        {
            return true;
        }
        if(_sPYPayrollEarningsJournalTableEntity.isFieldSet(fieldnum(SPYPayrollEarningsJournalTableEntity, JournalCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYPayrollEarningsJournalTableEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYPayrollEarningsJournalTableEntity _sPYPayrollEarningsJournalTableEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollEarningsJournalTable _sPYPayrollEarningsJournalTable)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, Description), 'SPYPayrollEarningsJournalTableEntity.Description', _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, ImmediateDisbursement), 'SPYPayrollEarningsJournalTableEntity.ImmediateDisbursement', _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, ImmediateDisbursement), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYPayrollEarningsJournalTableEntity, fieldnum(SPYPayrollEarningsJournalTableEntity, JournalCode), 'SPYPayrollEarningsJournalTableEntity.JournalCode', _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, JournalCode), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYPayrollEarningsJournalTableEntity, _dataSourceCtx, _sPYPayrollEarningsJournalTable) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollEarningsJournalTable _sPYPayrollEarningsJournalTable, SPYPayrollEarningsJournalTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, Description), _matchingRecord, fieldnum(SPYPayrollEarningsJournalTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, ImmediateDisbursement), _matchingRecord, fieldnum(SPYPayrollEarningsJournalTable, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollEarningsJournalTable, fieldnum(SPYPayrollEarningsJournalTable, JournalCode), _matchingRecord, fieldnum(SPYPayrollEarningsJournalTable, JournalCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYPayrollEarningsJournalTableEntity), _sPYPayrollEarningsJournalTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayrollEarningsJournalTable_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYPayrollEarningsJournalTable', m_SPYPayrollEarningsJournalTable, this.getDataSourceId('SPYPayrollEarningsJournalTable'), this.getDataSourceId('SPYPayrollEarningsJournalTable'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYPayrollEarningsJournalTable LookForUniqueKeyMatch_DS1(SPYPayrollEarningsJournalTableEntity _sPYPayrollEarningsJournalTableEntity, SPYPayrollEarningsJournalTable _sPYPayrollEarningsJournalTable)
    {
        SPYPayrollEarningsJournalTable sPYPayrollEarningsJournalTable_ = null;
        
        select
            forUpdate
            firstOnly
                sPYPayrollEarningsJournalTable_
        where
            sPYPayrollEarningsJournalTable_.JournalCode == _sPYPayrollEarningsJournalTable.JournalCode
        ;
        
        if (sPYPayrollEarningsJournalTable_)
        {
            return sPYPayrollEarningsJournalTable_;
        }
        
        return sPYPayrollEarningsJournalTable_;
    }

}

