Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYBenefitPayElementMasterView_ID(1)
    
    // Data source buffers
    SPYBenefitPayElementMasterView m_SPYBenefitPayElementMasterView;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYBenefitPayElementMasterView'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS1(SPYBenefitPayElementMasterView _sPYBenefitPayElementMasterView, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,AmountExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,ApplicableForAll)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,BenefitType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,CalculationOrder)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,Description)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,DistributeCost)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,EncahmentQuantityExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,EncashmentAmountExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,EncashmentCostDistribution)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,EncashmentPayroll)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,EOSPayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,InstanceRelationType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,LegalEntity)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,ParentPayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,PayElementCode)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,PayElementGroup)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,PayElementType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,QuantityExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,ReferencePayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,ValidFrom)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterView.isFieldSet(fieldnum(SPYBenefitPayElementMasterView,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYBenefitPayElementMasterView) ? true : false;
        return rtrn;
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitPayElementMasterView]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitPayElementMasterView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitPayElementMasterView');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            if(this.isAnyFieldSet_DS1(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
            {
                // invoke conflict detection for read-only data source.
                Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                if(!resolvedRecord)
                {
                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                    throw Exception::ViewDataSourceValidation;
                }
                // marks the read-only data source as 'saved' and skips actual insert/update operation.
                _dataSourceCtx.setDataSaved(true);
            }
            // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
            else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                _dataSourceCtx.setDataSaved(true);
            }
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // inserts/updates data source [SPYBenefitPayElementMasterView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitPayElementMasterView]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitPayElementMasterView'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitPayElementMasterView');
            // skips delete operation against read-only data source.
            // marks the read-only data source as 'saved' and skips actual delete operation.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // deletes data source [SPYBenefitPayElementMasterView].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitPayElementMasterView _sPYBenefitPayElementMasterView, SPYBenefitPayElementMasterEntity _sPYBenefitPayElementMasterEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, AmountExp), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, AmountExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ApplicableForAll), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ApplicableForAll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, BenefitType), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, BenefitType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, CalculationOrder), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, CalculationOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, Description), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, DistributeCost), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncahmentQuantityExp), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncahmentQuantityExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentAmountExp), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentAmountExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentCostDistribution), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentCostDistribution), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentPayroll), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentPayroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EOSPayElement), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EOSPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, InstanceRelationType), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, InstanceRelationType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, LegalEntity), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ParentPayElement), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ParentPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementCode), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementGroup), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementType), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, QuantityExp), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, QuantityExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ReferencePayElement), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ReferencePayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ValidFrom), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ValidTo), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYBenefitPayElementMasterView, _sPYBenefitPayElementMasterEntity);
        _sPYBenefitPayElementMasterView.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitPayElementMasterView_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitPayElementMasterView _sPYBenefitPayElementMasterView, SPYBenefitPayElementMasterEntity _sPYBenefitPayElementMasterEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, AmountExp), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, AmountExp), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ApplicableForAll), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ApplicableForAll), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, BenefitType), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, BenefitType), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, CalculationOrder), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, CalculationOrder), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, Description), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, DistributeCost), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, DistributeCost), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncahmentQuantityExp), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncahmentQuantityExp), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentAmountExp), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentAmountExp), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentCostDistribution), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentCostDistribution), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentPayroll), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EncashmentPayroll), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EOSPayElement), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, EOSPayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, InstanceRelationType), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, InstanceRelationType), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, LegalEntity), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ParentPayElement), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ParentPayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementCode), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementCode), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementGroup), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementGroup), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementType), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, PayElementType), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, QuantityExp), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, QuantityExp), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ReferencePayElement), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ReferencePayElement), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidFrom), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidTo), _sPYBenefitPayElementMasterEntity, fieldnum(SPYBenefitPayElementMasterEntity, ValidTo), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYBenefitPayElementMasterView, _sPYBenefitPayElementMasterEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYBenefitPayElementMasterEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYBenefitPayElementMasterView);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitPayElementMasterView_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitPayElementMasterView_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYBenefitPayElementMasterEntity _sPYBenefitPayElementMasterEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, AmountExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, ApplicableForAll)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, BenefitType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, CalculationOrder)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, Description)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, DistributeCost)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, EncahmentQuantityExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, EncashmentAmountExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, EncashmentCostDistribution)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, EncashmentPayroll)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, EOSPayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, InstanceRelationType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, LegalEntity)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, ParentPayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, PayElementCode)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, PayElementGroup)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, PayElementType)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, QuantityExp)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, ReferencePayElement)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYBenefitPayElementMasterEntity.isFieldSet(fieldnum(SPYBenefitPayElementMasterEntity, ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYBenefitPayElementMasterEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitPayElementMasterView_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitPayElementMasterView _sPYBenefitPayElementMasterView, SPYBenefitPayElementMasterView _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, AmountExp), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, AmountExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ApplicableForAll), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, ApplicableForAll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, BenefitType), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, BenefitType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, CalculationOrder), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, CalculationOrder), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, Description), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, DistributeCost), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, DistributeCost), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncahmentQuantityExp), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, EncahmentQuantityExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentAmountExp), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, EncashmentAmountExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentCostDistribution), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, EncashmentCostDistribution), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EncashmentPayroll), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, EncashmentPayroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, EOSPayElement), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, EOSPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, InstanceRelationType), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, InstanceRelationType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, LegalEntity), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ParentPayElement), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, ParentPayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementCode), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, PayElementCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementGroup), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, PayElementType), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, PayElementType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, QuantityExp), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, QuantityExp), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ReferencePayElement), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, ReferencePayElement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidFrom), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitPayElementMasterView, fieldnum(SPYBenefitPayElementMasterView, ValidTo), _matchingRecord, fieldnum(SPYBenefitPayElementMasterView, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYBenefitPayElementMasterEntity), _sPYBenefitPayElementMasterView, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitPayElementMasterView_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYBenefitPayElementMasterView', m_SPYBenefitPayElementMasterView, this.getDataSourceId('SPYBenefitPayElementMasterView'), this.getDataSourceId('SPYBenefitPayElementMasterView'), false/* optional */, true/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYBenefitPayElementMasterView LookForUniqueKeyMatch_DS1(SPYBenefitPayElementMasterEntity _sPYBenefitPayElementMasterEntity, SPYBenefitPayElementMasterView _sPYBenefitPayElementMasterView)
    {
        SPYBenefitPayElementMasterView sPYBenefitPayElementMasterView_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYBenefitPayElementMasterView_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                AmountExp, ApplicableForAll, BenefitType, CalculationOrder, Description, DistributeCost, EncahmentQuantityExp, EncashmentAmountExp, EncashmentCostDistribution, EncashmentPayroll, EOSPayElement, InstanceRelationType, LegalEntity, ParentPayElement, PayElementCode, PayElementGroup, PayElementType, QuantityExp, ReferencePayElement, ValidFrom, ValidTo
            from
                sPYBenefitPayElementMasterView_
        where
            sPYBenefitPayElementMasterView_.RecId == _sPYBenefitPayElementMasterView.RecId
        ;
        
        if (sPYBenefitPayElementMasterView_)
        {
            return sPYBenefitPayElementMasterView_;
        }
        
        return sPYBenefitPayElementMasterView_;
    }

}

