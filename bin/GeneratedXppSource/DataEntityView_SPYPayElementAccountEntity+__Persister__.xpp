Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYPayElementAccount_ID(1)
    #define.CompanyInfo1_ID(2)
    #define.OffsetAccountDAVC_ID(3)
    #define.AccountDAVC_ID(4)
    #define.EncashmentOffsetAccountDAVC_ID(5)
    #define.EncashmentAccountDAVC_ID(6)
    #define.ProfitAndLossAccountDAVC_ID(7)
    
    // Data source buffers
    SPYPayElementAccount m_SPYPayElementAccount;
    CompanyInfo m_CompanyInfo1;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayElementAccount'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo1'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(CompanyInfo _companyInfo1, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo1.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo1) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYPayElementAccount _sPYPayElementAccount)
    {
        CompanyInfo companyInfo1_ = _entityCtx.getRuntimeContextByName('CompanyInfo1').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo1').conflictDetectionInvoked() || companyInfo1_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYPayElementAccount.LegalEntity != companyInfo1_.RecId)
            {
                _sPYPayElementAccount.LegalEntity = companyInfo1_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYPayElementAccount').getDatabaseOperation();
        SPYPayElementAccountEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYPayElementAccountEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYPayElementAccount'), _entityCtx.getRuntimeContextByName('CompanyInfo1'), dataSourceDBOperation, 'SPYPayElementAccount.LegalEntity', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYPayElementAccount].
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo1]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo1'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo1');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        CompanyInfo companyInfo1_ = _dataSourceCtx.getBuffer();
                        if((companyInfo1_.DataArea) || (companyInfo1_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CompanyInfo1].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementAccount]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementAccount'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementAccount');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYPayElementAccount].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYPayElementAccount]
            if(!this.preSaveDataSource(_entityCtx, 'SPYPayElementAccount'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayElementAccount');
            // deletes data source [SPYPayElementAccount].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYPayElementAccount].
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo1]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo1'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo1');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CompanyInfo1].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementAccount _sPYPayElementAccount, SPYPayElementAccountEntity _sPYPayElementAccountEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, DistributionTemplate), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, AccountingDistributionTemplate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, OffsetAccount), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, Account), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentOffsetAccount), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentAccount), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, ProfitAndLossAccount), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionPnL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, LegalEntity), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, PayElementGroup), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, WorkerGroup), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, WorkerGroup), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayElementAccount, _sPYPayElementAccountEntity);
        _sPYPayElementAccount.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo1, SPYPayElementAccountEntity _sPYPayElementAccountEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, Company), _companyInfo1, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo1, _sPYPayElementAccountEntity);
        _companyInfo1.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo1_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementAccount _sPYPayElementAccount, SPYPayElementAccountEntity _sPYPayElementAccountEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, AccountingDistributionTemplate), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, DistributionTemplate), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionCredit), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, OffsetAccount), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionDebit), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, Account), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseCredit), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentOffsetAccount), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseDebit), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentAccount), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionPnL), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, ProfitAndLossAccount), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, LegalEntity), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, PayElementGroup), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, PayElementGroup), false);
        this.mapDataSourceFieldToEntityField(_sPYPayElementAccount, fieldnum(SPYPayElementAccount, WorkerGroup), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, WorkerGroup), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayElementAccount, _sPYPayElementAccountEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYPayElementAccountEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayElementAccount);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo1, SPYPayElementAccountEntity _sPYPayElementAccountEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo1, fieldnum(CompanyInfo, DataArea), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, Company), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo1, _sPYPayElementAccountEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYPayElementAccountEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo1);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo1_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo1_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYPayElementAccountEntity _sPYPayElementAccountEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, DistributionTemplate)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, OffsetAccount)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, Account)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, EncashmentOffsetAccount)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, EncashmentAccount)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, ProfitAndLossAccount)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, LegalEntity)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, PayElementGroup)))
        {
            return true;
        }
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, WorkerGroup)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYPayElementAccountEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYPayElementAccountEntity _sPYPayElementAccountEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYPayElementAccountEntity.isFieldSet(fieldnum(SPYPayElementAccountEntity, Company)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYPayElementAccountEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo1_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYPayElementAccountEntity _sPYPayElementAccountEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementAccount _sPYPayElementAccount)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, DistributionTemplate), 'SPYPayElementAccountEntity.DistributionTemplate', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, AccountingDistributionTemplate), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, OffsetAccount), 'SPYPayElementAccountEntity.OffsetAccount', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionCredit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, Account), 'SPYPayElementAccountEntity.Account', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionDebit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentOffsetAccount), 'SPYPayElementAccountEntity.EncashmentOffsetAccount', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseCredit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, EncashmentAccount), 'SPYPayElementAccountEntity.EncashmentAccount', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseDebit), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, ProfitAndLossAccount), 'SPYPayElementAccountEntity.ProfitAndLossAccount', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionPnL), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, PayElementGroup), 'SPYPayElementAccountEntity.PayElementGroup', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, PayElementGroup), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYPayElementAccountEntity, fieldnum(SPYPayElementAccountEntity, WorkerGroup), 'SPYPayElementAccountEntity.WorkerGroup', _sPYPayElementAccount, fieldnum(SPYPayElementAccount, WorkerGroup), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYPayElementAccountEntity, _dataSourceCtx, _sPYPayElementAccount) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayElementAccount _sPYPayElementAccount, SPYPayElementAccount _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, AccountingDistributionTemplate), _matchingRecord, fieldnum(SPYPayElementAccount, AccountingDistributionTemplate), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionCredit), _matchingRecord, fieldnum(SPYPayElementAccount, LedgerDimensionCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionDebit), _matchingRecord, fieldnum(SPYPayElementAccount, LedgerDimensionDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseCredit), _matchingRecord, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseCredit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseDebit), _matchingRecord, fieldnum(SPYPayElementAccount, LedgerDimensionExpenseDebit), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LedgerDimensionPnL), _matchingRecord, fieldnum(SPYPayElementAccount, LedgerDimensionPnL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, LegalEntity), _matchingRecord, fieldnum(SPYPayElementAccount, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, PayElementGroup), _matchingRecord, fieldnum(SPYPayElementAccount, PayElementGroup), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayElementAccount, fieldnum(SPYPayElementAccount, WorkerGroup), _matchingRecord, fieldnum(SPYPayElementAccount, WorkerGroup), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYPayElementAccountEntity), _sPYPayElementAccount, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo1, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo1, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYPayElementAccountEntity), _companyInfo1, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYPayElementAccount_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo1_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #CompanyInfo1_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYPayElementAccount', m_SPYPayElementAccount, this.getDataSourceId('SPYPayElementAccount'), this.getDataSourceId('SPYPayElementAccount'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo1', m_CompanyInfo1, this.getDataSourceId('CompanyInfo1'), this.getDataSourceId('CompanyInfo1'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private SPYPayElementAccount LookForUniqueKeyMatch_DS1(SPYPayElementAccountEntity _sPYPayElementAccountEntity, SPYPayElementAccount _sPYPayElementAccount)
    {
        SPYPayElementAccount sPYPayElementAccount_ = null;
        
        select
            forUpdate
            firstOnly
                sPYPayElementAccount_
        where
            sPYPayElementAccount_.PayElementGroup == _sPYPayElementAccount.PayElementGroup && sPYPayElementAccount_.WorkerGroup == _sPYPayElementAccount.WorkerGroup && sPYPayElementAccount_.LegalEntity == _sPYPayElementAccount.LegalEntity
        ;
        
        if (sPYPayElementAccount_)
        {
            return sPYPayElementAccount_;
        }
        
        return sPYPayElementAccount_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS2(SPYPayElementAccountEntity _sPYPayElementAccountEntity, CompanyInfo _companyInfo1)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo1.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }

}

