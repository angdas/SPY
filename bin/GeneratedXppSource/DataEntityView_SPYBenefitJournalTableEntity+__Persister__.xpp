Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYBenefitJournalTable_ID(1)
    
    // Data source buffers
    SPYBenefitJournalTable m_SPYBenefitJournalTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYBenefitJournalTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitJournalTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitJournalTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitJournalTable');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [SPYBenefitJournalTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYBenefitJournalTable]
            if(!this.preSaveDataSource(_entityCtx, 'SPYBenefitJournalTable'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYBenefitJournalTable');
            // deletes data source [SPYBenefitJournalTable].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitJournalTable _sPYBenefitJournalTable, SPYBenefitJournalTableEntity _sPYBenefitJournalTableEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, BenefitJournalCode), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, BenefitJournalCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, Description), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, ImmediateDisbursement), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, JournalType), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, JournalType), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYBenefitJournalTable, _sPYBenefitJournalTableEntity);
        _sPYBenefitJournalTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitJournalTable _sPYBenefitJournalTable, SPYBenefitJournalTableEntity _sPYBenefitJournalTableEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, BenefitJournalCode), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, BenefitJournalCode), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, Description), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, ImmediateDisbursement), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, ImmediateDisbursement), false);
        this.mapDataSourceFieldToEntityField(_sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, JournalType), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, JournalType), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYBenefitJournalTable, _sPYBenefitJournalTableEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYBenefitJournalTableEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYBenefitJournalTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYBenefitJournalTableEntity _sPYBenefitJournalTableEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYBenefitJournalTableEntity.isFieldSet(fieldnum(SPYBenefitJournalTableEntity, BenefitJournalCode)))
        {
            return true;
        }
        if(_sPYBenefitJournalTableEntity.isFieldSet(fieldnum(SPYBenefitJournalTableEntity, Description)))
        {
            return true;
        }
        if(_sPYBenefitJournalTableEntity.isFieldSet(fieldnum(SPYBenefitJournalTableEntity, ImmediateDisbursement)))
        {
            return true;
        }
        if(_sPYBenefitJournalTableEntity.isFieldSet(fieldnum(SPYBenefitJournalTableEntity, JournalType)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYBenefitJournalTableEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYBenefitJournalTableEntity _sPYBenefitJournalTableEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitJournalTable _sPYBenefitJournalTable)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, BenefitJournalCode), 'SPYBenefitJournalTableEntity.BenefitJournalCode', _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, BenefitJournalCode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, Description), 'SPYBenefitJournalTableEntity.Description', _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, ImmediateDisbursement), 'SPYBenefitJournalTableEntity.ImmediateDisbursement', _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, ImmediateDisbursement), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _sPYBenefitJournalTableEntity, fieldnum(SPYBenefitJournalTableEntity, JournalType), 'SPYBenefitJournalTableEntity.JournalType', _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, JournalType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYBenefitJournalTableEntity, _dataSourceCtx, _sPYBenefitJournalTable) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYBenefitJournalTable _sPYBenefitJournalTable, SPYBenefitJournalTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, BenefitJournalCode), _matchingRecord, fieldnum(SPYBenefitJournalTable, BenefitJournalCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, Description), _matchingRecord, fieldnum(SPYBenefitJournalTable, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, ImmediateDisbursement), _matchingRecord, fieldnum(SPYBenefitJournalTable, ImmediateDisbursement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYBenefitJournalTable, fieldnum(SPYBenefitJournalTable, JournalType), _matchingRecord, fieldnum(SPYBenefitJournalTable, JournalType), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYBenefitJournalTableEntity), _sPYBenefitJournalTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYBenefitJournalTable_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYBenefitJournalTable', m_SPYBenefitJournalTable, this.getDataSourceId('SPYBenefitJournalTable'), this.getDataSourceId('SPYBenefitJournalTable'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private SPYBenefitJournalTable LookForUniqueKeyMatch_DS1(SPYBenefitJournalTableEntity _sPYBenefitJournalTableEntity, SPYBenefitJournalTable _sPYBenefitJournalTable)
    {
        SPYBenefitJournalTable sPYBenefitJournalTable_ = null;
        
        select
            forUpdate
            firstOnly
                sPYBenefitJournalTable_
        where
            sPYBenefitJournalTable_.BenefitJournalCode == _sPYBenefitJournalTable.BenefitJournalCode
        ;
        
        if (sPYBenefitJournalTable_)
        {
            return sPYBenefitJournalTable_;
        }
        
        return sPYBenefitJournalTable_;
    }

}

