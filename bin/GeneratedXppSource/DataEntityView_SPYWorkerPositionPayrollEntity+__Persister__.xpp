Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYWorkerPositionPayroll_ID(1)
    #define.CompanyInfo_ID(2)
    #define.HcmPosition_ID(3)
    #define.HcmWorker_ID(4)
    #define.SPYPayrollPeriod_ID(5)
    #define.SPYPayrollTable_ID(6)
    
    // Data source buffers
    SPYWorkerPositionPayroll m_SPYWorkerPositionPayroll;
    CompanyInfo m_CompanyInfo;
    HcmPosition m_HcmPosition;
    HcmWorker m_HcmWorker;
    SPYPayrollPeriod m_SPYPayrollPeriod;
    SPYPayrollTable m_SPYPayrollTable;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPosition'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorker'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollPeriod'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYPayrollTable'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(CompanyInfo _companyInfo, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS3(HcmPosition _hcmPosition, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPosition) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(HcmWorker _hcmWorker, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorker) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS5(SPYPayrollPeriod _sPYPayrollPeriod, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayrollPeriod.isFieldSet(fieldnum(SPYPayrollPeriod,PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayrollPeriod) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS6(SPYPayrollTable _sPYPayrollTable, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYPayrollTable.isFieldSet(fieldnum(SPYPayrollTable,PayElementCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYPayrollTable) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll)
    {
        CompanyInfo companyInfo_ = _entityCtx.getRuntimeContextByName('CompanyInfo').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo').conflictDetectionInvoked() || companyInfo_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionPayroll.LegalEntity != companyInfo_.RecId)
            {
                _sPYWorkerPositionPayroll.LegalEntity = companyInfo_.RecId;
            }
        }
        
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmPosition').conflictDetectionInvoked() || hcmPosition_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerPositionPayroll.Position != hcmPosition_.RecId)
            {
                _sPYWorkerPositionPayroll.Position = hcmPosition_.RecId;
            }
        }
        
        HcmWorker hcmWorker_ = _entityCtx.getRuntimeContextByName('HcmWorker').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerPositionPayroll.Worker != hcmWorker_.RecId)
        {
            _sPYWorkerPositionPayroll.Worker = hcmWorker_.RecId;
        }
        
        SPYPayrollPeriod sPYPayrollPeriod_ = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerPositionPayroll.PayrollPeriod != sPYPayrollPeriod_.RecId)
        {
            _sPYWorkerPositionPayroll.PayrollPeriod = sPYPayrollPeriod_.RecId;
        }
        
        SPYPayrollTable sPYPayrollTable_ = _entityCtx.getRuntimeContextByName('SPYPayrollTable').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerPositionPayroll.Payroll != sPYPayrollTable_.RecId)
        {
            _sPYWorkerPositionPayroll.Payroll = sPYPayrollTable_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll').getDatabaseOperation();
        SPYWorkerPositionPayrollEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionPayrollEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'), _entityCtx.getRuntimeContextByName('CompanyInfo'), dataSourceDBOperation, 'SPYWorkerPositionPayroll.LegalEntity', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionPayrollEntity, Position)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'SPYWorkerPositionPayroll.Position', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionPayrollEntity, Worker)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'), _entityCtx.getRuntimeContextByName('HcmWorker'), dataSourceDBOperation, 'SPYWorkerPositionPayroll.Worker', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionPayrollEntity, PayrollPeriod)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'), _entityCtx.getRuntimeContextByName('SPYPayrollPeriod'), dataSourceDBOperation, 'SPYWorkerPositionPayroll.PayrollPeriod', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, PayrollPeriod), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerPositionPayrollEntity, Payroll)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll'), _entityCtx.getRuntimeContextByName('SPYPayrollTable'), dataSourceDBOperation, 'SPYWorkerPositionPayroll.Payroll', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Payroll), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYWorkerPositionPayroll].
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        CompanyInfo companyInfo_ = _dataSourceCtx.getBuffer();
                        if((companyInfo_.DataArea) || (companyInfo_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPosition]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmPosition hcmPosition_ = _dataSourceCtx.getBuffer();
                        if((hcmPosition_.PositionId))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmPosition].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmWorker hcmWorker_ = _dataSourceCtx.getBuffer();
                        if((hcmWorker_.Person) || (hcmWorker_.PersonnelNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS5(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYPayrollPeriod sPYPayrollPeriod_ = _dataSourceCtx.getBuffer();
                        if((sPYPayrollPeriod_.PayrollPeriodCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYPayrollPeriod].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollTable');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS6(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYPayrollTable sPYPayrollTable_ = _dataSourceCtx.getBuffer();
                        if((sPYPayrollTable_.PayElementCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYPayrollTable].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerPositionPayroll]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerPositionPayroll'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYWorkerPositionPayroll].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerPositionPayroll]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerPositionPayroll'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerPositionPayroll');
            // deletes data source [SPYWorkerPositionPayroll].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYWorkerPositionPayroll].
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CompanyInfo].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPosition]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmPosition].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollPeriod]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollPeriod'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollPeriod');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYPayrollPeriod].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYPayrollTable]
                if(!this.preSaveDataSource(_entityCtx, 'SPYPayrollTable'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYPayrollTable');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYPayrollTable].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Annual), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Annual), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, BiWeekly), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, BiWeekly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Currency), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Currency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Daily), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Daily), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Hourly), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Hourly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, LegalEntity), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Monthly), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Monthly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Payroll), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Payroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, PayrollPeriod), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, PayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Position), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Position), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Quarterly), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Quarterly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SemiAnnual), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, SemiAnnual), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidFrom), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidTo), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Weekly), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Weekly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Worker), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Worker), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYWorkerPositionPayroll, _sPYWorkerPositionPayrollEntity);
        _sPYWorkerPositionPayroll.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, CompanyInfo_DataArea), _companyInfo, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYWorkerPositionPayrollEntity);
        _companyInfo.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPosition, _sPYWorkerPositionPayrollEntity);
        _hcmPosition.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, HcmWorker_PersonnelNumber), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerPositionPayrollEntity);
        _hcmWorker.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS5(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollPeriod_PayrollPeriodCode), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYWorkerPositionPayrollEntity);
            _sPYPayrollPeriod.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS6(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollTable_PayElementCode), _sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYPayrollTable, _sPYWorkerPositionPayrollEntity);
        _sPYPayrollTable.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToDataSource_DS5(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                this.mapToDataSource_DS6(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Annual), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Annual), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, BiWeekly), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, BiWeekly), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Currency), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Currency), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Daily), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Daily), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Hourly), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Hourly), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, LegalEntity), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Monthly), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Monthly), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Payroll), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Payroll), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, PayrollPeriod), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, PayrollPeriod), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Position), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Position), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Quarterly), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Quarterly), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, SemiAnnual), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SemiAnnual), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidFrom), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidTo), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidTo), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Weekly), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Weekly), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Worker), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Worker), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYWorkerPositionPayroll, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYWorkerPositionPayroll);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, DataArea), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, CompanyInfo_DataArea), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPosition, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPosition);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, HcmWorker_PersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorker);
    }
    private void mapFromDataSource_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollPeriod_PayrollPeriodCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollPeriod, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollPeriod);
    }
    private void mapFromDataSource_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollTable_PayElementCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYPayrollTable, _sPYWorkerPositionPayrollEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerPositionPayrollEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYPayrollTable);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                this.mapFromDataSource_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                this.mapFromDataSource_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPosition_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.LookForUniqueKeyMatch_DS5(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYPayrollTable_ID:
                rtrn = this.LookForUniqueKeyMatch_DS6(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Annual)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, BiWeekly)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Currency)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Daily)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Hourly)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, LegalEntity)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Monthly)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Payroll)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, PayrollPeriod)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Position)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Quarterly)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, SemiAnnual)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, ValidTo)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Weekly)))
        {
            return true;
        }
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, Worker)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, CompanyInfo_DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, HcmWorker_PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS5(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollPeriod_PayrollPeriodCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS6(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerPositionPayrollEntity.isFieldSet(fieldnum(SPYWorkerPositionPayrollEntity, SPYPayrollTable_PayElementCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerPositionPayrollEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #HcmPosition_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            case #SPYPayrollPeriod_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS5(_entityCtx.getEntityRecord());
                break;
            case #SPYPayrollTable_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS6(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Annual), 'SPYWorkerPositionPayrollEntity.Annual', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Annual), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, BiWeekly), 'SPYWorkerPositionPayrollEntity.BiWeekly', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, BiWeekly), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Currency), 'SPYWorkerPositionPayrollEntity.Currency', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Currency), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Daily), 'SPYWorkerPositionPayrollEntity.Daily', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Daily), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Hourly), 'SPYWorkerPositionPayrollEntity.Hourly', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Hourly), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Monthly), 'SPYWorkerPositionPayrollEntity.Monthly', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Monthly), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Quarterly), 'SPYWorkerPositionPayrollEntity.Quarterly', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Quarterly), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, SemiAnnual), 'SPYWorkerPositionPayrollEntity.SemiAnnual', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, SemiAnnual), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidFrom), 'SPYWorkerPositionPayrollEntity.ValidFrom', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, ValidTo), 'SPYWorkerPositionPayrollEntity.ValidTo', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerPositionPayrollEntity, fieldnum(SPYWorkerPositionPayrollEntity, Weekly), 'SPYWorkerPositionPayrollEntity.Weekly', _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Weekly), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYWorkerPositionPayrollEntity, _dataSourceCtx, _sPYWorkerPositionPayroll) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll, SPYWorkerPositionPayroll _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Annual), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Annual), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, BiWeekly), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, BiWeekly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Currency), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Currency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Daily), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Daily), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Hourly), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Hourly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, LegalEntity), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, LegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Monthly), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Monthly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Payroll), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Payroll), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, PayrollPeriod), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, PayrollPeriod), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Position), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Position), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Quarterly), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Quarterly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, SemiAnnual), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, SemiAnnual), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidFrom), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, ValidTo), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Weekly), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Weekly), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerPositionPayroll, fieldnum(SPYWorkerPositionPayroll, Worker), _matchingRecord, fieldnum(SPYWorkerPositionPayroll, Worker), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _sPYWorkerPositionPayroll, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _companyInfo, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, HcmPosition _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _hcmPosition, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _hcmWorker, _matchingRecord);
    }
    private void mapToMatchingRecord_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollPeriod _sPYPayrollPeriod, SPYPayrollPeriod _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollPeriod, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), _matchingRecord, fieldnum(SPYPayrollPeriod, PayrollPeriodCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _sPYPayrollPeriod, _matchingRecord);
    }
    private void mapToMatchingRecord_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYPayrollTable _sPYPayrollTable, SPYPayrollTable _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYPayrollTable, fieldnum(SPYPayrollTable, PayElementCode), _matchingRecord, fieldnum(SPYPayrollTable, PayElementCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerPositionPayrollEntity), _sPYPayrollTable, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerPositionPayroll_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPosition_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorker_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYPayrollPeriod_ID:
                this.mapToMatchingRecord_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYPayrollTable_ID:
                this.mapToMatchingRecord_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYExpression')))
        {
            // Inner joined data source configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'SPYPayrollPeriod','SPYExpression'));
        }
    }
    protected int getValidTimeStateUpdateModeForDataSource(DataEntityRuntimeContext _entityCtx, int _dataSourceId, str _dataSourceName)
    {
        int validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
        
        // returns ValidTimeStateUpdate value for date effective data sources.
        
        switch (_dataSourceId)
        {
            case #SPYWorkerPositionPayroll_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            default : validTimeStateUpdate_ = super(_entityCtx,_dataSourceId,_dataSourceName);
        }
        return validTimeStateUpdate_;
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #CompanyInfo_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #HcmWorker_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
            case #SPYPayrollPeriod_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS5(_originalRecord, _updatedRecord);
                break;
            case #SPYPayrollTable_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS6(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYWorkerPositionPayroll', m_SPYWorkerPositionPayroll, this.getDataSourceId('SPYWorkerPositionPayroll'), this.getDataSourceId('SPYWorkerPositionPayroll'), false/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo', m_CompanyInfo, this.getDataSourceId('CompanyInfo'), this.getDataSourceId('CompanyInfo'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPosition', m_HcmPosition, this.getDataSourceId('HcmPosition'), this.getDataSourceId('HcmPosition'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorker', m_HcmWorker, this.getDataSourceId('HcmWorker'), this.getDataSourceId('HcmWorker'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYPayrollPeriod', m_SPYPayrollPeriod, this.getDataSourceId('SPYPayrollPeriod'), this.getDataSourceId('SPYPayrollPeriod'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYPayrollTable', m_SPYPayrollTable, this.getDataSourceId('SPYPayrollTable'), this.getDataSourceId('SPYPayrollTable'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS5(SPYPayrollPeriod _originalRecord, SPYPayrollPeriod _updatedRecord)
    {
        if (_originalRecord.PayrollPeriodCode != _updatedRecord.PayrollPeriodCode)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS6(SPYPayrollTable _originalRecord, SPYPayrollTable _updatedRecord)
    {
        if (_originalRecord.PayElementCode != _updatedRecord.PayElementCode)
        {
            return true;
        }
        return false;
    }
    private SPYWorkerPositionPayroll LookForUniqueKeyMatch_DS1(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, SPYWorkerPositionPayroll _sPYWorkerPositionPayroll)
    {
        SPYWorkerPositionPayroll sPYWorkerPositionPayroll_ = null;
        
        select
            forUpdate
            firstOnly
            // Applying min/max date range since ApplyDateFilter is No for date effective data source.
            validTimeState(minimumDateTime, maximumDateTime)
                sPYWorkerPositionPayroll_
        where
            sPYWorkerPositionPayroll_.Worker == _sPYWorkerPositionPayroll.Worker && sPYWorkerPositionPayroll_.Position == _sPYWorkerPositionPayroll.Position && sPYWorkerPositionPayroll_.LegalEntity == _sPYWorkerPositionPayroll.LegalEntity && sPYWorkerPositionPayroll_.Payroll == _sPYWorkerPositionPayroll.Payroll && sPYWorkerPositionPayroll_.PayrollPeriod == _sPYWorkerPositionPayroll.PayrollPeriod && sPYWorkerPositionPayroll_.ValidFrom == _sPYWorkerPositionPayroll.ValidFrom && sPYWorkerPositionPayroll_.ValidTo == _sPYWorkerPositionPayroll.ValidTo
        ;
        
        if (sPYWorkerPositionPayroll_)
        {
            return sPYWorkerPositionPayroll_;
        }
        
        return sPYWorkerPositionPayroll_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS2(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, CompanyInfo _companyInfo)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }
    private HcmPosition LookForUniqueKeyMatch_DS3(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, HcmPosition _hcmPosition)
    {
        HcmPosition hcmPosition_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmPosition_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                RecId, PositionId
            from
                hcmPosition_
        where
            hcmPosition_.PositionId == _hcmPosition.PositionId
        ;
        
        if (hcmPosition_)
        {
            return hcmPosition_;
        }
        
        return hcmPosition_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS4(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, HcmWorker _hcmWorker)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _hcmWorker.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private SPYPayrollPeriod LookForUniqueKeyMatch_DS5(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, SPYPayrollPeriod _sPYPayrollPeriod)
    {
        SPYPayrollPeriod sPYPayrollPeriod_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayrollPeriod_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PayrollPeriodCode, RecId
            from
                sPYPayrollPeriod_
        where
            sPYPayrollPeriod_.PayrollPeriodCode == _sPYPayrollPeriod.PayrollPeriodCode
        ;
        
        if (sPYPayrollPeriod_)
        {
            return sPYPayrollPeriod_;
        }
        
        return sPYPayrollPeriod_;
    }
    private SPYPayrollTable LookForUniqueKeyMatch_DS6(SPYWorkerPositionPayrollEntity _sPYWorkerPositionPayrollEntity, SPYPayrollTable _sPYPayrollTable)
    {
        SPYPayrollTable sPYPayrollTable_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYPayrollTable_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PayElementCode, RecId
            from
                sPYPayrollTable_
        where
            sPYPayrollTable_.PayElementCode == _sPYPayrollTable.PayElementCode
        ;
        
        if (sPYPayrollTable_)
        {
            return sPYPayrollTable_;
        }
        
        return sPYPayrollTable_;
    }

}

