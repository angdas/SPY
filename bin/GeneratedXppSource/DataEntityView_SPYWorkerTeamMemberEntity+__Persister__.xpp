Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYWorkerTeamMember_ID(1)
    #define.HcmWorker_ID(2)
    #define.TeamMember_ID(3)
    #define.CompanyInfo_FK_ID(4)
    
    // Data source buffers
    SPYWorkerTeamMember m_SPYWorkerTeamMember;
    HcmWorker m_HcmWorker;
    HcmWorker m_TeamMember;
    CompanyInfo m_CompanyInfo_FK;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYWorkerTeamMember'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorker'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('TeamMember'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo_FK'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(HcmWorker _hcmWorker, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,Person)))
        {
            return true;
        }
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorker) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS3(HcmWorker _teamMember, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_teamMember.isFieldSet(fieldnum(HcmWorker,Person)))
        {
            return true;
        }
        if(_teamMember.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _teamMember) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(CompanyInfo _companyInfo_FK, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo_FK.isFieldSet(fieldnum(CompanyInfo,PartyNumber)))
        {
            return true;
        }
        if(_companyInfo_FK.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo_FK) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerTeamMember _sPYWorkerTeamMember)
    {
        HcmWorker hcmWorker_ = _entityCtx.getRuntimeContextByName('HcmWorker').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerTeamMember.Worker != hcmWorker_.RecId)
        {
            _sPYWorkerTeamMember.Worker = hcmWorker_.RecId;
        }
        
        HcmWorker teamMember_ = _entityCtx.getRuntimeContextByName('TeamMember').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYWorkerTeamMember.TeamMember != teamMember_.RecId)
        {
            _sPYWorkerTeamMember.TeamMember = teamMember_.RecId;
        }
        
        CompanyInfo companyInfo_FK_ = _entityCtx.getRuntimeContextByName('CompanyInfo_FK').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo_FK').conflictDetectionInvoked() || companyInfo_FK_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYWorkerTeamMember.LegalEntity != companyInfo_FK_.RecId)
            {
                _sPYWorkerTeamMember.LegalEntity = companyInfo_FK_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYWorkerTeamMember').getDatabaseOperation();
        SPYWorkerTeamMemberEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerTeamMemberEntity, Worker)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerTeamMember'), _entityCtx.getRuntimeContextByName('HcmWorker'), dataSourceDBOperation, 'SPYWorkerTeamMember.Worker', _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerTeamMemberEntity, TeamMember)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerTeamMember'), _entityCtx.getRuntimeContextByName('TeamMember'), dataSourceDBOperation, 'SPYWorkerTeamMember.TeamMember', _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, TeamMember), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYWorkerTeamMemberEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYWorkerTeamMember'), _entityCtx.getRuntimeContextByName('CompanyInfo_FK'), dataSourceDBOperation, 'SPYWorkerTeamMember.LegalEntity', _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYWorkerTeamMember].
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmWorker hcmWorker_ = _dataSourceCtx.getBuffer();
                        if((hcmWorker_.Person) || (hcmWorker_.PersonnelNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [TeamMember]
                if(!this.preSaveDataSource(_entityCtx, 'TeamMember'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('TeamMember');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        HcmWorker teamMember_ = _dataSourceCtx.getBuffer();
                        if((teamMember_.Person) || (teamMember_.PersonnelNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [TeamMember].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo_FK]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo_FK');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        CompanyInfo companyInfo_FK_ = _dataSourceCtx.getBuffer();
                        if((companyInfo_FK_.DataArea) || (companyInfo_FK_.PartyNumber))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [CompanyInfo_FK].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerTeamMember]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerTeamMember'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerTeamMember');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYWorkerTeamMember].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYWorkerTeamMember]
            if(!this.preSaveDataSource(_entityCtx, 'SPYWorkerTeamMember'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYWorkerTeamMember');
            // deletes data source [SPYWorkerTeamMember].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYWorkerTeamMember].
            {
                // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmWorker].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [TeamMember]
                if(!this.preSaveDataSource(_entityCtx, 'TeamMember'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('TeamMember');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [TeamMember].
                if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
                {
                    // returns from here if an inner joined data source fails to be saved.
                    return false;
                }
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [CompanyInfo_FK]
                if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo_FK'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo_FK');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [CompanyInfo_FK].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerTeamMember _sPYWorkerTeamMember, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, Worker), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, TeamMember), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidTo), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidFrom), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, LegalEntity), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, LegalEntity), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYWorkerTeamMember, _sPYWorkerTeamMemberEntity);
        _sPYWorkerTeamMember.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_Person), _hcmWorker, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_PersonnelNumber), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerTeamMemberEntity);
        _hcmWorker.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _teamMember, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember_Person), _teamMember, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember_PersonnelNumber), _teamMember, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _teamMember, _sPYWorkerTeamMemberEntity);
        _teamMember.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo_FK, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_PartyNumber), _companyInfo_FK, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_DataArea), _companyInfo_FK, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo_FK, _sPYWorkerTeamMemberEntity);
        _companyInfo_FK.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #TeamMember_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_FK_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerTeamMember _sPYWorkerTeamMember, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, Worker), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, Worker), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, TeamMember), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidTo), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidTo), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidFrom), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, LegalEntity), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, LegalEntity), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYWorkerTeamMember, _sPYWorkerTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYWorkerTeamMember);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, Person), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_Person), false);
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_PersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorker, _sPYWorkerTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorker);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _teamMember, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_teamMember, fieldnum(HcmWorker, Person), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember_Person), false);
        this.mapDataSourceFieldToEntityField(_teamMember, fieldnum(HcmWorker, PersonnelNumber), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, TeamMember_PersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _teamMember, _sPYWorkerTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _teamMember);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo_FK, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo_FK, fieldnum(CompanyInfo, PartyNumber), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_PartyNumber), false);
        this.mapDataSourceFieldToEntityField(_companyInfo_FK, fieldnum(CompanyInfo, DataArea), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_DataArea), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo_FK, _sPYWorkerTeamMemberEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYWorkerTeamMemberEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo_FK);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #TeamMember_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_FK_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #TeamMember_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo_FK_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, Worker)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, TeamMember)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, ValidTo)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, LegalEntity)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_Person)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, HcmWorker_PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, TeamMember_Person)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, TeamMember_PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_PartyNumber)))
        {
            return true;
        }
        if(_sPYWorkerTeamMemberEntity.isFieldSet(fieldnum(SPYWorkerTeamMemberEntity, CompanyInfo_FK_DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYWorkerTeamMemberEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #TeamMember_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_FK_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerTeamMember _sPYWorkerTeamMember)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidTo), 'SPYWorkerTeamMemberEntity.ValidTo', _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYWorkerTeamMemberEntity, fieldnum(SPYWorkerTeamMemberEntity, ValidFrom), 'SPYWorkerTeamMemberEntity.ValidFrom', _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYWorkerTeamMemberEntity, _dataSourceCtx, _sPYWorkerTeamMember) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYWorkerTeamMember _sPYWorkerTeamMember, SPYWorkerTeamMember _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, Worker), _matchingRecord, fieldnum(SPYWorkerTeamMember, Worker), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, TeamMember), _matchingRecord, fieldnum(SPYWorkerTeamMember, TeamMember), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidTo), _matchingRecord, fieldnum(SPYWorkerTeamMember, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, ValidFrom), _matchingRecord, fieldnum(SPYWorkerTeamMember, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYWorkerTeamMember, fieldnum(SPYWorkerTeamMember, LegalEntity), _matchingRecord, fieldnum(SPYWorkerTeamMember, LegalEntity), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerTeamMemberEntity), _sPYWorkerTeamMember, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, Person), _matchingRecord, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerTeamMemberEntity), _hcmWorker, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _teamMember, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _teamMember, fieldnum(HcmWorker, Person), _matchingRecord, fieldnum(HcmWorker, Person), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _teamMember, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerTeamMemberEntity), _teamMember, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo_FK, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo_FK, fieldnum(CompanyInfo, PartyNumber), _matchingRecord, fieldnum(CompanyInfo, PartyNumber), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo_FK, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYWorkerTeamMemberEntity), _companyInfo_FK, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYWorkerTeamMember_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorker_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #TeamMember_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo_FK_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected int getValidTimeStateUpdateModeForDataSource(DataEntityRuntimeContext _entityCtx, int _dataSourceId, str _dataSourceName)
    {
        int validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
        
        // returns ValidTimeStateUpdate value for date effective data sources.
        
        switch (_dataSourceId)
        {
            case #SPYWorkerTeamMember_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            default : validTimeStateUpdate_ = super(_entityCtx,_dataSourceId,_dataSourceName);
        }
        return validTimeStateUpdate_;
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #HcmWorker_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #TeamMember_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
            case #CompanyInfo_FK_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYWorkerTeamMember', m_SPYWorkerTeamMember, this.getDataSourceId('SPYWorkerTeamMember'), this.getDataSourceId('SPYWorkerTeamMember'), false/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorker', m_HcmWorker, this.getDataSourceId('HcmWorker'), this.getDataSourceId('HcmWorker'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'TeamMember', m_TeamMember, this.getDataSourceId('TeamMember'), this.getDataSourceId('TeamMember'), false/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo_FK', m_CompanyInfo_FK, this.getDataSourceId('CompanyInfo_FK'), this.getDataSourceId('CompanyInfo_FK'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.Person != _updatedRecord.Person)
        {
            return true;
        }
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.Person != _updatedRecord.Person)
        {
            return true;
        }
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.PartyNumber != _updatedRecord.PartyNumber)
        {
            return true;
        }
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private SPYWorkerTeamMember LookForUniqueKeyMatch_DS1(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, SPYWorkerTeamMember _sPYWorkerTeamMember)
    {
        SPYWorkerTeamMember sPYWorkerTeamMember_ = null;
        
        select
            forUpdate
            firstOnly
            // Applying min/max date range since ApplyDateFilter is No for date effective data source.
            validTimeState(minimumDateTime, maximumDateTime)
                sPYWorkerTeamMember_
        where
            sPYWorkerTeamMember_.Worker == _sPYWorkerTeamMember.Worker && sPYWorkerTeamMember_.TeamMember == _sPYWorkerTeamMember.TeamMember && sPYWorkerTeamMember_.ValidTo == _sPYWorkerTeamMember.ValidTo && sPYWorkerTeamMember_.ValidFrom == _sPYWorkerTeamMember.ValidFrom && sPYWorkerTeamMember_.LegalEntity == _sPYWorkerTeamMember.LegalEntity
        ;
        
        if (sPYWorkerTeamMember_)
        {
            return sPYWorkerTeamMember_;
        }
        
        return sPYWorkerTeamMember_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS2(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, HcmWorker _hcmWorker)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.Person == _hcmWorker.Person
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _hcmWorker.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS3(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, HcmWorker _teamMember)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.Person == _teamMember.Person
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Person, PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _teamMember.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS4(SPYWorkerTeamMemberEntity _sPYWorkerTeamMemberEntity, CompanyInfo _companyInfo_FK)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo_FK.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PartyNumber, DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.PartyNumber == _companyInfo_FK.PartyNumber
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }

}

