Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.SPYAirFare_ID(1)
    #define.SPYAirClass_ID(2)
    #define.SPYAirFareCity_ID(3)
    #define.LogisticsAddressCityDestination_ID(4)
    #define.LogisticsAddressCityOrigin_ID(5)
    
    // Data source buffers
    SPYAirFare m_SPYAirFare;
    SPYAirClass m_SPYAirClass;
    SPYAirFareCity m_SPYAirFareCity;
    LogisticsAddressCity m_LogisticsAddressCityDestination;
    LogisticsAddressCity m_LogisticsAddressCityOrigin;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAirFare'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAirClass'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('SPYAirFareCity'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(SPYAirClass _sPYAirClass, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYAirClass.isFieldSet(fieldnum(SPYAirClass,AirClassCode)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYAirClass) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(LogisticsAddressCity _logisticsAddressCityDestination, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_logisticsAddressCityDestination.isFieldSet(fieldnum(LogisticsAddressCity,Name)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _logisticsAddressCityDestination) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS5(LogisticsAddressCity _logisticsAddressCityOrigin, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_logisticsAddressCityOrigin.isFieldSet(fieldnum(LogisticsAddressCity,Name)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _logisticsAddressCityOrigin) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS3(DataEntityRuntimeContext _entityCtx, SPYAirFareCity _sPYAirFareCity)
    {
        LogisticsAddressCity logisticsAddressCityDestination_ = _entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination').conflictDetectionInvoked() || logisticsAddressCityDestination_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYAirFareCity.DestinationCity != logisticsAddressCityDestination_.RecId)
            {
                _sPYAirFareCity.DestinationCity = logisticsAddressCityDestination_.RecId;
            }
        }
        
        LogisticsAddressCity logisticsAddressCityOrigin_ = _entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin').conflictDetectionInvoked() || logisticsAddressCityOrigin_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYAirFareCity.OriginCity != logisticsAddressCityOrigin_.RecId)
            {
                _sPYAirFareCity.OriginCity = logisticsAddressCityOrigin_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYAirFareCity').getDatabaseOperation();
        SPYAirFareEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAirFareEntity, SPYAirFareCity_DestinationCity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYAirFareCity'), _entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination'), dataSourceDBOperation, 'SPYAirFareCity.DestinationCity', _sPYAirFareCity, fieldnum(SPYAirFareCity, DestinationCity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAirFareEntity, SPYAirFareCity_OriginCity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYAirFareCity'), _entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin'), dataSourceDBOperation, 'SPYAirFareCity.OriginCity', _sPYAirFareCity, fieldnum(SPYAirFareCity, OriginCity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS3(SPYAirFareCity _sPYAirFareCity, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_sPYAirFareCity.isFieldSet(fieldnum(SPYAirFareCity,DestinationCity)))
        {
            return true;
        }
        if(_sPYAirFareCity.isFieldSet(fieldnum(SPYAirFareCity,OriginCity)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _sPYAirFareCity) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS1(DataEntityRuntimeContext _entityCtx, SPYAirFare _sPYAirFare)
    {
        SPYAirClass sPYAirClass_ = _entityCtx.getRuntimeContextByName('SPYAirClass').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('SPYAirClass').conflictDetectionInvoked() || sPYAirClass_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_sPYAirFare.AirClass != sPYAirClass_.RecId)
            {
                _sPYAirFare.AirClass = sPYAirClass_.RecId;
            }
        }
        
        SPYAirFareCity sPYAirFareCity_ = _entityCtx.getRuntimeContextByName('SPYAirFareCity').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_sPYAirFare.AirFareCity != sPYAirFareCity_.RecId)
        {
            _sPYAirFare.AirFareCity = sPYAirFareCity_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('SPYAirFare').getDatabaseOperation();
        SPYAirFareEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAirFareEntity, AirClass)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYAirFare'), _entityCtx.getRuntimeContextByName('SPYAirClass'), dataSourceDBOperation, 'SPYAirFare.AirClass', _sPYAirFare, fieldnum(SPYAirFare, AirClass), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(SPYAirFareEntity, AirFareCity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('SPYAirFare'), _entityCtx.getRuntimeContextByName('SPYAirFareCity'), dataSourceDBOperation, 'SPYAirFare.AirFareCity', _sPYAirFare, fieldnum(SPYAirFare, AirFareCity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // save/update data sources referenced by [SPYAirFare].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAirClass]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAirClass'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirClass');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                if(this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        SPYAirClass sPYAirClass_ = _dataSourceCtx.getBuffer();
                        if((sPYAirClass_.AirClassCode))
                        {
                            checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [SPYAirClass].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // save/update data sources referenced by [SPYAirFareCity].
                {
                    // handle datasources which are part of extensions and need to be saved before [LogisticsAddressCityDestination]
                    if(!this.preSaveDataSource(_entityCtx, 'LogisticsAddressCityDestination'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            LogisticsAddressCity logisticsAddressCityDestination_ = _dataSourceCtx.getBuffer();
                            if((logisticsAddressCityDestination_.CityKey))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [LogisticsAddressCityDestination].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [LogisticsAddressCityOrigin]
                    if(!this.preSaveDataSource(_entityCtx, 'LogisticsAddressCityOrigin'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS5(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            LogisticsAddressCity logisticsAddressCityOrigin_ = _dataSourceCtx.getBuffer();
                            if((logisticsAddressCityOrigin_.CityKey))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [LogisticsAddressCityOrigin].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [SPYAirFareCity]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAirFareCity'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirFareCity');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS3(_entityCtx, _dataSourceCtx.getBuffer());
                // invoke conflict detection for data source that's on the 1 side of 1:N or N:1 relationship.
                this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [SPYAirFareCity].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            // handle datasources which are part of extensions and need to be saved before [SPYAirFare]
            if(!this.preSaveDataSource(_entityCtx, 'SPYAirFare'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirFare');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // propagates foreign key values from referenced data sources.
            this.foreignKeyPropagation_DS1(_entityCtx, _dataSourceCtx.getBuffer());
            // inserts/updates data source [SPYAirFare].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [SPYAirFare]
            if(!this.preSaveDataSource(_entityCtx, 'SPYAirFare'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirFare');
            // deletes data source [SPYAirFare].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // deletes data sources referenced by [SPYAirFare].
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAirClass]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAirClass'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirClass');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYAirClass].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [SPYAirFareCity]
                if(!this.preSaveDataSource(_entityCtx, 'SPYAirFareCity'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('SPYAirFareCity');
                // skips delete operation against data source that's on the 1 side of 1:N or N:1 relationship.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [SPYAirFareCity].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [SPYAirFareCity].
                {
                    // handle datasources which are part of extensions and need to be saved before [LogisticsAddressCityDestination]
                    if(!this.preSaveDataSource(_entityCtx, 'LogisticsAddressCityDestination'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('LogisticsAddressCityDestination');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [LogisticsAddressCityDestination].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [LogisticsAddressCityOrigin]
                    if(!this.preSaveDataSource(_entityCtx, 'LogisticsAddressCityOrigin'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('LogisticsAddressCityOrigin');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [LogisticsAddressCityOrigin].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFare _sPYAirFare, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirClass), _sPYAirFare, fieldnum(SPYAirFare, AirClass), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirFareCity), _sPYAirFare, fieldnum(SPYAirFare, AirFareCity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirFareType), _sPYAirFare, fieldnum(SPYAirFare, AirFareType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, Amount), _sPYAirFare, fieldnum(SPYAirFare, Amount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, CurrencyCode), _sPYAirFare, fieldnum(SPYAirFare, CurrencyCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidFrom), _sPYAirFare, fieldnum(SPYAirFare, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidTo), _sPYAirFare, fieldnum(SPYAirFare, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAirFare, _sPYAirFareEntity);
        _sPYAirFare.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirClass _sPYAirClass, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirClass_AirClassCode), _sPYAirClass, fieldnum(SPYAirClass, AirClassCode), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAirClass, _sPYAirFareEntity);
        _sPYAirClass.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFareCity _sPYAirFareCity, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirFareCity_DestinationCity), _sPYAirFareCity, fieldnum(SPYAirFareCity, DestinationCity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirFareCity_OriginCity), _sPYAirFareCity, fieldnum(SPYAirFareCity, OriginCity), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _sPYAirFareCity, _sPYAirFareEntity);
        _sPYAirFareCity.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityDestination, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, LogisticsAddressCityDestination_Name), _logisticsAddressCityDestination, fieldnum(LogisticsAddressCity, Name), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _logisticsAddressCityDestination, _sPYAirFareEntity);
        _logisticsAddressCityDestination.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS5(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityOrigin, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, LogisticsAddressCityOrigin_Name), _logisticsAddressCityOrigin, fieldnum(LogisticsAddressCity, Name), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _logisticsAddressCityOrigin, _sPYAirFareEntity);
        _logisticsAddressCityOrigin.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAirClass_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAirFareCity_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityDestination_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityOrigin_ID:
                this.mapToDataSource_DS5(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFare _sPYAirFare, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, AirClass), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirClass), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, AirFareCity), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirFareCity), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, AirFareType), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirFareType), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, Amount), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, Amount), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, CurrencyCode), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, CurrencyCode), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, ValidFrom), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidFrom), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFare, fieldnum(SPYAirFare, ValidTo), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidTo), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAirFare, _sPYAirFareEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAirFareEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAirFare);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirClass _sPYAirClass, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAirClass, fieldnum(SPYAirClass, AirClassCode), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirClass_AirClassCode), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAirClass, _sPYAirFareEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAirFareEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAirClass);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFareCity _sPYAirFareCity, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapDataSourceFieldToEntityField(_sPYAirFareCity, fieldnum(SPYAirFareCity, DestinationCity), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirFareCity_DestinationCity), false);
        this.mapDataSourceFieldToEntityField(_sPYAirFareCity, fieldnum(SPYAirFareCity, OriginCity), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, SPYAirFareCity_OriginCity), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _sPYAirFareCity, _sPYAirFareEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAirFareEntity.fromViewDataSource(_dataSourceCtx.id(), _sPYAirFareCity);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityDestination, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapDataSourceFieldToEntityField(_logisticsAddressCityDestination, fieldnum(LogisticsAddressCity, Name), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, LogisticsAddressCityDestination_Name), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _logisticsAddressCityDestination, _sPYAirFareEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAirFareEntity.fromViewDataSource(_dataSourceCtx.id(), _logisticsAddressCityDestination);
    }
    private void mapFromDataSource_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityOrigin, SPYAirFareEntity _sPYAirFareEntity)
    {
        this.mapDataSourceFieldToEntityField(_logisticsAddressCityOrigin, fieldnum(LogisticsAddressCity, Name), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, LogisticsAddressCityOrigin_Name), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _logisticsAddressCityOrigin, _sPYAirFareEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _sPYAirFareEntity.fromViewDataSource(_dataSourceCtx.id(), _logisticsAddressCityOrigin);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAirClass_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #SPYAirFareCity_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityDestination_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityOrigin_ID:
                this.mapFromDataSource_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYAirClass_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #SPYAirFareCity_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #LogisticsAddressCityDestination_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #LogisticsAddressCityOrigin_ID:
                rtrn = this.LookForUniqueKeyMatch_DS5(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(SPYAirFareEntity _sPYAirFareEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, AirClass)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, AirFareCity)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, AirFareType)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, Amount)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, CurrencyCode)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, ValidFrom)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAirFareEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(SPYAirFareEntity _sPYAirFareEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, SPYAirClass_AirClassCode)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAirFareEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(SPYAirFareEntity _sPYAirFareEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, SPYAirFareCity_DestinationCity)))
        {
            return true;
        }
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, SPYAirFareCity_OriginCity)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAirFareEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(SPYAirFareEntity _sPYAirFareEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, LogisticsAddressCityDestination_Name)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAirFareEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS5(SPYAirFareEntity _sPYAirFareEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_sPYAirFareEntity.isFieldSet(fieldnum(SPYAirFareEntity, LogisticsAddressCityOrigin_Name)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_sPYAirFareEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #SPYAirClass_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #SPYAirFareCity_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityDestination_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            case #LogisticsAddressCityOrigin_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS5(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, SPYAirFareEntity _sPYAirFareEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFare _sPYAirFare)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, AirFareType), 'SPYAirFareEntity.AirFareType', _sPYAirFare, fieldnum(SPYAirFare, AirFareType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, Amount), 'SPYAirFareEntity.Amount', _sPYAirFare, fieldnum(SPYAirFare, Amount), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, CurrencyCode), 'SPYAirFareEntity.CurrencyCode', _sPYAirFare, fieldnum(SPYAirFare, CurrencyCode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidFrom), 'SPYAirFareEntity.ValidFrom', _sPYAirFare, fieldnum(SPYAirFare, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _sPYAirFareEntity, fieldnum(SPYAirFareEntity, ValidTo), 'SPYAirFareEntity.ValidTo', _sPYAirFare, fieldnum(SPYAirFare, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYAirFareEntity, _dataSourceCtx, _sPYAirFare) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS3(DataEntityRuntimeContext _entityCtx, SPYAirFareEntity _sPYAirFareEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFareCity _sPYAirFareCity)
    {
        boolean rtrn = true;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _sPYAirFareEntity, _dataSourceCtx, _sPYAirFareCity) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #SPYAirFareCity_ID:
                rtrn = this.validateDataSource_DS3(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFare _sPYAirFare, SPYAirFare _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, AirClass), _matchingRecord, fieldnum(SPYAirFare, AirClass), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, AirFareCity), _matchingRecord, fieldnum(SPYAirFare, AirFareCity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, AirFareType), _matchingRecord, fieldnum(SPYAirFare, AirFareType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, Amount), _matchingRecord, fieldnum(SPYAirFare, Amount), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, CurrencyCode), _matchingRecord, fieldnum(SPYAirFare, CurrencyCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, ValidFrom), _matchingRecord, fieldnum(SPYAirFare, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFare, fieldnum(SPYAirFare, ValidTo), _matchingRecord, fieldnum(SPYAirFare, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAirFareEntity), _sPYAirFare, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirClass _sPYAirClass, SPYAirClass _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirClass, fieldnum(SPYAirClass, AirClassCode), _matchingRecord, fieldnum(SPYAirClass, AirClassCode), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAirFareEntity), _sPYAirClass, _matchingRecord);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, SPYAirFareCity _sPYAirFareCity, SPYAirFareCity _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareCity, fieldnum(SPYAirFareCity, DestinationCity), _matchingRecord, fieldnum(SPYAirFareCity, DestinationCity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _sPYAirFareCity, fieldnum(SPYAirFareCity, OriginCity), _matchingRecord, fieldnum(SPYAirFareCity, OriginCity), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAirFareEntity), _sPYAirFareCity, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityDestination, LogisticsAddressCity _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _logisticsAddressCityDestination, fieldnum(LogisticsAddressCity, Name), _matchingRecord, fieldnum(LogisticsAddressCity, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAirFareEntity), _logisticsAddressCityDestination, _matchingRecord);
    }
    private void mapToMatchingRecord_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsAddressCity _logisticsAddressCityOrigin, LogisticsAddressCity _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _logisticsAddressCityOrigin, fieldnum(LogisticsAddressCity, Name), _matchingRecord, fieldnum(LogisticsAddressCity, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(SPYAirFareEntity), _logisticsAddressCityOrigin, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #SPYAirFare_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYAirClass_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #SPYAirFareCity_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #LogisticsAddressCityDestination_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #LogisticsAddressCityOrigin_ID:
                this.mapToMatchingRecord_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        // Ensure that the entity configuration key is enabled
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('SPYPayroll')))
        {
            // Entity configuration key is disabled
            throw error(strfmt("@ApplicationPlatform:DataEntityConfigKeyDisabled",'SPYPayroll'));
        }
    }
    protected int getValidTimeStateUpdateModeForDataSource(DataEntityRuntimeContext _entityCtx, int _dataSourceId, str _dataSourceName)
    {
        int validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
        
        // returns ValidTimeStateUpdate value for date effective data sources.
        
        switch (_dataSourceId)
        {
            case #SPYAirFare_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            default : validTimeStateUpdate_ = super(_entityCtx,_dataSourceId,_dataSourceName);
        }
        return validTimeStateUpdate_;
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #SPYAirClass_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS2(_originalRecord, _updatedRecord);
                break;
            case #SPYAirFareCity_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
            case #LogisticsAddressCityDestination_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
            case #LogisticsAddressCityOrigin_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS5(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'SPYAirFare', m_SPYAirFare, this.getDataSourceId('SPYAirFare'), this.getDataSourceId('SPYAirFare'), false/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYAirClass', m_SPYAirClass, this.getDataSourceId('SPYAirClass'), this.getDataSourceId('SPYAirClass'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'SPYAirFareCity', m_SPYAirFareCity, this.getDataSourceId('SPYAirFareCity'), this.getDataSourceId('SPYAirFareCity'), true/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'LogisticsAddressCityDestination', m_LogisticsAddressCityDestination, this.getDataSourceId('LogisticsAddressCityDestination'), this.getDataSourceId('LogisticsAddressCityDestination'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'LogisticsAddressCityOrigin', m_LogisticsAddressCityOrigin, this.getDataSourceId('LogisticsAddressCityOrigin'), this.getDataSourceId('LogisticsAddressCityOrigin'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS2(SPYAirClass _originalRecord, SPYAirClass _updatedRecord)
    {
        if (_originalRecord.AirClassCode != _updatedRecord.AirClassCode)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(SPYAirFareCity _originalRecord, SPYAirFareCity _updatedRecord)
    {
        if (_originalRecord.DestinationCity != _updatedRecord.DestinationCity)
        {
            return true;
        }
        if (_originalRecord.OriginCity != _updatedRecord.OriginCity)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(LogisticsAddressCity _originalRecord, LogisticsAddressCity _updatedRecord)
    {
        if (_originalRecord.Name != _updatedRecord.Name)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS5(LogisticsAddressCity _originalRecord, LogisticsAddressCity _updatedRecord)
    {
        if (_originalRecord.Name != _updatedRecord.Name)
        {
            return true;
        }
        return false;
    }
    private SPYAirFare LookForUniqueKeyMatch_DS1(SPYAirFareEntity _sPYAirFareEntity, SPYAirFare _sPYAirFare)
    {
        SPYAirFare sPYAirFare_ = null;
        
        select
            forUpdate
            firstOnly
            // Applying min/max date range since ApplyDateFilter is No for date effective data source.
            validTimeState(minimumDateTime, maximumDateTime)
                sPYAirFare_
        where
            sPYAirFare_.AirFareCity == _sPYAirFare.AirFareCity && sPYAirFare_.ValidFrom == _sPYAirFare.ValidFrom && sPYAirFare_.ValidTo == _sPYAirFare.ValidTo && sPYAirFare_.AirFareType == _sPYAirFare.AirFareType && sPYAirFare_.AirClass == _sPYAirFare.AirClass
        ;
        
        if (sPYAirFare_)
        {
            return sPYAirFare_;
        }
        
        return sPYAirFare_;
    }
    private SPYAirClass LookForUniqueKeyMatch_DS2(SPYAirFareEntity _sPYAirFareEntity, SPYAirClass _sPYAirClass)
    {
        SPYAirClass sPYAirClass_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        sPYAirClass_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                AirClassCode, RecId
            from
                sPYAirClass_
        where
            sPYAirClass_.AirClassCode == _sPYAirClass.AirClassCode
        ;
        
        if (sPYAirClass_)
        {
            return sPYAirClass_;
        }
        
        return sPYAirClass_;
    }
    private SPYAirFareCity LookForUniqueKeyMatch_DS3(SPYAirFareEntity _sPYAirFareEntity, SPYAirFareCity _sPYAirFareCity)
    {
        SPYAirFareCity sPYAirFareCity_ = null;
        
        select
            forUpdate
            firstOnly
                sPYAirFareCity_
        where
            sPYAirFareCity_.DestinationCity == _sPYAirFareCity.DestinationCity && sPYAirFareCity_.OriginCity == _sPYAirFareCity.OriginCity
        ;
        
        if (sPYAirFareCity_)
        {
            return sPYAirFareCity_;
        }
        
        return sPYAirFareCity_;
    }
    private LogisticsAddressCity LookForUniqueKeyMatch_DS4(SPYAirFareEntity _sPYAirFareEntity, LogisticsAddressCity _logisticsAddressCityDestination)
    {
        LogisticsAddressCity logisticsAddressCity_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        logisticsAddressCity_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Name, RecId
            from
                logisticsAddressCity_
        where
            logisticsAddressCity_.RecId == _logisticsAddressCityDestination.RecId
        ;
        
        if (logisticsAddressCity_)
        {
            return logisticsAddressCity_;
        }
        
        return logisticsAddressCity_;
    }
    private LogisticsAddressCity LookForUniqueKeyMatch_DS5(SPYAirFareEntity _sPYAirFareEntity, LogisticsAddressCity _logisticsAddressCityOrigin)
    {
        LogisticsAddressCity logisticsAddressCity_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        logisticsAddressCity_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Name, RecId
            from
                logisticsAddressCity_
        where
            logisticsAddressCity_.RecId == _logisticsAddressCityOrigin.RecId
        ;
        
        if (logisticsAddressCity_)
        {
            return logisticsAddressCity_;
        }
        
        return logisticsAddressCity_;
    }

}

