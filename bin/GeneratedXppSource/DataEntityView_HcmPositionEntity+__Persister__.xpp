Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.HcmPosition_ID(1)
    #define.HcmPositionDetail_ID(2)
    #define.OMOperatingUnit_ID(3)
    #define.HcmCompLocation_ID(4)
    #define.HcmJob_ID(5)
    #define.HcmPositionType_ID(6)
    #define.HcmTitle_ID(7)
    #define.HcmPositionDuration_ID(8)
    #define.HcmPositionWorkerAssignment_ID(9)
    #define.HcmWorker_ID(10)
    #define.DirPerson_ID(11)
    #define.HcmReasonCode_ID(12)
    #define.HcmWorkerPrimaryPositionAssignmentView_ID(13)
    #define.HcmPositionUnionAgreement_ID(14)
    #define.HcmUnionAgreement_ID(15)
    #define.HcmUnions_ID(16)
    #define.CompanyInfo_ID(17)
    #define.HcmPositionLineHierarchyView_ID(18)
    #define.HcmLineParentPosition_ID(19)
    #define.PayrollPositionDetails_ID(20)
    #define.CompanyInfoPositionDetails_ID(21)
    #define.PayrollPayCycle_ID(22)
    
    // Data source buffers
    HcmPosition m_HcmPosition;
    HcmPositionDetail m_HcmPositionDetail;
    OMOperatingUnit m_OMOperatingUnit;
    HcmCompLocation m_HcmCompLocation;
    HcmJob m_HcmJob;
    HcmPositionType m_HcmPositionType;
    HcmTitle m_HcmTitle;
    HcmPositionDuration m_HcmPositionDuration;
    HcmPositionWorkerAssignment m_HcmPositionWorkerAssignment;
    HcmWorker m_HcmWorker;
    DirPerson m_DirPerson;
    HcmReasonCode m_HcmReasonCode;
    HcmWorkerPrimaryPositionAssignmentView m_HcmWorkerPrimaryPositionAssignmentView;
    HcmPositionUnionAgreement m_HcmPositionUnionAgreement;
    HcmUnionAgreement m_HcmUnionAgreement;
    HcmUnions m_HcmUnions;
    CompanyInfo m_CompanyInfo;
    HcmPositionLineHierarchyView m_HcmPositionLineHierarchyView;
    HcmPosition m_HcmLineParentPosition;
    PayrollPositionDetails m_PayrollPositionDetails;
    CompanyInfo m_CompanyInfoPositionDetails;
    PayrollPayCycle m_PayrollPayCycle;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPosition'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionDetail'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('OMOperatingUnit'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmCompLocation'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmJob'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionType'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmTitle'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionDuration'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorker'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('DirPerson'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmReasonCode'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmWorkerPrimaryPositionAssignmentView'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmUnionAgreement'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmUnions'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfo'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('HcmLineParentPosition'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('PayrollPositionDetails'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('CompanyInfoPositionDetails'));
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('PayrollPayCycle'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS3(OMOperatingUnit _oMOperatingUnit, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_oMOperatingUnit.isFieldSet(fieldnum(OMOperatingUnit,OMOperatingUnitNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _oMOperatingUnit) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS4(HcmCompLocation _hcmCompLocation, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmCompLocation.isFieldSet(fieldnum(HcmCompLocation,CompLocationId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmCompLocation) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS5(HcmJob _hcmJob, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmJob.isFieldSet(fieldnum(HcmJob,JobId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmJob) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS6(HcmPositionType _hcmPositionType, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionType.isFieldSet(fieldnum(HcmPositionType,TypeId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionType) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS7(HcmTitle _hcmTitle, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmTitle.isFieldSet(fieldnum(HcmTitle,TitleId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmTitle) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS2(DataEntityRuntimeContext _entityCtx, HcmPositionDetail _hcmPositionDetail)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPositionDetail.Position != hcmPosition_.RecId)
        {
            _hcmPositionDetail.Position = hcmPosition_.RecId;
        }
        
        OMOperatingUnit oMOperatingUnit_ = _entityCtx.getRuntimeContextByName('OMOperatingUnit').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('OMOperatingUnit').conflictDetectionInvoked() || oMOperatingUnit_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionDetail.Department != oMOperatingUnit_.RecId)
            {
                _hcmPositionDetail.Department = oMOperatingUnit_.RecId;
            }
        }
        
        HcmCompLocation hcmCompLocation_ = _entityCtx.getRuntimeContextByName('HcmCompLocation').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmCompLocation').conflictDetectionInvoked() || hcmCompLocation_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionDetail.CompLocation != hcmCompLocation_.RecId)
            {
                _hcmPositionDetail.CompLocation = hcmCompLocation_.RecId;
            }
        }
        
        HcmJob hcmJob_ = _entityCtx.getRuntimeContextByName('HcmJob').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmJob').conflictDetectionInvoked() || hcmJob_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionDetail.Job != hcmJob_.RecId)
            {
                _hcmPositionDetail.Job = hcmJob_.RecId;
            }
        }
        
        HcmPositionType hcmPositionType_ = _entityCtx.getRuntimeContextByName('HcmPositionType').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmPositionType').conflictDetectionInvoked() || hcmPositionType_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionDetail.PositionType != hcmPositionType_.RecId)
            {
                _hcmPositionDetail.PositionType = hcmPositionType_.RecId;
            }
        }
        
        HcmTitle hcmTitle_ = _entityCtx.getRuntimeContextByName('HcmTitle').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmTitle').conflictDetectionInvoked() || hcmTitle_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionDetail.Title != hcmTitle_.RecId)
            {
                _hcmPositionDetail.Title = hcmTitle_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPositionDetail').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'HcmPositionDetail.Position', _hcmPositionDetail, fieldnum(HcmPositionDetail, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, Department)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('OMOperatingUnit'), dataSourceDBOperation, 'HcmPositionDetail.Department', _hcmPositionDetail, fieldnum(HcmPositionDetail, Department), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, CompensationRegion)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('HcmCompLocation'), dataSourceDBOperation, 'HcmPositionDetail.CompLocation', _hcmPositionDetail, fieldnum(HcmPositionDetail, CompLocation), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, Job)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('HcmJob'), dataSourceDBOperation, 'HcmPositionDetail.Job', _hcmPositionDetail, fieldnum(HcmPositionDetail, Job), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, PositionType)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('HcmPositionType'), dataSourceDBOperation, 'HcmPositionDetail.PositionType', _hcmPositionDetail, fieldnum(HcmPositionDetail, PositionType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, Title)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDetail'), _entityCtx.getRuntimeContextByName('HcmTitle'), dataSourceDBOperation, 'HcmPositionDetail.Title', _hcmPositionDetail, fieldnum(HcmPositionDetail, Title), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS2(HcmPositionDetail _hcmPositionDetail, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,AvailableForAssignment)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,CompLocation)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,Department)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,Description)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,FullTimeEquivalency)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,Job)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,PositionType)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,Title)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,ValidFrom)))
        {
            return true;
        }
        if(_hcmPositionDetail.isFieldSet(fieldnum(HcmPositionDetail,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionDetail) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS8(DataEntityRuntimeContext _entityCtx, HcmPositionDuration _hcmPositionDuration)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPositionDuration.Position != hcmPosition_.RecId)
        {
            _hcmPositionDuration.Position = hcmPosition_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPositionDuration').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionDuration'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'HcmPositionDuration.Position', _hcmPositionDuration, fieldnum(HcmPositionDuration, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS8(HcmPositionDuration _hcmPositionDuration, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionDuration.isFieldSet(fieldnum(HcmPositionDuration,ValidFrom)))
        {
            return true;
        }
        if(_hcmPositionDuration.isFieldSet(fieldnum(HcmPositionDuration,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionDuration) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS11(DirPerson _dirPerson, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_dirPerson.isFieldSet(fieldnum(DirPerson,Name)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _dirPerson) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS10(DataEntityRuntimeContext _entityCtx, HcmWorker _hcmWorker)
    {
        DirPerson dirPerson_ = _entityCtx.getRuntimeContextByName('DirPerson').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('DirPerson').conflictDetectionInvoked() || dirPerson_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmWorker.Person != dirPerson_.RecId)
            {
                _hcmWorker.Person = dirPerson_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmWorker').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmWorker'), _entityCtx.getRuntimeContextByName('DirPerson'), dataSourceDBOperation, 'HcmWorker.Person', _hcmWorker, fieldnum(HcmWorker, Person), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS10(HcmWorker _hcmWorker, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorker.isFieldSet(fieldnum(HcmWorker,PersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorker) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS12(HcmReasonCode _hcmReasonCode, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmReasonCode.isFieldSet(fieldnum(HcmReasonCode,ReasonCodeId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmReasonCode) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS9(DataEntityRuntimeContext _entityCtx, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPositionWorkerAssignment.Position != hcmPosition_.RecId)
        {
            _hcmPositionWorkerAssignment.Position = hcmPosition_.RecId;
        }
        
        HcmWorker hcmWorker_ = _entityCtx.getRuntimeContextByName('HcmWorker').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmWorker').conflictDetectionInvoked() || hcmWorker_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionWorkerAssignment.Worker != hcmWorker_.RecId)
            {
                _hcmPositionWorkerAssignment.Worker = hcmWorker_.RecId;
            }
        }
        
        HcmReasonCode hcmReasonCode_ = _entityCtx.getRuntimeContextByName('HcmReasonCode').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmReasonCode').conflictDetectionInvoked() || hcmReasonCode_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionWorkerAssignment.AssignmentReasonCode != hcmReasonCode_.RecId)
            {
                _hcmPositionWorkerAssignment.AssignmentReasonCode = hcmReasonCode_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'HcmPositionWorkerAssignment.Position', _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, Worker)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment'), _entityCtx.getRuntimeContextByName('HcmWorker'), dataSourceDBOperation, 'HcmPositionWorkerAssignment.Worker', _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Worker), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, WorkerAssignmentReasonCode)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment'), _entityCtx.getRuntimeContextByName('HcmReasonCode'), dataSourceDBOperation, 'HcmPositionWorkerAssignment.AssignmentReasonCode', _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, AssignmentReasonCode), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS9(HcmPositionWorkerAssignment _hcmPositionWorkerAssignment, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionWorkerAssignment.isFieldSet(fieldnum(HcmPositionWorkerAssignment,AssignmentReasonCode)))
        {
            return true;
        }
        if(_hcmPositionWorkerAssignment.isFieldSet(fieldnum(HcmPositionWorkerAssignment,ValidFrom)))
        {
            return true;
        }
        if(_hcmPositionWorkerAssignment.isFieldSet(fieldnum(HcmPositionWorkerAssignment,ValidTo)))
        {
            return true;
        }
        if(_hcmPositionWorkerAssignment.isFieldSet(fieldnum(HcmPositionWorkerAssignment,Worker)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionWorkerAssignment) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS13(DataEntityRuntimeContext _entityCtx, HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView)
    {
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment_ = _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmWorkerPrimaryPositionAssignmentView.PositionWorkerAssignment != hcmPositionWorkerAssignment_.RecId)
        {
            _hcmWorkerPrimaryPositionAssignmentView.PositionWorkerAssignment = hcmPositionWorkerAssignment_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmWorkerPrimaryPositionAssignmentView').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmWorkerPrimaryPositionAssignmentView'), _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment'), dataSourceDBOperation, 'HcmWorkerPrimaryPositionAssignmentView.PositionWorkerAssignment', _hcmWorkerPrimaryPositionAssignmentView, fieldnum(HcmWorkerPrimaryPositionAssignmentView, PositionWorkerAssignment), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS13(HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmWorkerPrimaryPositionAssignmentView.isFieldSet(fieldnum(HcmWorkerPrimaryPositionAssignmentView,IsPrimaryPosition)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmWorkerPrimaryPositionAssignmentView) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS16(HcmUnions _hcmUnions, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmUnions.isFieldSet(fieldnum(HcmUnions,UnionID)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmUnions) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS17(CompanyInfo _companyInfo, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfo.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfo) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS15(DataEntityRuntimeContext _entityCtx, HcmUnionAgreement _hcmUnionAgreement)
    {
        HcmUnions hcmUnions_ = _entityCtx.getRuntimeContextByName('HcmUnions').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmUnions').conflictDetectionInvoked() || hcmUnions_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmUnionAgreement.LaborUnion != hcmUnions_.RecId)
            {
                _hcmUnionAgreement.LaborUnion = hcmUnions_.RecId;
            }
        }
        
        CompanyInfo companyInfo_ = _entityCtx.getRuntimeContextByName('CompanyInfo').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('CompanyInfo').conflictDetectionInvoked() || companyInfo_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmUnionAgreement.LegalEntity != companyInfo_.RecId)
            {
                _hcmUnionAgreement.LegalEntity = companyInfo_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmUnionAgreement').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmUnionAgreement'), _entityCtx.getRuntimeContextByName('HcmUnions'), dataSourceDBOperation, 'HcmUnionAgreement.LaborUnion', _hcmUnionAgreement, fieldnum(HcmUnionAgreement, LaborUnion), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmUnionAgreement'), _entityCtx.getRuntimeContextByName('CompanyInfo'), dataSourceDBOperation, 'HcmUnionAgreement.LegalEntity', _hcmUnionAgreement, fieldnum(HcmUnionAgreement, LegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS15(HcmUnionAgreement _hcmUnionAgreement, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmUnionAgreement.isFieldSet(fieldnum(HcmUnionAgreement,AgreementName)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmUnionAgreement) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS14(DataEntityRuntimeContext _entityCtx, HcmPositionUnionAgreement _hcmPositionUnionAgreement)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPositionUnionAgreement.Position != hcmPosition_.RecId)
        {
            _hcmPositionUnionAgreement.Position = hcmPosition_.RecId;
        }
        
        HcmUnionAgreement hcmUnionAgreement_ = _entityCtx.getRuntimeContextByName('HcmUnionAgreement').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmUnionAgreement').conflictDetectionInvoked() || hcmUnionAgreement_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionUnionAgreement.UnionAgreement != hcmUnionAgreement_.RecId)
            {
                _hcmPositionUnionAgreement.UnionAgreement = hcmUnionAgreement_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'HcmPositionUnionAgreement.Position', _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, UnionAgreement)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement'), _entityCtx.getRuntimeContextByName('HcmUnionAgreement'), dataSourceDBOperation, 'HcmPositionUnionAgreement.UnionAgreement', _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, UnionAgreement), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS14(HcmPositionUnionAgreement _hcmPositionUnionAgreement, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionUnionAgreement.isFieldSet(fieldnum(HcmPositionUnionAgreement,UnionAgreement)))
        {
            return true;
        }
        if(_hcmPositionUnionAgreement.isFieldSet(fieldnum(HcmPositionUnionAgreement,ValidFrom)))
        {
            return true;
        }
        if(_hcmPositionUnionAgreement.isFieldSet(fieldnum(HcmPositionUnionAgreement,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionUnionAgreement) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS19(HcmPosition _hcmLineParentPosition, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmLineParentPosition.isFieldSet(fieldnum(HcmPosition,PositionId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmLineParentPosition) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS18(DataEntityRuntimeContext _entityCtx, HcmPositionLineHierarchyView _hcmPositionLineHierarchyView)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_hcmPositionLineHierarchyView.Position != hcmPosition_.RecId)
        {
            _hcmPositionLineHierarchyView.Position = hcmPosition_.RecId;
        }
        
        HcmPosition hcmLineParentPosition_ = _entityCtx.getRuntimeContextByName('HcmLineParentPosition').getBuffer();
        // FK propagation of references to an optional read-only PK data source will be done if
        //   1. conflict detection has been invoked against the PK data source, or
        //   2. the PK data source buffer is not null.
        if(_entityCtx.getRuntimeContextByName('HcmLineParentPosition').conflictDetectionInvoked() || hcmLineParentPosition_)
        {
            // do not set foreign key values if they are same to make sure validation is not fired unless value changed
            if(_hcmPositionLineHierarchyView.ParentPosition != hcmLineParentPosition_.RecId)
            {
                _hcmPositionLineHierarchyView.ParentPosition = hcmLineParentPosition_.RecId;
            }
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'HcmPositionLineHierarchyView.Position', _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView'), _entityCtx.getRuntimeContextByName('HcmLineParentPosition'), dataSourceDBOperation, 'HcmPositionLineHierarchyView.ParentPosition', _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ParentPosition), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS18(HcmPositionLineHierarchyView _hcmPositionLineHierarchyView, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_hcmPositionLineHierarchyView.isFieldSet(fieldnum(HcmPositionLineHierarchyView,ValidFrom)))
        {
            return true;
        }
        if(_hcmPositionLineHierarchyView.isFieldSet(fieldnum(HcmPositionLineHierarchyView,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _hcmPositionLineHierarchyView) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS21(CompanyInfo _companyInfoPositionDetails, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_companyInfoPositionDetails.isFieldSet(fieldnum(CompanyInfo,DataArea)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _companyInfoPositionDetails) ? true : false;
        return rtrn;
    }
    private boolean isAnyFieldSet_DS22(PayrollPayCycle _payrollPayCycle, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_payrollPayCycle.isFieldSet(fieldnum(PayrollPayCycle,PayCycleId)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _payrollPayCycle) ? true : false;
        return rtrn;
    }
    private void foreignKeyPropagation_DS20(DataEntityRuntimeContext _entityCtx, PayrollPositionDetails _payrollPositionDetails)
    {
        HcmPosition hcmPosition_ = _entityCtx.getRuntimeContextByName('HcmPosition').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_payrollPositionDetails.Position != hcmPosition_.RecId)
        {
            _payrollPositionDetails.Position = hcmPosition_.RecId;
        }
        
        CompanyInfo companyInfoPositionDetails_ = _entityCtx.getRuntimeContextByName('CompanyInfoPositionDetails').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_payrollPositionDetails.PaidByLegalEntity != companyInfoPositionDetails_.RecId)
        {
            _payrollPositionDetails.PaidByLegalEntity = companyInfoPositionDetails_.RecId;
        }
        
        PayrollPayCycle payrollPayCycle_ = _entityCtx.getRuntimeContextByName('PayrollPayCycle').getBuffer();
        // do not set foreign key values if they are same to make sure validation is not fired unless value changed
        if(_payrollPositionDetails.PayCycle != payrollPayCycle_.RecId)
        {
            _payrollPositionDetails.PayCycle = payrollPayCycle_.RecId;
        }
        
        // foreign key value validation
        boolean validationFailed = false;
        DataEntityDatabaseOperation dataSourceDBOperation = _entityCtx.getRuntimeContextByName('PayrollPositionDetails').getDatabaseOperation();
        HcmPositionEntity dataEntityRecord = _entityCtx.getEntityRecord();
        
        if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('PayrollPositionDetails'), _entityCtx.getRuntimeContextByName('HcmPosition'), dataSourceDBOperation, 'PayrollPositionDetails.Position', _payrollPositionDetails, fieldnum(PayrollPositionDetails, Position), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
        {
            validationFailed = true;
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, LegalEntity)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('PayrollPositionDetails'), _entityCtx.getRuntimeContextByName('CompanyInfoPositionDetails'), dataSourceDBOperation, 'PayrollPositionDetails.PaidByLegalEntity', _payrollPositionDetails, fieldnum(PayrollPositionDetails, PaidByLegalEntity), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(!dataEntityRecord.skipDataSourceValidateField(fieldnum(HcmPositionEntity, PayCycle)))
        {
            if(!this.validateDataSourceFieldInCompanyContext(_entityCtx.getRuntimeContextByName('PayrollPositionDetails'), _entityCtx.getRuntimeContextByName('PayrollPayCycle'), dataSourceDBOperation, 'PayrollPositionDetails.PayCycle', _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayCycle), false/*disallowEditOnCreate*/, false/*disallowEdit*/, false/*callValidateField*/, 1))
            {
                validationFailed = true;
            }
        }
        
        if(validationFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    private boolean isAnyFieldSet_DS20(PayrollPositionDetails _payrollPositionDetails, DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = false;
        if(_payrollPositionDetails.isFieldSet(fieldnum(PayrollPositionDetails,PaidByLegalEntity)))
        {
            return true;
        }
        if(_payrollPositionDetails.isFieldSet(fieldnum(PayrollPositionDetails,PayCycle)))
        {
            return true;
        }
        if(_payrollPositionDetails.isFieldSet(fieldnum(PayrollPositionDetails,PayrollNormalHours)))
        {
            return true;
        }
        if(_payrollPositionDetails.isFieldSet(fieldnum(PayrollPositionDetails,ValidFrom)))
        {
            return true;
        }
        if(_payrollPositionDetails.isFieldSet(fieldnum(PayrollPositionDetails,ValidTo)))
        {
            return true;
        }
        rtrn = this.isAnyFieldSet_Extensions(_entityCtx, _dataSourceCtx, _payrollPositionDetails) ? true : false;
        return rtrn;
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [HcmPosition]
            if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // invoke conflict detection for data source that's on the 1 side of 1:N or N:1 relationship.
            this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [HcmPosition].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
            // insert/update data sources that reference [HcmPosition].
            {
                // save/update data sources referenced by [HcmPositionDetail].
                {
                    // handle datasources which are part of extensions and need to be saved before [OMOperatingUnit]
                    if(!this.preSaveDataSource(_entityCtx, 'OMOperatingUnit'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('OMOperatingUnit');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS3(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            OMOperatingUnit oMOperatingUnit_ = _dataSourceCtx.getBuffer();
                            if((oMOperatingUnit_.OMOperatingUnitNumber) || (oMOperatingUnit_.PartyNumber))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [OMOperatingUnit].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmCompLocation]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmCompLocation'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmCompLocation');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS4(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmCompLocation hcmCompLocation_ = _dataSourceCtx.getBuffer();
                            if((hcmCompLocation_.CompLocationId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmCompLocation].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmJob]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmJob'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmJob');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS5(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmJob hcmJob_ = _dataSourceCtx.getBuffer();
                            if((hcmJob_.JobId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmJob].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmPositionType]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmPositionType'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionType');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS6(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmPositionType hcmPositionType_ = _dataSourceCtx.getBuffer();
                            if((hcmPositionType_.TypeId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmPositionType].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmTitle]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmTitle'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmTitle');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS7(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmTitle hcmTitle_ = _dataSourceCtx.getBuffer();
                            if((hcmTitle_.TitleId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmTitle].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmPositionDetail]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionDetail'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionDetail');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS2(_entityCtx, _dataSourceCtx.getBuffer());
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS2(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [HcmPositionDetail].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPositionDuration]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionDuration'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionDuration');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS8(_entityCtx, _dataSourceCtx.getBuffer());
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS8(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [HcmPositionDuration].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // save/update data sources referenced by [HcmPositionWorkerAssignment].
                {
                    // save/update data sources referenced by [HcmWorker].
                    {
                        // handle datasources which are part of extensions and need to be saved before [DirPerson]
                        if(!this.preSaveDataSource(_entityCtx, 'DirPerson'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson');
                        // propagates foreign key values from referenced data sources which are part of extensions.
                        this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                        if(this.isAnyFieldSet_DS11(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                        {
                            // invoke conflict detection for read-only data source.
                            Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                            if(!resolvedRecord)
                            {
                                DirPerson dirPerson_ = _dataSourceCtx.getBuffer();
                                if((dirPerson_.PartyNumber))
                                {
                                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                    throw Exception::ViewDataSourceValidation;
                                }
                            }
                            // marks the read-only data source as 'saved' and skips actual insert/update operation.
                            _dataSourceCtx.setDataSaved(true);
                        }
                        // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                        else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                        {
                            _dataSourceCtx.setDataSaved(true);
                        }
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // inserts/updates data source [DirPerson].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                    // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    // propagates foreign key values from referenced data sources.
                    this.foreignKeyPropagation_DS10(_entityCtx, _dataSourceCtx.getBuffer());
                    if(this.isAnyFieldSet_DS10(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmWorker hcmWorker_ = _dataSourceCtx.getBuffer();
                            if((hcmWorker_.Person) || (hcmWorker_.PersonnelNumber))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmWorker].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmReasonCode]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmReasonCode'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmReasonCode');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS12(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmReasonCode hcmReasonCode_ = _dataSourceCtx.getBuffer();
                            if((hcmReasonCode_.ReasonCodeId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmReasonCode].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmPositionWorkerAssignment]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionWorkerAssignment'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS9(_entityCtx, _dataSourceCtx.getBuffer());
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS9(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [HcmPositionWorkerAssignment].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // insert/update data sources that reference [HcmPositionWorkerAssignment].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmWorkerPrimaryPositionAssignmentView]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmWorkerPrimaryPositionAssignmentView'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorkerPrimaryPositionAssignmentView');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    // propagates foreign key values from referenced data sources.
                    this.foreignKeyPropagation_DS13(_entityCtx, _dataSourceCtx.getBuffer());
                    if(this.isAnyFieldSet_DS13(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmWorkerPrimaryPositionAssignmentView hcmWorkerPrimaryPositionAssignmentView_ = _dataSourceCtx.getBuffer();
                            if((hcmWorkerPrimaryPositionAssignmentView_.Worker || hcmWorkerPrimaryPositionAssignmentView_.ValidFrom || hcmWorkerPrimaryPositionAssignmentView_.ValidTo))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmWorkerPrimaryPositionAssignmentView].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
            {
                // save/update data sources referenced by [HcmPositionUnionAgreement].
                {
                    // save/update data sources referenced by [HcmUnionAgreement].
                    {
                        // handle datasources which are part of extensions and need to be saved before [HcmUnions]
                        if(!this.preSaveDataSource(_entityCtx, 'HcmUnions'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmUnions');
                        // propagates foreign key values from referenced data sources which are part of extensions.
                        this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                        if(this.isAnyFieldSet_DS16(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                        {
                            // invoke conflict detection for read-only data source.
                            Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                            if(!resolvedRecord)
                            {
                                HcmUnions hcmUnions_ = _dataSourceCtx.getBuffer();
                                if((hcmUnions_.UnionID))
                                {
                                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                    throw Exception::ViewDataSourceValidation;
                                }
                            }
                            // marks the read-only data source as 'saved' and skips actual insert/update operation.
                            _dataSourceCtx.setDataSaved(true);
                        }
                        // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                        else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                        {
                            _dataSourceCtx.setDataSaved(true);
                        }
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // inserts/updates data source [HcmUnions].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                    {
                        // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                        if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                        // propagates foreign key values from referenced data sources which are part of extensions.
                        this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                        if(this.isAnyFieldSet_DS17(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                        {
                            // invoke conflict detection for read-only data source.
                            Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                            if(!resolvedRecord)
                            {
                                CompanyInfo companyInfo_ = _dataSourceCtx.getBuffer();
                                if((companyInfo_.DataArea) || (companyInfo_.PartyNumber))
                                {
                                    checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                    throw Exception::ViewDataSourceValidation;
                                }
                            }
                            // marks the read-only data source as 'saved' and skips actual insert/update operation.
                            _dataSourceCtx.setDataSaved(true);
                        }
                        // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                        else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                        {
                            _dataSourceCtx.setDataSaved(true);
                        }
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // inserts/updates data source [CompanyInfo].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                    // handle datasources which are part of extensions and need to be saved before [HcmUnionAgreement]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmUnionAgreement'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmUnionAgreement');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    // propagates foreign key values from referenced data sources.
                    this.foreignKeyPropagation_DS15(_entityCtx, _dataSourceCtx.getBuffer());
                    if(this.isAnyFieldSet_DS15(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmUnionAgreement hcmUnionAgreement_ = _dataSourceCtx.getBuffer();
                            if((hcmUnionAgreement_.LaborUnion || hcmUnionAgreement_.AgreementName || hcmUnionAgreement_.LegalEntity))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmUnionAgreement].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmPositionUnionAgreement]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionUnionAgreement'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS14(_entityCtx, _dataSourceCtx.getBuffer());
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS14(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [HcmPositionUnionAgreement].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // save/update data sources referenced by [HcmPositionLineHierarchyView].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmLineParentPosition]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmLineParentPosition'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmLineParentPosition');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    if(this.isAnyFieldSet_DS19(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // invoke conflict detection for read-only data source.
                        Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                        if(!resolvedRecord)
                        {
                            HcmPosition hcmLineParentPosition_ = _dataSourceCtx.getBuffer();
                            if((hcmLineParentPosition_.PositionId))
                            {
                                checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                                throw Exception::ViewDataSourceValidation;
                            }
                        }
                        // marks the read-only data source as 'saved' and skips actual insert/update operation.
                        _dataSourceCtx.setDataSaved(true);
                    }
                    // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDataSaved(true);
                    }
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // inserts/updates data source [HcmLineParentPosition].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmPositionLineHierarchyView]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionLineHierarchyView'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS18(_entityCtx, _dataSourceCtx.getBuffer());
                if(this.isAnyFieldSet_DS18(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // invoke conflict detection for read-only data source.
                    Common resolvedRecord = this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    if(!resolvedRecord)
                    {
                        checkFailed(strfmt("@ApplicationPlatform:DataEntityReadonlyDataSourceNotFound", _dataSourceCtx.name()));
                        throw Exception::ViewDataSourceValidation;
                    }
                    // marks the read-only data source as 'saved' and skips actual insert/update operation.
                    _dataSourceCtx.setDataSaved(true);
                }
                // in case of update marks the read-only data source as 'saved' and skips actual insert/update operation.
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    _dataSourceCtx.setDataSaved(true);
                }
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // inserts/updates data source [HcmPositionLineHierarchyView].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // save/update data sources referenced by [PayrollPositionDetails].
                {
                    // handle datasources which are part of extensions and need to be saved before [CompanyInfoPositionDetails]
                    if(!this.preSaveDataSource(_entityCtx, 'CompanyInfoPositionDetails'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfoPositionDetails');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    // invoke conflict detection for data source that's on the 1 side of 1:N or N:1 relationship.
                    this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    // checks if there is any field that has been set for outer joined data source buffer.
                    if(!this.isAnyFieldSet_DS21(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // insert/update operation is not applicable when there is no field that has been set.
                        if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                        {
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        }
                    }
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        if(_dataSourceCtx.getBuffer().RecId == 0)
                        {
                            // change to insert operation for the new record.
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                        }
                    }
                    // inserts/updates data source [CompanyInfoPositionDetails].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [PayrollPayCycle]
                    if(!this.preSaveDataSource(_entityCtx, 'PayrollPayCycle'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('PayrollPayCycle');
                    // propagates foreign key values from referenced data sources which are part of extensions.
                    this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                    // invoke conflict detection for data source that's on the 1 side of 1:N or N:1 relationship.
                    this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                    // checks if there is any field that has been set for outer joined data source buffer.
                    if(!this.isAnyFieldSet_DS22(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                    {
                        // insert/update operation is not applicable when there is no field that has been set.
                        if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                        {
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        }
                    }
                    else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        if(_dataSourceCtx.getBuffer().RecId == 0)
                        {
                            // change to insert operation for the new record.
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                        }
                    }
                    // inserts/updates data source [PayrollPayCycle].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [PayrollPositionDetails]
                if(!this.preSaveDataSource(_entityCtx, 'PayrollPositionDetails'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('PayrollPositionDetails');
                // propagates foreign key values from referenced data sources which are part of extensions.
                this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
                // propagates foreign key values from referenced data sources.
                this.foreignKeyPropagation_DS20(_entityCtx, _dataSourceCtx.getBuffer());
                // checks if there is any field that has been set for outer joined data source buffer.
                if(!this.isAnyFieldSet_DS20(_dataSourceCtx.getBuffer(),_dataSourceCtx,_entityCtx))
                {
                    // insert/update operation is not applicable when there is no field that has been set.
                    if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                else if(_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if(_dataSourceCtx.getBuffer().RecId == 0)
                    {
                        // change to insert operation for the new record.
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                    }
                }
                // inserts/updates data source [PayrollPositionDetails].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // deletes data sources that reference [HcmPosition].
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPositionDetail]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionDetail'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionDetail');
                // deletes data source [HcmPositionDetail].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmPositionDetail].
                {
                    // handle datasources which are part of extensions and need to be saved before [OMOperatingUnit]
                    if(!this.preSaveDataSource(_entityCtx, 'OMOperatingUnit'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('OMOperatingUnit');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [OMOperatingUnit].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmCompLocation]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmCompLocation'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmCompLocation');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmCompLocation].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmJob]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmJob'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmJob');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmJob].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmPositionType]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmPositionType'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionType');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmPositionType].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmTitle]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmTitle'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmTitle');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmTitle].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPositionDuration]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionDuration'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionDuration');
                // deletes data source [HcmPositionDuration].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
            }
            {
                // deletes data sources that reference [HcmPositionWorkerAssignment].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmWorkerPrimaryPositionAssignmentView]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmWorkerPrimaryPositionAssignmentView'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorkerPrimaryPositionAssignmentView');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmWorkerPrimaryPositionAssignmentView].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                // handle datasources which are part of extensions and need to be saved before [HcmPositionWorkerAssignment]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionWorkerAssignment'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionWorkerAssignment');
                // deletes data source [HcmPositionWorkerAssignment].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmPositionWorkerAssignment].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmWorker]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmWorker'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmWorker');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmWorker].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                    // deletes data sources referenced by [HcmWorker].
                    {
                        // handle datasources which are part of extensions and need to be saved before [DirPerson]
                        if(!this.preSaveDataSource(_entityCtx, 'DirPerson'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('DirPerson');
                        // skips delete operation against read-only data source.
                        // marks the read-only data source as 'saved' and skips actual delete operation.
                        _dataSourceCtx.setDataSaved(true);
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // deletes data source [DirPerson].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmReasonCode]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmReasonCode'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmReasonCode');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmReasonCode].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPositionUnionAgreement]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionUnionAgreement'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionUnionAgreement');
                // deletes data source [HcmPositionUnionAgreement].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmPositionUnionAgreement].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmUnionAgreement]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmUnionAgreement'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmUnionAgreement');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmUnionAgreement].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                    // deletes data sources referenced by [HcmUnionAgreement].
                    {
                        // handle datasources which are part of extensions and need to be saved before [HcmUnions]
                        if(!this.preSaveDataSource(_entityCtx, 'HcmUnions'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmUnions');
                        // skips delete operation against read-only data source.
                        // marks the read-only data source as 'saved' and skips actual delete operation.
                        _dataSourceCtx.setDataSaved(true);
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // deletes data source [HcmUnions].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                    {
                        // handle datasources which are part of extensions and need to be saved before [CompanyInfo]
                        if(!this.preSaveDataSource(_entityCtx, 'CompanyInfo'))
                        {
                            return false;
                        }
                        _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfo');
                        // skips delete operation against read-only data source.
                        // marks the read-only data source as 'saved' and skips actual delete operation.
                        _dataSourceCtx.setDataSaved(true);
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                        // deletes data source [CompanyInfo].
                        this.saveDataSource(_entityCtx, _dataSourceCtx);
                        this.postSaveDataSource();
                    }
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [HcmPositionLineHierarchyView]
                if(!this.preSaveDataSource(_entityCtx, 'HcmPositionLineHierarchyView'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPositionLineHierarchyView');
                // skips delete operation against read-only data source.
                // marks the read-only data source as 'saved' and skips actual delete operation.
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                // deletes data source [HcmPositionLineHierarchyView].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [HcmPositionLineHierarchyView].
                {
                    // handle datasources which are part of extensions and need to be saved before [HcmLineParentPosition]
                    if(!this.preSaveDataSource(_entityCtx, 'HcmLineParentPosition'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmLineParentPosition');
                    // skips delete operation against read-only data source.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [HcmLineParentPosition].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
            {
                // handle datasources which are part of extensions and need to be saved before [PayrollPositionDetails]
                if(!this.preSaveDataSource(_entityCtx, 'PayrollPositionDetails'))
                {
                    return false;
                }
                _dataSourceCtx = _entityCtx.getRuntimeContextByName('PayrollPositionDetails');
                // deletes data source [PayrollPositionDetails].
                this.saveDataSource(_entityCtx, _dataSourceCtx);
                this.postSaveDataSource();
                // deletes data sources referenced by [PayrollPositionDetails].
                {
                    // handle datasources which are part of extensions and need to be saved before [CompanyInfoPositionDetails]
                    if(!this.preSaveDataSource(_entityCtx, 'CompanyInfoPositionDetails'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('CompanyInfoPositionDetails');
                    // skips delete operation against data source that's on the 1 side of 1:N or N:1 relationship.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [CompanyInfoPositionDetails].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
                {
                    // handle datasources which are part of extensions and need to be saved before [PayrollPayCycle]
                    if(!this.preSaveDataSource(_entityCtx, 'PayrollPayCycle'))
                    {
                        return false;
                    }
                    _dataSourceCtx = _entityCtx.getRuntimeContextByName('PayrollPayCycle');
                    // skips delete operation against data source that's on the 1 side of 1:N or N:1 relationship.
                    // marks the read-only data source as 'saved' and skips actual delete operation.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    // deletes data source [PayrollPayCycle].
                    this.saveDataSource(_entityCtx, _dataSourceCtx);
                    this.postSaveDataSource();
                }
            }
            // handle datasources which are part of extensions and need to be saved before [HcmPosition]
            if(!this.preSaveDataSource(_entityCtx, 'HcmPosition'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('HcmPosition');
            // skips delete operation against data source that's on the 1 side of 1:N or N:1 relationship.
            // marks the read-only data source as 'saved' and skips actual delete operation.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            // deletes data source [HcmPosition].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionId), _hcmPosition, fieldnum(HcmPosition, PositionId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPosition, _hcmPositionEntity);
        _hcmPosition.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS2(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDetail _hcmPositionDetail, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, AvailableForAssignment), _hcmPositionDetail, fieldnum(HcmPositionDetail, AvailableForAssignment), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, CompensationRegion), _hcmPositionDetail, fieldnum(HcmPositionDetail, CompLocation), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Department), _hcmPositionDetail, fieldnum(HcmPositionDetail, Department), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Description), _hcmPositionDetail, fieldnum(HcmPositionDetail, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, FullTimeEquivalent), _hcmPositionDetail, fieldnum(HcmPositionDetail, FullTimeEquivalency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Job), _hcmPositionDetail, fieldnum(HcmPositionDetail, Job), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionType), _hcmPositionDetail, fieldnum(HcmPositionDetail, PositionType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Title), _hcmPositionDetail, fieldnum(HcmPositionDetail, Title), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailEffective), _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailExpiration), _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionDetail, _hcmPositionEntity);
        _hcmPositionDetail.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS3(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, OMOperatingUnit _oMOperatingUnit, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, DepartmentNumber), _oMOperatingUnit, fieldnum(OMOperatingUnit, OMOperatingUnitNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _oMOperatingUnit, _hcmPositionEntity);
        _oMOperatingUnit.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS4(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCompLocation _hcmCompLocation, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationCompensation')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, CompensationRegionId), _hcmCompLocation, fieldnum(HcmCompLocation, CompLocationId), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _hcmCompLocation, _hcmPositionEntity);
            _hcmCompLocation.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS5(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmJob _hcmJob, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, JobId), _hcmJob, fieldnum(HcmJob, JobId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmJob, _hcmPositionEntity);
        _hcmJob.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS6(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionType _hcmPositionType, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionTypeId), _hcmPositionType, fieldnum(HcmPositionType, TypeId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionType, _hcmPositionEntity);
        _hcmPositionType.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS7(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmTitle _hcmTitle, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, TitleId), _hcmTitle, fieldnum(HcmTitle, TitleId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmTitle, _hcmPositionEntity);
        _hcmTitle.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS8(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDuration _hcmPositionDuration, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Activation), _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Retirement), _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionDuration, _hcmPositionEntity);
        _hcmPositionDuration.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS9(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentReasonCode), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, AssignmentReasonCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentStart), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentEnd), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Worker), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Worker), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionWorkerAssignment, _hcmPositionEntity);
        _hcmPositionWorkerAssignment.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS10(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerPersonnelNumber), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorker, _hcmPositionEntity);
        _hcmWorker.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS11(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerName), _dirPerson, fieldnum(DirPerson, Name), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _dirPerson, _hcmPositionEntity);
        _dirPerson.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS12(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmReasonCode _hcmReasonCode, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentReasonCodeId), _hcmReasonCode, fieldnum(HcmReasonCode, ReasonCodeId), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _hcmReasonCode, _hcmPositionEntity);
            _hcmReasonCode.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS13(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView, HcmPositionEntity _hcmPositionEntity)
    {
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmWorkerPrimaryPositionAssignmentView, _hcmPositionEntity);
        _hcmWorkerPrimaryPositionAssignmentView.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS14(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionUnionAgreement _hcmPositionUnionAgreement, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreement), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, UnionAgreement), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementEffective), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidFrom), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementExpiration), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidTo), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionUnionAgreement, _hcmPositionEntity);
            _hcmPositionUnionAgreement.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS15(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnionAgreement _hcmUnionAgreement, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementName), _hcmUnionAgreement, fieldnum(HcmUnionAgreement, AgreementName), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _hcmUnionAgreement, _hcmPositionEntity);
            _hcmUnionAgreement.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS16(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnions _hcmUnions, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, LaborUnionId), _hcmUnions, fieldnum(HcmUnions, UnionID), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _hcmUnions, _hcmPositionEntity);
            _hcmUnions.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS17(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementLegalEntity), _companyInfo, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfo, _hcmPositionEntity);
        _companyInfo.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS18(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionLineHierarchyView _hcmPositionLineHierarchyView, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToEffective), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToExpiration), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidTo), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmPositionLineHierarchyView, _hcmPositionEntity);
        _hcmPositionLineHierarchyView.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS19(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmLineParentPosition, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToPositionId), _hcmLineParentPosition, fieldnum(HcmPosition, PositionId), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _hcmLineParentPosition, _hcmPositionEntity);
        _hcmLineParentPosition.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS20(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPositionDetails _payrollPositionDetails, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, LegalEntity), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PaidByLegalEntity), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayCycle), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayCycle), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, AnnualRegularHours), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayrollNormalHours), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailEffective), _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidFrom), 1);
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailExpiration), _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidTo), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _payrollPositionDetails, _hcmPositionEntity);
            _payrollPositionDetails.trackFieldExternallySet(false);
        }
    }
    private void mapToDataSource_DS21(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfoPositionDetails, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PaidByLegalEntity), _companyInfoPositionDetails, fieldnum(CompanyInfo, DataArea), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _companyInfoPositionDetails, _hcmPositionEntity);
        _companyInfoPositionDetails.trackFieldExternallySet(false);
    }
    private void mapToDataSource_DS22(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPayCycle _payrollPayCycle, HcmPositionEntity _hcmPositionEntity)
    {
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayCycleId), _payrollPayCycle, fieldnum(PayrollPayCycle, PayCycleId), 1);
            
            this.mapToDataSourceExtensions(_dataSourceCtx, _payrollPayCycle, _hcmPositionEntity);
            _payrollPayCycle.trackFieldExternallySet(false);
        }
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionDetail_ID:
                this.mapToDataSource_DS2(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #OMOperatingUnit_ID:
                this.mapToDataSource_DS3(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmCompLocation_ID:
                this.mapToDataSource_DS4(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmJob_ID:
                this.mapToDataSource_DS5(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionType_ID:
                this.mapToDataSource_DS6(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmTitle_ID:
                this.mapToDataSource_DS7(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionDuration_ID:
                this.mapToDataSource_DS8(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionWorkerAssignment_ID:
                this.mapToDataSource_DS9(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapToDataSource_DS10(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_ID:
                this.mapToDataSource_DS11(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmReasonCode_ID:
                this.mapToDataSource_DS12(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorkerPrimaryPositionAssignmentView_ID:
                this.mapToDataSource_DS13(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionUnionAgreement_ID:
                this.mapToDataSource_DS14(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmUnionAgreement_ID:
                this.mapToDataSource_DS15(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmUnions_ID:
                this.mapToDataSource_DS16(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapToDataSource_DS17(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionLineHierarchyView_ID:
                this.mapToDataSource_DS18(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmLineParentPosition_ID:
                this.mapToDataSource_DS19(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #PayrollPositionDetails_ID:
                this.mapToDataSource_DS20(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfoPositionDetails_ID:
                this.mapToDataSource_DS21(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #PayrollPayCycle_ID:
                this.mapToDataSource_DS22(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPosition, fieldnum(HcmPosition, PositionId), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPosition, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPosition);
    }
    private void mapFromDataSource_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDetail _hcmPositionDetail, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, AvailableForAssignment), _hcmPositionEntity, fieldnum(HcmPositionEntity, AvailableForAssignment), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, CompLocation), _hcmPositionEntity, fieldnum(HcmPositionEntity, CompensationRegion), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, Department), _hcmPositionEntity, fieldnum(HcmPositionEntity, Department), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, Description), _hcmPositionEntity, fieldnum(HcmPositionEntity, Description), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, FullTimeEquivalency), _hcmPositionEntity, fieldnum(HcmPositionEntity, FullTimeEquivalent), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, Job), _hcmPositionEntity, fieldnum(HcmPositionEntity, Job), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, PositionType), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionType), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, Title), _hcmPositionEntity, fieldnum(HcmPositionEntity, Title), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailEffective), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDetail, fieldnum(HcmPositionDetail, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailExpiration), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionDetail, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionDetail);
    }
    private void mapFromDataSource_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, OMOperatingUnit _oMOperatingUnit, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_oMOperatingUnit, fieldnum(OMOperatingUnit, OMOperatingUnitNumber), _hcmPositionEntity, fieldnum(HcmPositionEntity, DepartmentNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _oMOperatingUnit, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _oMOperatingUnit);
    }
    private void mapFromDataSource_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCompLocation _hcmCompLocation, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmCompLocation, fieldnum(HcmCompLocation, CompLocationId), _hcmPositionEntity, fieldnum(HcmPositionEntity, CompensationRegionId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmCompLocation, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmCompLocation);
    }
    private void mapFromDataSource_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmJob _hcmJob, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmJob, fieldnum(HcmJob, JobId), _hcmPositionEntity, fieldnum(HcmPositionEntity, JobId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmJob, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmJob);
    }
    private void mapFromDataSource_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionType _hcmPositionType, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionType, fieldnum(HcmPositionType, TypeId), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionTypeId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionType, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionType);
    }
    private void mapFromDataSource_DS7(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmTitle _hcmTitle, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmTitle, fieldnum(HcmTitle, TitleId), _hcmPositionEntity, fieldnum(HcmPositionEntity, TitleId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmTitle, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmTitle);
    }
    private void mapFromDataSource_DS8(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDuration _hcmPositionDuration, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionDuration, fieldnum(HcmPositionDuration, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, Activation), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionDuration, fieldnum(HcmPositionDuration, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, Retirement), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionDuration, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionDuration);
    }
    private void mapFromDataSource_DS9(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, AssignmentReasonCode), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentReasonCode), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentStart), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentEnd), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Worker), _hcmPositionEntity, fieldnum(HcmPositionEntity, Worker), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionWorkerAssignment, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionWorkerAssignment);
    }
    private void mapFromDataSource_DS10(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerPersonnelNumber), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorker, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorker);
    }
    private void mapFromDataSource_DS11(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_dirPerson, fieldnum(DirPerson, Name), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerName), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _dirPerson, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _dirPerson);
    }
    private void mapFromDataSource_DS12(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmReasonCode _hcmReasonCode, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmReasonCode, fieldnum(HcmReasonCode, ReasonCodeId), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentReasonCodeId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmReasonCode, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmReasonCode);
    }
    private void mapFromDataSource_DS13(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmWorkerPrimaryPositionAssignmentView, fieldnum(HcmWorkerPrimaryPositionAssignmentView, IsPrimaryPosition), _hcmPositionEntity, fieldnum(HcmPositionEntity, IsPrimaryPosition), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmWorkerPrimaryPositionAssignmentView, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmWorkerPrimaryPositionAssignmentView);
    }
    private void mapFromDataSource_DS14(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionUnionAgreement _hcmPositionUnionAgreement, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, UnionAgreement), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreement), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementEffective), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementExpiration), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionUnionAgreement, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionUnionAgreement);
    }
    private void mapFromDataSource_DS15(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnionAgreement _hcmUnionAgreement, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmUnionAgreement, fieldnum(HcmUnionAgreement, AgreementName), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementName), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmUnionAgreement, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmUnionAgreement);
    }
    private void mapFromDataSource_DS16(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnions _hcmUnions, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmUnions, fieldnum(HcmUnions, UnionID), _hcmPositionEntity, fieldnum(HcmPositionEntity, LaborUnionId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmUnions, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmUnions);
    }
    private void mapFromDataSource_DS17(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfo, fieldnum(CompanyInfo, DataArea), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementLegalEntity), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfo, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfo);
    }
    private void mapFromDataSource_DS18(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionLineHierarchyView _hcmPositionLineHierarchyView, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToEffective), false);
        this.mapDataSourceFieldToEntityField(_hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToExpiration), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmPositionLineHierarchyView, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmPositionLineHierarchyView);
    }
    private void mapFromDataSource_DS19(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmLineParentPosition, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_hcmLineParentPosition, fieldnum(HcmPosition, PositionId), _hcmPositionEntity, fieldnum(HcmPositionEntity, ReportsToPositionId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _hcmLineParentPosition, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _hcmLineParentPosition);
    }
    private void mapFromDataSource_DS20(DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPositionDetails _payrollPositionDetails, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_payrollPositionDetails, fieldnum(PayrollPositionDetails, PaidByLegalEntity), _hcmPositionEntity, fieldnum(HcmPositionEntity, LegalEntity), false);
        this.mapDataSourceFieldToEntityField(_payrollPositionDetails, fieldnum(PayrollPositionDetails, PayCycle), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayCycle), false);
        this.mapDataSourceFieldToEntityField(_payrollPositionDetails, fieldnum(PayrollPositionDetails, PayrollNormalHours), _hcmPositionEntity, fieldnum(HcmPositionEntity, AnnualRegularHours), false);
        this.mapDataSourceFieldToEntityField(_payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidFrom), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailEffective), false);
        this.mapDataSourceFieldToEntityField(_payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidTo), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailExpiration), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _payrollPositionDetails, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _payrollPositionDetails);
    }
    private void mapFromDataSource_DS21(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfoPositionDetails, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_companyInfoPositionDetails, fieldnum(CompanyInfo, DataArea), _hcmPositionEntity, fieldnum(HcmPositionEntity, PaidByLegalEntity), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _companyInfoPositionDetails, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _companyInfoPositionDetails);
    }
    private void mapFromDataSource_DS22(DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPayCycle _payrollPayCycle, HcmPositionEntity _hcmPositionEntity)
    {
        this.mapDataSourceFieldToEntityField(_payrollPayCycle, fieldnum(PayrollPayCycle, PayCycleId), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayCycleId), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _payrollPayCycle, _hcmPositionEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _hcmPositionEntity.fromViewDataSource(_dataSourceCtx.id(), _payrollPayCycle);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionDetail_ID:
                this.mapFromDataSource_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #OMOperatingUnit_ID:
                this.mapFromDataSource_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmCompLocation_ID:
                this.mapFromDataSource_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmJob_ID:
                this.mapFromDataSource_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionType_ID:
                this.mapFromDataSource_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmTitle_ID:
                this.mapFromDataSource_DS7(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionDuration_ID:
                this.mapFromDataSource_DS8(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionWorkerAssignment_ID:
                this.mapFromDataSource_DS9(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                this.mapFromDataSource_DS10(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #DirPerson_ID:
                this.mapFromDataSource_DS11(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmReasonCode_ID:
                this.mapFromDataSource_DS12(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmWorkerPrimaryPositionAssignmentView_ID:
                this.mapFromDataSource_DS13(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionUnionAgreement_ID:
                this.mapFromDataSource_DS14(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmUnionAgreement_ID:
                this.mapFromDataSource_DS15(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmUnions_ID:
                this.mapFromDataSource_DS16(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                this.mapFromDataSource_DS17(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmPositionLineHierarchyView_ID:
                this.mapFromDataSource_DS18(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #HcmLineParentPosition_ID:
                this.mapFromDataSource_DS19(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #PayrollPositionDetails_ID:
                this.mapFromDataSource_DS20(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #CompanyInfoPositionDetails_ID:
                this.mapFromDataSource_DS21(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            case #PayrollPayCycle_ID:
                this.mapFromDataSource_DS22(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionDetail_ID:
                rtrn = this.LookForUniqueKeyMatch_DS2(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #OMOperatingUnit_ID:
                rtrn = this.LookForUniqueKeyMatch_DS3(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmCompLocation_ID:
                rtrn = this.LookForUniqueKeyMatch_DS4(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmJob_ID:
                rtrn = this.LookForUniqueKeyMatch_DS5(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionType_ID:
                rtrn = this.LookForUniqueKeyMatch_DS6(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmTitle_ID:
                rtrn = this.LookForUniqueKeyMatch_DS7(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionDuration_ID:
                rtrn = this.LookForUniqueKeyMatch_DS8(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionWorkerAssignment_ID:
                rtrn = this.LookForUniqueKeyMatch_DS9(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorker_ID:
                rtrn = this.LookForUniqueKeyMatch_DS10(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #DirPerson_ID:
                rtrn = this.LookForUniqueKeyMatch_DS11(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmReasonCode_ID:
                rtrn = this.LookForUniqueKeyMatch_DS12(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmWorkerPrimaryPositionAssignmentView_ID:
                rtrn = this.LookForUniqueKeyMatch_DS13(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionUnionAgreement_ID:
                rtrn = this.LookForUniqueKeyMatch_DS14(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmUnionAgreement_ID:
                rtrn = this.LookForUniqueKeyMatch_DS15(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmUnions_ID:
                rtrn = this.LookForUniqueKeyMatch_DS16(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfo_ID:
                rtrn = this.LookForUniqueKeyMatch_DS17(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmPositionLineHierarchyView_ID:
                rtrn = this.LookForUniqueKeyMatch_DS18(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #HcmLineParentPosition_ID:
                rtrn = this.LookForUniqueKeyMatch_DS19(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #PayrollPositionDetails_ID:
                rtrn = this.LookForUniqueKeyMatch_DS20(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #CompanyInfoPositionDetails_ID:
                rtrn = this.LookForUniqueKeyMatch_DS21(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            case #PayrollPayCycle_ID:
                rtrn = this.LookForUniqueKeyMatch_DS22(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PositionId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS2(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, AvailableForAssignment)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, CompensationRegion)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Department)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Description)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, FullTimeEquivalent)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Job)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PositionType)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Title)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, DetailEffective)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, DetailExpiration)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS3(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, DepartmentNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS4(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, CompensationRegionId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS5(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, JobId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS6(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PositionTypeId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS7(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, TitleId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS8(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Activation)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Retirement)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS9(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerAssignmentReasonCode)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerAssignmentStart)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerAssignmentEnd)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, Worker)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS10(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerPersonnelNumber)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS11(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerName)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS12(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, WorkerAssignmentReasonCodeId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS13(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, IsPrimaryPosition)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS14(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, UnionAgreement)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, UnionAgreementEffective)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, UnionAgreementExpiration)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS15(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, UnionAgreementName)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS16(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, LaborUnionId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS17(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, UnionAgreementLegalEntity)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS18(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, ReportsToEffective)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, ReportsToExpiration)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS19(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, ReportsToPositionId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS20(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, LegalEntity)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PayCycle)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, AnnualRegularHours)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PayrollDetailEffective)))
        {
            return true;
        }
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PayrollDetailExpiration)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS21(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PaidByLegalEntity)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS22(HcmPositionEntity _hcmPositionEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_hcmPositionEntity.isFieldSet(fieldnum(HcmPositionEntity, PayCycleId)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceFieldSetExtensions(_hcmPositionEntity, disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionDetail_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS2(_entityCtx.getEntityRecord());
                break;
            case #OMOperatingUnit_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS3(_entityCtx.getEntityRecord());
                break;
            case #HcmCompLocation_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord());
                break;
            case #HcmJob_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS5(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionType_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS6(_entityCtx.getEntityRecord());
                break;
            case #HcmTitle_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS7(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionDuration_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS8(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionWorkerAssignment_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS9(_entityCtx.getEntityRecord());
                break;
            case #HcmWorker_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS10(_entityCtx.getEntityRecord());
                break;
            case #DirPerson_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS11(_entityCtx.getEntityRecord());
                break;
            case #HcmReasonCode_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS12(_entityCtx.getEntityRecord());
                break;
            case #HcmWorkerPrimaryPositionAssignmentView_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS13(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionUnionAgreement_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS14(_entityCtx.getEntityRecord());
                break;
            case #HcmUnionAgreement_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS15(_entityCtx.getEntityRecord());
                break;
            case #HcmUnions_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS16(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfo_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS17(_entityCtx.getEntityRecord());
                break;
            case #HcmPositionLineHierarchyView_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS18(_entityCtx.getEntityRecord());
                break;
            case #HcmLineParentPosition_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS19(_entityCtx.getEntityRecord());
                break;
            case #PayrollPositionDetails_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS20(_entityCtx.getEntityRecord());
                break;
            case #CompanyInfoPositionDetails_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS21(_entityCtx.getEntityRecord());
                break;
            case #PayrollPayCycle_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS22(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PositionId), 'HcmPositionEntity.PositionId', _hcmPosition, fieldnum(HcmPosition, PositionId), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _hcmPosition) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS2(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDetail _hcmPositionDetail)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, AvailableForAssignment), 'HcmPositionEntity.AvailableForAssignment', _hcmPositionDetail, fieldnum(HcmPositionDetail, AvailableForAssignment), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Description), 'HcmPositionEntity.Description', _hcmPositionDetail, fieldnum(HcmPositionDetail, Description), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, FullTimeEquivalent), 'HcmPositionEntity.FullTimeEquivalent', _hcmPositionDetail, fieldnum(HcmPositionDetail, FullTimeEquivalency), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailEffective), 'HcmPositionEntity.DetailEffective', _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, DetailExpiration), 'HcmPositionEntity.DetailExpiration', _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _hcmPositionDetail) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS8(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDuration _hcmPositionDuration)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Activation), 'HcmPositionEntity.Activation', _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, Retirement), 'HcmPositionEntity.Retirement', _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _hcmPositionDuration) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS9(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentStart), 'HcmPositionEntity.WorkerAssignmentStart', _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, WorkerAssignmentEnd), 'HcmPositionEntity.WorkerAssignmentEnd', _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _hcmPositionWorkerAssignment) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS14(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionUnionAgreement _hcmPositionUnionAgreement)
    {
        boolean rtrn = true;
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementEffective), 'HcmPositionEntity.UnionAgreementEffective', _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, UnionAgreementExpiration), 'HcmPositionEntity.UnionAgreementExpiration', _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _hcmPositionUnionAgreement) ? rtrn : false;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS20(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPositionDetails _payrollPositionDetails)
    {
        boolean rtrn = true;
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, AnnualRegularHours), 'HcmPositionEntity.AnnualRegularHours', _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayrollNormalHours), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailEffective), 'HcmPositionEntity.PayrollDetailEffective', _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidFrom), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayrollDetailExpiration), 'HcmPositionEntity.PayrollDetailExpiration', _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidTo), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _payrollPositionDetails) ? rtrn : false;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS21(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfoPositionDetails)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PaidByLegalEntity), 'HcmPositionEntity.PaidByLegalEntity', _companyInfoPositionDetails, fieldnum(CompanyInfo, DataArea), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _companyInfoPositionDetails) ? rtrn : false;
        return rtrn;
    }
    private boolean validateDataSource_DS22(DataEntityRuntimeContext _entityCtx, HcmPositionEntity _hcmPositionEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPayCycle _payrollPayCycle)
    {
        boolean rtrn = true;
        if(isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, _dataSourceCtx.getCompany(), '', conNull(), _hcmPositionEntity, fieldnum(HcmPositionEntity, PayCycleId), 'HcmPositionEntity.PayCycleId', _payrollPayCycle, fieldnum(PayrollPayCycle, PayCycleId), false/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
            rtrn = this.validateDataSourceExtensions(_entityCtx, _hcmPositionEntity, _dataSourceCtx, _payrollPayCycle) ? rtrn : false;
        }
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #HcmPositionDetail_ID:
                rtrn = this.validateDataSource_DS2(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #HcmPositionDuration_ID:
                rtrn = this.validateDataSource_DS8(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #HcmPositionWorkerAssignment_ID:
                rtrn = this.validateDataSource_DS9(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #HcmPositionUnionAgreement_ID:
                rtrn = this.validateDataSource_DS14(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #PayrollPositionDetails_ID:
                rtrn = this.validateDataSource_DS20(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #CompanyInfoPositionDetails_ID:
                rtrn = this.validateDataSource_DS21(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            case #PayrollPayCycle_ID:
                rtrn = this.validateDataSource_DS22(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmPosition, HcmPosition _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPosition, fieldnum(HcmPosition, PositionId), _matchingRecord, fieldnum(HcmPosition, PositionId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPosition, _matchingRecord);
    }
    private void mapToMatchingRecord_DS2(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDetail _hcmPositionDetail, HcmPositionDetail _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, AvailableForAssignment), _matchingRecord, fieldnum(HcmPositionDetail, AvailableForAssignment), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, CompLocation), _matchingRecord, fieldnum(HcmPositionDetail, CompLocation), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, Department), _matchingRecord, fieldnum(HcmPositionDetail, Department), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, Description), _matchingRecord, fieldnum(HcmPositionDetail, Description), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, FullTimeEquivalency), _matchingRecord, fieldnum(HcmPositionDetail, FullTimeEquivalency), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, Job), _matchingRecord, fieldnum(HcmPositionDetail, Job), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, PositionType), _matchingRecord, fieldnum(HcmPositionDetail, PositionType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, Title), _matchingRecord, fieldnum(HcmPositionDetail, Title), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidFrom), _matchingRecord, fieldnum(HcmPositionDetail, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, ValidTo), _matchingRecord, fieldnum(HcmPositionDetail, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionDetail, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDetail, fieldnum(HcmPositionDetail, Position), _matchingRecord, fieldnum(HcmPositionDetail, Position), 1);
    }
    private void mapToMatchingRecord_DS3(DataEntityDataSourceRuntimeContext _dataSourceCtx, OMOperatingUnit _oMOperatingUnit, OMOperatingUnit _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _oMOperatingUnit, fieldnum(OMOperatingUnit, OMOperatingUnitNumber), _matchingRecord, fieldnum(OMOperatingUnit, OMOperatingUnitNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _oMOperatingUnit, _matchingRecord);
    }
    private void mapToMatchingRecord_DS4(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmCompLocation _hcmCompLocation, HcmCompLocation _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmCompLocation, fieldnum(HcmCompLocation, CompLocationId), _matchingRecord, fieldnum(HcmCompLocation, CompLocationId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmCompLocation, _matchingRecord);
    }
    private void mapToMatchingRecord_DS5(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmJob _hcmJob, HcmJob _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmJob, fieldnum(HcmJob, JobId), _matchingRecord, fieldnum(HcmJob, JobId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmJob, _matchingRecord);
    }
    private void mapToMatchingRecord_DS6(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionType _hcmPositionType, HcmPositionType _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionType, fieldnum(HcmPositionType, TypeId), _matchingRecord, fieldnum(HcmPositionType, TypeId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionType, _matchingRecord);
    }
    private void mapToMatchingRecord_DS7(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmTitle _hcmTitle, HcmTitle _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmTitle, fieldnum(HcmTitle, TitleId), _matchingRecord, fieldnum(HcmTitle, TitleId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmTitle, _matchingRecord);
    }
    private void mapToMatchingRecord_DS8(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionDuration _hcmPositionDuration, HcmPositionDuration _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidFrom), _matchingRecord, fieldnum(HcmPositionDuration, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDuration, fieldnum(HcmPositionDuration, ValidTo), _matchingRecord, fieldnum(HcmPositionDuration, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionDuration, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionDuration, fieldnum(HcmPositionDuration, Position), _matchingRecord, fieldnum(HcmPositionDuration, Position), 1);
    }
    private void mapToMatchingRecord_DS9(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment, HcmPositionWorkerAssignment _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, AssignmentReasonCode), _matchingRecord, fieldnum(HcmPositionWorkerAssignment, AssignmentReasonCode), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidFrom), _matchingRecord, fieldnum(HcmPositionWorkerAssignment, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, ValidTo), _matchingRecord, fieldnum(HcmPositionWorkerAssignment, ValidTo), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Worker), _matchingRecord, fieldnum(HcmPositionWorkerAssignment, Worker), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionWorkerAssignment, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionWorkerAssignment, fieldnum(HcmPositionWorkerAssignment, Position), _matchingRecord, fieldnum(HcmPositionWorkerAssignment, Position), 1);
    }
    private void mapToMatchingRecord_DS10(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorker _hcmWorker, HcmWorker _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, PersonnelNumber), _matchingRecord, fieldnum(HcmWorker, PersonnelNumber), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmWorker, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorker, fieldnum(HcmWorker, Person), _matchingRecord, fieldnum(HcmWorker, Person), 1);
    }
    private void mapToMatchingRecord_DS11(DataEntityDataSourceRuntimeContext _dataSourceCtx, DirPerson _dirPerson, DirPerson _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _dirPerson, fieldnum(DirPerson, Name), _matchingRecord, fieldnum(DirPerson, Name), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _dirPerson, _matchingRecord);
    }
    private void mapToMatchingRecord_DS12(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmReasonCode _hcmReasonCode, HcmReasonCode _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmReasonCode, fieldnum(HcmReasonCode, ReasonCodeId), _matchingRecord, fieldnum(HcmReasonCode, ReasonCodeId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmReasonCode, _matchingRecord);
    }
    private void mapToMatchingRecord_DS13(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView, HcmWorkerPrimaryPositionAssignmentView _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmWorkerPrimaryPositionAssignmentView, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmWorkerPrimaryPositionAssignmentView, fieldnum(HcmWorkerPrimaryPositionAssignmentView, PositionWorkerAssignment), _matchingRecord, fieldnum(HcmWorkerPrimaryPositionAssignmentView, PositionWorkerAssignment), 1);
    }
    private void mapToMatchingRecord_DS14(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionUnionAgreement _hcmPositionUnionAgreement, HcmPositionUnionAgreement _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, UnionAgreement), _matchingRecord, fieldnum(HcmPositionUnionAgreement, UnionAgreement), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidFrom), _matchingRecord, fieldnum(HcmPositionUnionAgreement, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, ValidTo), _matchingRecord, fieldnum(HcmPositionUnionAgreement, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionUnionAgreement, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionUnionAgreement, fieldnum(HcmPositionUnionAgreement, Position), _matchingRecord, fieldnum(HcmPositionUnionAgreement, Position), 1);
    }
    private void mapToMatchingRecord_DS15(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnionAgreement _hcmUnionAgreement, HcmUnionAgreement _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmUnionAgreement, fieldnum(HcmUnionAgreement, AgreementName), _matchingRecord, fieldnum(HcmUnionAgreement, AgreementName), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmUnionAgreement, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmUnionAgreement, fieldnum(HcmUnionAgreement, LaborUnion), _matchingRecord, fieldnum(HcmUnionAgreement, LaborUnion), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmUnionAgreement, fieldnum(HcmUnionAgreement, LegalEntity), _matchingRecord, fieldnum(HcmUnionAgreement, LegalEntity), 1);
    }
    private void mapToMatchingRecord_DS16(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmUnions _hcmUnions, HcmUnions _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmUnions, fieldnum(HcmUnions, UnionID), _matchingRecord, fieldnum(HcmUnions, UnionID), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmUnions, _matchingRecord);
    }
    private void mapToMatchingRecord_DS17(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfo, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfo, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _companyInfo, _matchingRecord);
    }
    private void mapToMatchingRecord_DS18(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPositionLineHierarchyView _hcmPositionLineHierarchyView, HcmPositionLineHierarchyView _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidFrom), _matchingRecord, fieldnum(HcmPositionLineHierarchyView, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ValidTo), _matchingRecord, fieldnum(HcmPositionLineHierarchyView, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmPositionLineHierarchyView, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, Position), _matchingRecord, fieldnum(HcmPositionLineHierarchyView, Position), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmPositionLineHierarchyView, fieldnum(HcmPositionLineHierarchyView, ParentPosition), _matchingRecord, fieldnum(HcmPositionLineHierarchyView, ParentPosition), 1);
    }
    private void mapToMatchingRecord_DS19(DataEntityDataSourceRuntimeContext _dataSourceCtx, HcmPosition _hcmLineParentPosition, HcmPosition _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _hcmLineParentPosition, fieldnum(HcmPosition, PositionId), _matchingRecord, fieldnum(HcmPosition, PositionId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _hcmLineParentPosition, _matchingRecord);
    }
    private void mapToMatchingRecord_DS20(DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPositionDetails _payrollPositionDetails, PayrollPositionDetails _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PaidByLegalEntity), _matchingRecord, fieldnum(PayrollPositionDetails, PaidByLegalEntity), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayCycle), _matchingRecord, fieldnum(PayrollPositionDetails, PayCycle), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, PayrollNormalHours), _matchingRecord, fieldnum(PayrollPositionDetails, PayrollNormalHours), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidFrom), _matchingRecord, fieldnum(PayrollPositionDetails, ValidFrom), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, ValidTo), _matchingRecord, fieldnum(PayrollPositionDetails, ValidTo), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _payrollPositionDetails, _matchingRecord);
        // map data changes in unbound FK fields
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPositionDetails, fieldnum(PayrollPositionDetails, Position), _matchingRecord, fieldnum(PayrollPositionDetails, Position), 1);
    }
    private void mapToMatchingRecord_DS21(DataEntityDataSourceRuntimeContext _dataSourceCtx, CompanyInfo _companyInfoPositionDetails, CompanyInfo _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _companyInfoPositionDetails, fieldnum(CompanyInfo, DataArea), _matchingRecord, fieldnum(CompanyInfo, DataArea), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _companyInfoPositionDetails, _matchingRecord);
    }
    private void mapToMatchingRecord_DS22(DataEntityDataSourceRuntimeContext _dataSourceCtx, PayrollPayCycle _payrollPayCycle, PayrollPayCycle _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _payrollPayCycle, fieldnum(PayrollPayCycle, PayCycleId), _matchingRecord, fieldnum(PayrollPayCycle, PayCycleId), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(HcmPositionEntity), _payrollPayCycle, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #HcmPosition_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionDetail_ID:
                this.mapToMatchingRecord_DS2(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #OMOperatingUnit_ID:
                this.mapToMatchingRecord_DS3(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmCompLocation_ID:
                this.mapToMatchingRecord_DS4(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmJob_ID:
                this.mapToMatchingRecord_DS5(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionType_ID:
                this.mapToMatchingRecord_DS6(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmTitle_ID:
                this.mapToMatchingRecord_DS7(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionDuration_ID:
                this.mapToMatchingRecord_DS8(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionWorkerAssignment_ID:
                this.mapToMatchingRecord_DS9(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorker_ID:
                this.mapToMatchingRecord_DS10(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #DirPerson_ID:
                this.mapToMatchingRecord_DS11(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmReasonCode_ID:
                this.mapToMatchingRecord_DS12(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmWorkerPrimaryPositionAssignmentView_ID:
                this.mapToMatchingRecord_DS13(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionUnionAgreement_ID:
                this.mapToMatchingRecord_DS14(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmUnionAgreement_ID:
                this.mapToMatchingRecord_DS15(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmUnions_ID:
                this.mapToMatchingRecord_DS16(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfo_ID:
                this.mapToMatchingRecord_DS17(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmPositionLineHierarchyView_ID:
                this.mapToMatchingRecord_DS18(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #HcmLineParentPosition_ID:
                this.mapToMatchingRecord_DS19(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #PayrollPositionDetails_ID:
                this.mapToMatchingRecord_DS20(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #CompanyInfoPositionDetails_ID:
                this.mapToMatchingRecord_DS21(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            case #PayrollPayCycle_ID:
                this.mapToMatchingRecord_DS22(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationCompensation')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS4(_entityCtx.getEntityRecord(), 'HRMAdministrationCompensation'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'HcmCompLocation','HRMAdministrationCompensation'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS12(_entityCtx.getEntityRecord(), 'HRMAdministration'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'HcmReasonCode','HRMAdministration'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS14(_entityCtx.getEntityRecord(), 'HRMAdministration'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'HcmPositionUnionAgreement','HRMAdministration'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS15(_entityCtx.getEntityRecord(), 'HRMAdministration'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'HcmUnionAgreement','HRMAdministration'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministration')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS16(_entityCtx.getEntityRecord(), 'HRMAdministration'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'HcmUnions','HRMAdministration'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS20(_entityCtx.getEntityRecord(), 'HRMAdministrationPayrollInfo'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'PayrollPositionDetails','HRMAdministrationPayrollInfo'));
            }
        }
        if(!isConfigurationKeyEnabled(configurationKeyName2Id('HRMAdministrationPayrollInfo')))
        {
            if(this.isAnyMappedDataSourceFieldSet_DS22(_entityCtx.getEntityRecord(), 'HRMAdministrationPayrollInfo'))
            {
                // Outer joined data source configuration key is disabled and fields mapped to this data source are set
                throw error(strfmt("@ApplicationPlatform:DataEntityDataSourceConfigKeyDisabled",'PayrollPayCycle','HRMAdministrationPayrollInfo'));
            }
        }
    }
    protected int getValidTimeStateUpdateModeForDataSource(DataEntityRuntimeContext _entityCtx, int _dataSourceId, str _dataSourceName)
    {
        int validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
        
        // returns ValidTimeStateUpdate value for date effective data sources.
        
        switch (_dataSourceId)
        {
            case #HcmPositionDetail_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            case #HcmPositionDuration_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            case #HcmPositionWorkerAssignment_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            case #HcmPositionUnionAgreement_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::CreateNewTimePeriod;
                break;
            case #PayrollPositionDetails_ID:
                validTimeStateUpdate_ = ValidTimeStateUpdate::Correction;
                break;
            default : validTimeStateUpdate_ = super(_entityCtx,_dataSourceId,_dataSourceName);
        }
        return validTimeStateUpdate_;
    }
    protected boolean hasDataSourceRecordChanged(int _dataSourceId, common _originalRecord, common _updatedRecord)
    {
        boolean hasDataSourceRecordChanged_ = true;
        
        // The method is called for OCC validation and only upon data sources that have One-to-Many relationships.
        
        switch (_dataSourceId)
        {
            case #HcmPosition_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS1(_originalRecord, _updatedRecord);
                break;
            case #OMOperatingUnit_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS3(_originalRecord, _updatedRecord);
                break;
            case #HcmCompLocation_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS4(_originalRecord, _updatedRecord);
                break;
            case #HcmJob_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS5(_originalRecord, _updatedRecord);
                break;
            case #HcmPositionType_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS6(_originalRecord, _updatedRecord);
                break;
            case #HcmTitle_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS7(_originalRecord, _updatedRecord);
                break;
            case #HcmWorker_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS10(_originalRecord, _updatedRecord);
                break;
            case #DirPerson_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS11(_originalRecord, _updatedRecord);
                break;
            case #HcmReasonCode_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS12(_originalRecord, _updatedRecord);
                break;
            case #HcmUnionAgreement_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS15(_originalRecord, _updatedRecord);
                break;
            case #HcmUnions_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS16(_originalRecord, _updatedRecord);
                break;
            case #CompanyInfo_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS17(_originalRecord, _updatedRecord);
                break;
            case #HcmPositionLineHierarchyView_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS18(_originalRecord, _updatedRecord);
                break;
            case #HcmLineParentPosition_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS19(_originalRecord, _updatedRecord);
                break;
            case #CompanyInfoPositionDetails_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS21(_originalRecord, _updatedRecord);
                break;
            case #PayrollPayCycle_ID:
                hasDataSourceRecordChanged_ = this.hasDataSourceRecordChanged_DS22(_originalRecord, _updatedRecord);
                break;
        }
        return hasDataSourceRecordChanged_;
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'HcmPosition', m_HcmPosition, this.getDataSourceId('HcmPosition'), this.getDataSourceId('HcmPosition'), false/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionDetail', m_HcmPositionDetail, this.getDataSourceId('HcmPositionDetail'), this.getDataSourceId('HcmPositionDetail'), true/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'OMOperatingUnit', m_OMOperatingUnit, this.getDataSourceId('OMOperatingUnit'), this.getDataSourceId('OMOperatingUnit'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmCompLocation', m_HcmCompLocation, this.getDataSourceId('HcmCompLocation'), this.getDataSourceId('HcmCompLocation'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmJob', m_HcmJob, this.getDataSourceId('HcmJob'), this.getDataSourceId('HcmJob'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionType', m_HcmPositionType, this.getDataSourceId('HcmPositionType'), this.getDataSourceId('HcmPositionType'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmTitle', m_HcmTitle, this.getDataSourceId('HcmTitle'), this.getDataSourceId('HcmTitle'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionDuration', m_HcmPositionDuration, this.getDataSourceId('HcmPositionDuration'), this.getDataSourceId('HcmPositionDuration'), true/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionWorkerAssignment', m_HcmPositionWorkerAssignment, this.getDataSourceId('HcmPositionWorkerAssignment'), this.getDataSourceId('HcmPositionWorkerAssignment'), true/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorker', m_HcmWorker, this.getDataSourceId('HcmWorker'), this.getDataSourceId('HcmWorker'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'DirPerson', m_DirPerson, this.getDataSourceId('DirPerson'), this.getDataSourceId('DirPerson'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmReasonCode', m_HcmReasonCode, this.getDataSourceId('HcmReasonCode'), this.getDataSourceId('HcmReasonCode'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmWorkerPrimaryPositionAssignmentView', m_HcmWorkerPrimaryPositionAssignmentView, this.getDataSourceId('HcmWorkerPrimaryPositionAssignmentView'), this.getDataSourceId('HcmWorkerPrimaryPositionAssignmentView'), true/* optional */, true/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionUnionAgreement', m_HcmPositionUnionAgreement, this.getDataSourceId('HcmPositionUnionAgreement'), this.getDataSourceId('HcmPositionUnionAgreement'), true/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmUnionAgreement', m_HcmUnionAgreement, this.getDataSourceId('HcmUnionAgreement'), this.getDataSourceId('HcmUnionAgreement'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmUnions', m_HcmUnions, this.getDataSourceId('HcmUnions'), this.getDataSourceId('HcmUnions'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfo', m_CompanyInfo, this.getDataSourceId('CompanyInfo'), this.getDataSourceId('CompanyInfo'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmPositionLineHierarchyView', m_HcmPositionLineHierarchyView, this.getDataSourceId('HcmPositionLineHierarchyView'), this.getDataSourceId('HcmPositionLineHierarchyView'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'HcmLineParentPosition', m_HcmLineParentPosition, this.getDataSourceId('HcmLineParentPosition'), this.getDataSourceId('HcmLineParentPosition'), true/* optional */, true/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'PayrollPositionDetails', m_PayrollPositionDetails, this.getDataSourceId('PayrollPositionDetails'), this.getDataSourceId('PayrollPositionDetails'), true/* optional */, false/* readonly */, false/* oneToMany */, true/* dateEffective */, true/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'CompanyInfoPositionDetails', m_CompanyInfoPositionDetails, this.getDataSourceId('CompanyInfoPositionDetails'), this.getDataSourceId('CompanyInfoPositionDetails'), true/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSource(_entityCtx, 'PayrollPayCycle', m_PayrollPayCycle, this.getDataSourceId('PayrollPayCycle'), this.getDataSourceId('PayrollPayCycle'), true/* optional */, false/* readonly */, true/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private boolean hasDataSourceRecordChanged_DS1(HcmPosition _originalRecord, HcmPosition _updatedRecord)
    {
        if (_originalRecord.PositionId != _updatedRecord.PositionId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS10(HcmWorker _originalRecord, HcmWorker _updatedRecord)
    {
        if (_originalRecord.PersonnelNumber != _updatedRecord.PersonnelNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS11(DirPerson _originalRecord, DirPerson _updatedRecord)
    {
        if (_originalRecord.Name != _updatedRecord.Name)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS12(HcmReasonCode _originalRecord, HcmReasonCode _updatedRecord)
    {
        if (_originalRecord.ReasonCodeId != _updatedRecord.ReasonCodeId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS15(HcmUnionAgreement _originalRecord, HcmUnionAgreement _updatedRecord)
    {
        if (_originalRecord.AgreementName != _updatedRecord.AgreementName)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS16(HcmUnions _originalRecord, HcmUnions _updatedRecord)
    {
        if (_originalRecord.UnionID != _updatedRecord.UnionID)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS17(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS18(HcmPositionLineHierarchyView _originalRecord, HcmPositionLineHierarchyView _updatedRecord)
    {
        if (_originalRecord.ValidFrom != _updatedRecord.ValidFrom)
        {
            return true;
        }
        if (_originalRecord.ValidTo != _updatedRecord.ValidTo)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS19(HcmPosition _originalRecord, HcmPosition _updatedRecord)
    {
        if (_originalRecord.PositionId != _updatedRecord.PositionId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS21(CompanyInfo _originalRecord, CompanyInfo _updatedRecord)
    {
        if (_originalRecord.DataArea != _updatedRecord.DataArea)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS22(PayrollPayCycle _originalRecord, PayrollPayCycle _updatedRecord)
    {
        if (_originalRecord.PayCycleId != _updatedRecord.PayCycleId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS3(OMOperatingUnit _originalRecord, OMOperatingUnit _updatedRecord)
    {
        if (_originalRecord.OMOperatingUnitNumber != _updatedRecord.OMOperatingUnitNumber)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS4(HcmCompLocation _originalRecord, HcmCompLocation _updatedRecord)
    {
        if (_originalRecord.CompLocationId != _updatedRecord.CompLocationId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS5(HcmJob _originalRecord, HcmJob _updatedRecord)
    {
        if (_originalRecord.JobId != _updatedRecord.JobId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS6(HcmPositionType _originalRecord, HcmPositionType _updatedRecord)
    {
        if (_originalRecord.TypeId != _updatedRecord.TypeId)
        {
            return true;
        }
        return false;
    }
    private boolean hasDataSourceRecordChanged_DS7(HcmTitle _originalRecord, HcmTitle _updatedRecord)
    {
        if (_originalRecord.TitleId != _updatedRecord.TitleId)
        {
            return true;
        }
        return false;
    }
    private HcmPosition LookForUniqueKeyMatch_DS1(HcmPositionEntity _hcmPositionEntity, HcmPosition _hcmPosition)
    {
        HcmPosition hcmPosition_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPosition_
        where
            hcmPosition_.PositionId == _hcmPosition.PositionId
        ;
        
        if (hcmPosition_)
        {
            return hcmPosition_;
        }
        
        return hcmPosition_;
    }
    private HcmWorker LookForUniqueKeyMatch_DS10(HcmPositionEntity _hcmPositionEntity, HcmWorker _hcmWorker)
    {
        HcmWorker hcmWorker_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorker_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PersonnelNumber, RecId
            from
                hcmWorker_
        where
            hcmWorker_.PersonnelNumber == _hcmWorker.PersonnelNumber
        ;
        
        if (hcmWorker_)
        {
            return hcmWorker_;
        }
        
        return hcmWorker_;
    }
    private DirPerson LookForUniqueKeyMatch_DS11(HcmPositionEntity _hcmPositionEntity, DirPerson _dirPerson)
    {
        DirPerson dirPerson_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        dirPerson_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                Name, RecId
            from
                dirPerson_
        where
            dirPerson_.RecId == _dirPerson.RecId
        ;
        
        if (dirPerson_)
        {
            return dirPerson_;
        }
        
        return dirPerson_;
    }
    private HcmReasonCode LookForUniqueKeyMatch_DS12(HcmPositionEntity _hcmPositionEntity, HcmReasonCode _hcmReasonCode)
    {
        HcmReasonCode hcmReasonCode_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmReasonCode_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                ReasonCodeId, RecId
            from
                hcmReasonCode_
        where
            hcmReasonCode_.ReasonCodeId == _hcmReasonCode.ReasonCodeId
        ;
        
        if (hcmReasonCode_)
        {
            return hcmReasonCode_;
        }
        
        return hcmReasonCode_;
    }
    private HcmWorkerPrimaryPositionAssignmentView LookForUniqueKeyMatch_DS13(HcmPositionEntity _hcmPositionEntity, HcmWorkerPrimaryPositionAssignmentView _hcmWorkerPrimaryPositionAssignmentView)
    {
        HcmWorkerPrimaryPositionAssignmentView hcmWorkerPrimaryPositionAssignmentView_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmWorkerPrimaryPositionAssignmentView_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                IsPrimaryPosition
            from
                hcmWorkerPrimaryPositionAssignmentView_
        where
            hcmWorkerPrimaryPositionAssignmentView_.RecId == _hcmWorkerPrimaryPositionAssignmentView.RecId
        ;
        
        if (hcmWorkerPrimaryPositionAssignmentView_)
        {
            return hcmWorkerPrimaryPositionAssignmentView_;
        }
        
        return hcmWorkerPrimaryPositionAssignmentView_;
    }
    private HcmPositionUnionAgreement LookForUniqueKeyMatch_DS14(HcmPositionEntity _hcmPositionEntity, HcmPositionUnionAgreement _hcmPositionUnionAgreement)
    {
        HcmPositionUnionAgreement hcmPositionUnionAgreement_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPositionUnionAgreement_
        where
            hcmPositionUnionAgreement_.Position == _hcmPositionUnionAgreement.Position
        ;
        
        if (hcmPositionUnionAgreement_)
        {
            return hcmPositionUnionAgreement_;
        }
        
        return hcmPositionUnionAgreement_;
    }
    private HcmUnionAgreement LookForUniqueKeyMatch_DS15(HcmPositionEntity _hcmPositionEntity, HcmUnionAgreement _hcmUnionAgreement)
    {
        HcmUnionAgreement hcmUnionAgreement_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmUnionAgreement_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                AgreementName, RecId, LaborUnion, LegalEntity
            from
                hcmUnionAgreement_
        where
            hcmUnionAgreement_.LaborUnion == _hcmUnionAgreement.LaborUnion && hcmUnionAgreement_.AgreementName == _hcmUnionAgreement.AgreementName && hcmUnionAgreement_.LegalEntity == _hcmUnionAgreement.LegalEntity
        ;
        
        if (hcmUnionAgreement_)
        {
            return hcmUnionAgreement_;
        }
        
        return hcmUnionAgreement_;
    }
    private HcmUnions LookForUniqueKeyMatch_DS16(HcmPositionEntity _hcmPositionEntity, HcmUnions _hcmUnions)
    {
        HcmUnions hcmUnions_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmUnions_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                UnionID, RecId
            from
                hcmUnions_
        where
            hcmUnions_.UnionID == _hcmUnions.UnionID
        ;
        
        if (hcmUnions_)
        {
            return hcmUnions_;
        }
        
        return hcmUnions_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS17(HcmPositionEntity _hcmPositionEntity, CompanyInfo _companyInfo)
    {
        CompanyInfo companyInfo_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        companyInfo_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                DataArea, RecId
            from
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfo.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }
    private HcmPositionLineHierarchyView LookForUniqueKeyMatch_DS18(HcmPositionEntity _hcmPositionEntity, HcmPositionLineHierarchyView _hcmPositionLineHierarchyView)
    {
        HcmPositionLineHierarchyView hcmPositionLineHierarchyView_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmPositionLineHierarchyView_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                ValidFrom, ValidTo
            from
                hcmPositionLineHierarchyView_
        where
            hcmPositionLineHierarchyView_.RecId == _hcmPositionLineHierarchyView.RecId
        ;
        
        if (hcmPositionLineHierarchyView_)
        {
            return hcmPositionLineHierarchyView_;
        }
        
        return hcmPositionLineHierarchyView_;
    }
    private HcmPosition LookForUniqueKeyMatch_DS19(HcmPositionEntity _hcmPositionEntity, HcmPosition _hcmLineParentPosition)
    {
        HcmPosition hcmPosition_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmPosition_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                PositionId, RecId
            from
                hcmPosition_
        where
            hcmPosition_.PositionId == _hcmLineParentPosition.PositionId
        ;
        
        if (hcmPosition_)
        {
            return hcmPosition_;
        }
        
        return hcmPosition_;
    }
    private HcmPositionDetail LookForUniqueKeyMatch_DS2(HcmPositionEntity _hcmPositionEntity, HcmPositionDetail _hcmPositionDetail)
    {
        HcmPositionDetail hcmPositionDetail_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPositionDetail_
        where
            hcmPositionDetail_.Position == _hcmPositionDetail.Position
        ;
        
        if (hcmPositionDetail_)
        {
            return hcmPositionDetail_;
        }
        
        return hcmPositionDetail_;
    }
    private PayrollPositionDetails LookForUniqueKeyMatch_DS20(HcmPositionEntity _hcmPositionEntity, PayrollPositionDetails _payrollPositionDetails)
    {
        PayrollPositionDetails payrollPositionDetails_ = null;
        
        select
            forUpdate
            firstOnly
                payrollPositionDetails_
        where
            payrollPositionDetails_.Position == _payrollPositionDetails.Position
        ;
        
        if (payrollPositionDetails_)
        {
            return payrollPositionDetails_;
        }
        
        return payrollPositionDetails_;
    }
    private CompanyInfo LookForUniqueKeyMatch_DS21(HcmPositionEntity _hcmPositionEntity, CompanyInfo _companyInfoPositionDetails)
    {
        CompanyInfo companyInfo_ = null;
        
        select
            forUpdate
            firstOnly
                companyInfo_
        where
            companyInfo_.DataArea == _companyInfoPositionDetails.DataArea
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        select
            forUpdate
            firstOnly
                companyInfo_
        where
            companyInfo_.PartyNumber == _companyInfoPositionDetails.PartyNumber
        ;
        
        if (companyInfo_)
        {
            return companyInfo_;
        }
        
        return companyInfo_;
    }
    private PayrollPayCycle LookForUniqueKeyMatch_DS22(HcmPositionEntity _hcmPositionEntity, PayrollPayCycle _payrollPayCycle)
    {
        PayrollPayCycle payrollPayCycle_ = null;
        
        select
            forUpdate
            firstOnly
                payrollPayCycle_
        where
            payrollPayCycle_.PayCycleId == _payrollPayCycle.PayCycleId
        ;
        
        if (payrollPayCycle_)
        {
            return payrollPayCycle_;
        }
        
        return payrollPayCycle_;
    }
    private OMOperatingUnit LookForUniqueKeyMatch_DS3(HcmPositionEntity _hcmPositionEntity, OMOperatingUnit _oMOperatingUnit)
    {
        OMOperatingUnit oMOperatingUnit_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        oMOperatingUnit_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                OMOperatingUnitNumber, RecId
            from
                oMOperatingUnit_
        where
            oMOperatingUnit_.OMOperatingUnitNumber == _oMOperatingUnit.OMOperatingUnitNumber
        ;
        
        if (oMOperatingUnit_)
        {
            return oMOperatingUnit_;
        }
        
        return oMOperatingUnit_;
    }
    private HcmCompLocation LookForUniqueKeyMatch_DS4(HcmPositionEntity _hcmPositionEntity, HcmCompLocation _hcmCompLocation)
    {
        HcmCompLocation hcmCompLocation_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmCompLocation_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                CompLocationId, RecId
            from
                hcmCompLocation_
        where
            hcmCompLocation_.CompLocationId == _hcmCompLocation.CompLocationId
        ;
        
        if (hcmCompLocation_)
        {
            return hcmCompLocation_;
        }
        
        return hcmCompLocation_;
    }
    private HcmJob LookForUniqueKeyMatch_DS5(HcmPositionEntity _hcmPositionEntity, HcmJob _hcmJob)
    {
        HcmJob hcmJob_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmJob_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                JobId, RecId
            from
                hcmJob_
        where
            hcmJob_.JobId == _hcmJob.JobId
        ;
        
        if (hcmJob_)
        {
            return hcmJob_;
        }
        
        return hcmJob_;
    }
    private HcmPositionType LookForUniqueKeyMatch_DS6(HcmPositionEntity _hcmPositionEntity, HcmPositionType _hcmPositionType)
    {
        HcmPositionType hcmPositionType_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmPositionType_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                TypeId, RecId
            from
                hcmPositionType_
        where
            hcmPositionType_.TypeId == _hcmPositionType.TypeId
        ;
        
        if (hcmPositionType_)
        {
            return hcmPositionType_;
        }
        
        return hcmPositionType_;
    }
    private HcmTitle LookForUniqueKeyMatch_DS7(HcmPositionEntity _hcmPositionEntity, HcmTitle _hcmTitle)
    {
        HcmTitle hcmTitle_ = null;
        
        // Ensuring only fields in the selection list should be accessed for read-only data source.
        hcmTitle_.checkInvalidFieldAccess(true);
        
        select
            firstOnly
                // Specify explicit field selection for read-only data source.
                TitleId, RecId
            from
                hcmTitle_
        where
            hcmTitle_.TitleId == _hcmTitle.TitleId
        ;
        
        if (hcmTitle_)
        {
            return hcmTitle_;
        }
        
        return hcmTitle_;
    }
    private HcmPositionDuration LookForUniqueKeyMatch_DS8(HcmPositionEntity _hcmPositionEntity, HcmPositionDuration _hcmPositionDuration)
    {
        HcmPositionDuration hcmPositionDuration_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPositionDuration_
        where
            hcmPositionDuration_.Position == _hcmPositionDuration.Position
        ;
        
        if (hcmPositionDuration_)
        {
            return hcmPositionDuration_;
        }
        
        return hcmPositionDuration_;
    }
    private HcmPositionWorkerAssignment LookForUniqueKeyMatch_DS9(HcmPositionEntity _hcmPositionEntity, HcmPositionWorkerAssignment _hcmPositionWorkerAssignment)
    {
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment_ = null;
        
        select
            forUpdate
            firstOnly
                hcmPositionWorkerAssignment_
        where
            hcmPositionWorkerAssignment_.Position == _hcmPositionWorkerAssignment.Position
        ;
        
        if (hcmPositionWorkerAssignment_)
        {
            return hcmPositionWorkerAssignment_;
        }
        
        return hcmPositionWorkerAssignment_;
    }

}

